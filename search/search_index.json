{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"pytest-chinese-doc # pytest\uff08v6.1.1\uff09 \u7684\u4e2d\u6587\u6587\u6863\uff0c\u4e0d\u4ec5\u4ec5\u662f\u5355\u7eaf\u7684\u7ffb\u8bd1\uff0c\u4e5f\u5305\u542b\u6211\u7684\u4e00\u4e9b\u7406\u89e3\u548c\u5b9e\u8df5\uff0c\u5e0c\u671b\u6709\u66f4\u591a\u7684\u4eba\u4f7f\u7528\u8fd9\u6b3e\u4f18\u79c0\u7684\u6d4b\u8bd5\u6846\u67b6\u3002 \u73af\u5883 # pytest \u7248\u672c\uff1a6.1.1 python \u7248\u672c\uff1a3.8.4 \u4f7f\u7528 # \u514b\u9686\u6b64\u4ed3\u5e93\uff1b docs \u76ee\u5f55\u4e2d\u5305\u542b\u6240\u6709\u7684\u6587\u7ae0\uff0c\u4ee5 markdown \u683c\u5f0f\u7f16\u5199\uff0c\u96c6\u6210 admonition \u6269\u5c55\uff0c\u4f7f\u7528 mkdocs \u5de5\u5177\u652f\u6491\u5728\u7ebf\u6587\u6863\u3002 src \u76ee\u5f55\u4e2d\u5305\u542b\u6240\u6709\u793a\u4f8b\u7684\u6e90\u7801\uff0c\u4ee5\u7ae0\u8282\u5212\u5206\u3002 \u8fdb\u5165\u9879\u76ee\u6839\u76ee\u5f55\uff0c\u6267\u884c\u547d\u4ee4 pipenv install \u5b89\u88c5\u865a\u62df\u73af\u5883\uff0c\u4f7f\u7528\u7684\u662f \u8c46\u74e3\u7684\u955c\u50cf \u3002 \u5176\u5b83\u83b7\u53d6\u9014\u5f84 # \u5173\u6ce8\u5fae\u4fe1\u516c\u4f17\u53f7\u3010\u5c0f\u9e7f\u7684\u5148\u68ee\u3011\uff0c\u56de\u590d\u3010pytest\u3011\uff1a \u535a\u5ba2\u56ed\uff1a https://www.cnblogs.com/luizyao/p/11771740.html \u4e3b\u8981\u65b0\u52a0\u53ca\u4fee\u8ba2\u7684\u5185\u5bb9\uff08v5.1.3 -> v6.1.1\uff09 # --pdb \u52a0\u8f7d ipython \u73af\u5883\u4f5c\u4e3a\u8bca\u65ad\u5668\uff1a \u67e5\u770b --durations-min \u9ed8\u8ba4\u503c\u4ece 0.01 \u79d2\u4fee\u6539\u6210 0.005 \u79d2\uff1a \u67e5\u770b --junit_family \u547d\u4ee4\u884c\u9009\u9879\u7684\u9ed8\u8ba4\u503c\u6539\u6210 xunit2 \uff1a \u67e5\u770b \u79fb\u9664\u4e86\u5bf9 --resultlog \u547d\u4ee4\u884c\u9009\u9879\u7684\u652f\u6301\uff1a \u67e5\u770b","title":"\u9996\u9875"},{"location":"#pytest-chinese-doc","text":"pytest\uff08v6.1.1\uff09 \u7684\u4e2d\u6587\u6587\u6863\uff0c\u4e0d\u4ec5\u4ec5\u662f\u5355\u7eaf\u7684\u7ffb\u8bd1\uff0c\u4e5f\u5305\u542b\u6211\u7684\u4e00\u4e9b\u7406\u89e3\u548c\u5b9e\u8df5\uff0c\u5e0c\u671b\u6709\u66f4\u591a\u7684\u4eba\u4f7f\u7528\u8fd9\u6b3e\u4f18\u79c0\u7684\u6d4b\u8bd5\u6846\u67b6\u3002","title":"pytest-chinese-doc"},{"location":"#_1","text":"pytest \u7248\u672c\uff1a6.1.1 python \u7248\u672c\uff1a3.8.4","title":"\u73af\u5883"},{"location":"#_2","text":"\u514b\u9686\u6b64\u4ed3\u5e93\uff1b docs \u76ee\u5f55\u4e2d\u5305\u542b\u6240\u6709\u7684\u6587\u7ae0\uff0c\u4ee5 markdown \u683c\u5f0f\u7f16\u5199\uff0c\u96c6\u6210 admonition \u6269\u5c55\uff0c\u4f7f\u7528 mkdocs \u5de5\u5177\u652f\u6491\u5728\u7ebf\u6587\u6863\u3002 src \u76ee\u5f55\u4e2d\u5305\u542b\u6240\u6709\u793a\u4f8b\u7684\u6e90\u7801\uff0c\u4ee5\u7ae0\u8282\u5212\u5206\u3002 \u8fdb\u5165\u9879\u76ee\u6839\u76ee\u5f55\uff0c\u6267\u884c\u547d\u4ee4 pipenv install \u5b89\u88c5\u865a\u62df\u73af\u5883\uff0c\u4f7f\u7528\u7684\u662f \u8c46\u74e3\u7684\u955c\u50cf \u3002","title":"\u4f7f\u7528"},{"location":"#_3","text":"\u5173\u6ce8\u5fae\u4fe1\u516c\u4f17\u53f7\u3010\u5c0f\u9e7f\u7684\u5148\u68ee\u3011\uff0c\u56de\u590d\u3010pytest\u3011\uff1a \u535a\u5ba2\u56ed\uff1a https://www.cnblogs.com/luizyao/p/11771740.html","title":"\u5176\u5b83\u83b7\u53d6\u9014\u5f84"},{"location":"#v513-v611","text":"--pdb \u52a0\u8f7d ipython \u73af\u5883\u4f5c\u4e3a\u8bca\u65ad\u5668\uff1a \u67e5\u770b --durations-min \u9ed8\u8ba4\u503c\u4ece 0.01 \u79d2\u4fee\u6539\u6210 0.005 \u79d2\uff1a \u67e5\u770b --junit_family \u547d\u4ee4\u884c\u9009\u9879\u7684\u9ed8\u8ba4\u503c\u6539\u6210 xunit2 \uff1a \u67e5\u770b \u79fb\u9664\u4e86\u5bf9 --resultlog \u547d\u4ee4\u884c\u9009\u9879\u7684\u652f\u6301\uff1a \u67e5\u770b","title":"\u4e3b\u8981\u65b0\u52a0\u53ca\u4fee\u8ba2\u7684\u5185\u5bb9\uff08v5.1.3 -&gt; v6.1.1\uff09"},{"location":"about/license/","text":"License # The MIT License (MIT) Copyright (c) 2020 Yao Meng Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"about/license/#license","text":"The MIT License (MIT) Copyright (c) 2020 Yao Meng Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"zh-Hans-CN/%E4%B8%80%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E5%85%A5%E9%97%A8/","text":"\u5b89\u88c5\u548c\u5165\u95e8 # pytest \u662f\u4e00\u4e2a\u80fd\u591f\u7b80\u5316\u6d4b\u8bd5\u7cfb\u7edf\u6784\u5efa\u3001\u65b9\u4fbf\u6d4b\u8bd5\u89c4\u6a21\u6269\u5c55\u7684\u6846\u67b6\uff0c\u5b83\u8ba9\u6d4b\u8bd5\u53d8\u5f97\u66f4\u5177\u8868\u73b0\u529b\u548c\u53ef\u8bfb\u6027\u3002\u53ea\u9700\u8981\u51e0\u5206\u949f\u7684\u65f6\u95f4\uff0c\u4f60\u5c31\u53ef\u4ee5\u5f00\u59cb\u4e00\u4e2a\u7b80\u5355\u7684\u5355\u5143\u6d4b\u8bd5\u6216\u8005\u590d\u6742\u7684\u529f\u80fd\u6d4b\u8bd5\u3002 \u5b89\u88c5 pytest # \u5728\u547d\u4ee4\u884c\u6267\u884c\u4ee5\u4e0b\u547d\u4ee4\uff1a $ pip install pytest==6.1.1 \u68c0\u67e5\u7248\u672c\uff1a $ pytest --version pytest 6.1.1 \u521b\u5efa\u4f60\u7684\u7b2c\u4e00\u4e2a\u6d4b\u8bd5\u7528\u4f8b # \u5b83\u53ea\u6709\u56db\u884c\u4ee3\u7801\uff1a # src/chapter-1/test_sample.py def func(x): return x + 1 def test_answer(): assert func(3) == 5 \u73b0\u5728\u5f00\u59cb\u6267\u884c\u8fd9\u4e2a\u6d4b\u8bd5\u7528\u4f8b\uff1a $ pipenv run pytest src/chapter-1/test_sample.py ================================ test session starts ================================= platform darwin -- Python 3.8.4, pytest-6.1.1, py-1.9.0, pluggy-0.13.1 rootdir: /Users/yaomeng/Private/projects/pytest-chinese-doc collected 1 item src/chapter-1/test_sample.py F [100%] ====================================== FAILURES ====================================== ____________________________________ test_answer _____________________________________ def test_answer(): > assert func(3) == 5 E assert 4 == 5 E + where 4 = func(3) src/chapter-1/test_sample.py:6: AssertionError ============================== short test summary info =============================== FAILED src/chapter-1/test_sample.py::test_answer - assert 4 == 5 ================================= 1 failed in 0.05s ================================== [100%] \u8868\u793a\u6267\u884c\u6240\u6709\u6d4b\u8bd5\u7528\u4f8b\u7684\u603b\u4f53\u8fdb\u5ea6\u3002\u56e0\u4e3a func(3) \u4e0d\u7b49\u4e8e 5 \uff0c\u6240\u4ee5\u6700\u540e pytest \u4f1a\u663e\u793a\u4e00\u4e2a\u8868\u793a\u6d4b\u8bd5\u5931\u8d25\u7684\u62a5\u544a\u3002 Note \u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u76f4\u63a5\u4f7f\u7528 assert \u6765\u9a8c\u8bc1\u6d4b\u8bd5\u7528\u4f8b\u4e2d\u7684\u9884\u671f\u7ed3\u679c\uff0c\u8fd9\u662f\u56e0\u4e3a pytest \u63d0\u4f9b\u4e86\u9ad8\u7ea7\u7684\u65ad\u8a00\u81ea\u7701\u529f\u80fd\uff0c\u53ef\u4ee5\u667a\u80fd\u7684\u4e3a\u6211\u4eec\u5c55\u793a\u5931\u8d25\u5904\u7684\u4e2d\u95f4\u4fe1\u606f\uff08 where 4 = func(3) \uff09\uff0c\u56e0\u6b64\u6211\u4eec\u5c31\u65e0\u9700\u4f7f\u7528 assertEqual \u3001 assertNotEqual \u4e4b\u7c7b\u7684\u65b9\u6cd5\u3002 \u6267\u884c\u591a\u4e2a\u6d4b\u8bd5\u7528\u4f8b # pytest \u4f1a\u6267\u884c\u5f53\u524d\u53ca\u5176\u5b50\u6587\u4ef6\u5939\u4e2d\uff0c\u6240\u6709\u547d\u540d\u7b26\u5408 test_*.py \u6216\u8005 *_test.py \u89c4\u5219\u7684\u6587\u4ef6\u4e2d\u7684\u6240\u6709\u7684\u6d4b\u8bd5\u7528\u4f8b\uff1b \u89e6\u53d1\u4e00\u4e2a\u6307\u5b9a\u5f02\u5e38\u7684\u65ad\u8a00 # \u4f7f\u7528 raises \u53ef\u4ee5\u9a8c\u8bc1\u67d0\u4e9b\u4ee3\u7801\u662f\u5426\u629b\u51fa\u4e00\u4e2a\u6307\u5b9a\u7684\u5f02\u5e38\uff1a # src/chapter-1/test_sysexit.py import pytest def f(): # \u8bf7\u6c42\u9000\u51fa\u89e3\u91ca\u5668 raise SystemExit(1) def test_mytest(): with pytest.raises(SystemExit): f() \u6267\u884c\u8fd9\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u65f6\uff0c\u52a0\u4e0a -q \u9009\u9879\u53ef\u4ee5\u7cbe\u7b80\u6d4b\u8bd5\u7ed3\u679c\u7684\u8f93\u51fa\uff1a $ pipenv run pytest src/chapter-1/test_sysexit.py ================================ test session starts ================================= platform darwin -- Python 3.8.4, pytest-6.1.1, py-1.9.0, pluggy-0.13.1 rootdir: /Users/yaomeng/Private/projects/pytest-chinese-doc collected 1 item src/chapter-1/test_sysexit.py . [100%] ================================= 1 passed in 0.01s ================================== Note \u4f7f\u7528 -q/--quiet \u547d\u4ee4\u884c\u6807\u8bb0\u53ef\u4ee5\u7b80\u5316\u6d4b\u8bd5\u7ed3\u679c\u8f93\u51fa\u3002 \u5728\u4e00\u4e2a\u7c7b\u4e2d\u7ec4\u7ec7\u591a\u4e2a\u6d4b\u8bd5\u7528\u4f8b # pytest \u53ef\u4ee5\u8ba9\u4f60\u5f88\u5bb9\u6613\u7684\u521b\u5efa\u4e00\u4e2a\u6d4b\u8bd5\u7c7b\u6765\u5305\u542b\u591a\u4e2a\u6d4b\u8bd5\u7528\u4f8b\uff1a # src/chapter-1/test_class.py class TestClass: def test_one(self): x = \"this\" assert \"h\" in x def test_two(self): x = \"hello\" assert hasattr(x, \"check\") \u6211\u4eec\u65e0\u9700\u8ba9\u6d4b\u8bd5\u7c7b\u7ee7\u627f\u81ea\u4efb\u4f55\u57fa\u7c7b\uff0c\u4f46\u662f\u8981\u786e\u4fdd\u7c7b\u540d\u7684\u524d\u7f00\u4e3a Test \uff0c\u5426\u5219\u5c06\u5ffd\u7565\u5176\u4e2d\u7684\u6d4b\u8bd5\u7528\u4f8b\u3002\u901a\u8fc7\u4f20\u5165\u6587\u4ef6\u8def\u5f84\u5c31\u53ef\u4ee5\u6267\u884c\u8fd9\u4e2a\u6d4b\u8bd5\u7c7b\uff1a $ pipenv run pytest -q src/chapter-1/test_class.py .F [100%] ====================================== FAILURES ====================================== _________________________________ TestClass.test_two _________________________________ self = <test_class.TestClass object at 0x1046f7df0> def test_two(self): x = \"hello\" > assert hasattr(x, \"check\") E AssertionError: assert False E + where False = hasattr('hello', 'check') src/chapter-1/test_class.py:8: AssertionError ============================== short test summary info =============================== FAILED src/chapter-1/test_class.py::TestClass::test_two - AssertionError: assert False 1 failed, 1 passed in 0.04s \u4ece\u8f93\u51fa\u7684\u7ed3\u679c\u4e2d\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff1a test_one \u6d4b\u8bd5\u6210\u529f\uff0c\u7528 . \u8868\u793a\uff1b test_two \u6d4b\u8bd5\u5931\u8d25\uff0c\u7528 F \u8868\u793a\uff1b \u5e76\u4e14\u6211\u4eec\u6e05\u695a\u7684\u770b\u5230 test_two \u5931\u8d25\u5904\u7684\u4e2d\u95f4\u503c\u7684\u4fe1\u606f\uff1a where False = hasattr('hello', 'check') Warning \u6d4b\u8bd5\u7c7b\u8981\u7b26\u5408\u7279\u5b9a\u7684\u89c4\u5219\uff0cpytest \u624d\u80fd\u53d1\u73b0\u5b83\uff1a \u6d4b\u8bd5\u7c7b\u7684\u547d\u540d\u8981\u7b26\u5408 Test* \u89c4\u5219\uff1b \u6d4b\u8bd5\u7c7b\u4e2d\u4e0d\u80fd\u6709 __init__() \u65b9\u6cd5\uff0c\u5426\u5219 pytest \u65e0\u6cd5\u91c7\u96c6\u5230\u5176\u4e2d\u7684\u6d4b\u8bd5\u7528\u4f8b\uff1b PytestCollectionWarning: cannot collect test class 'TestClass' because it has a __init__ constructor. \u5728\u7c7b\u4e2d\u7ec4\u7ec7\u591a\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u7684\u597d\u5904\u4f53\u73b0\u4ee5\u4e0b\u51e0\u4e2a\u65b9\u9762\uff1a \u7ed3\u6784\u5316\u6d4b\u8bd5\u7684\u7ec4\u7ec7\uff1b \u4ec5\u5728\u6307\u5b9a\u7684\u7c7b\u4e2d\u5171\u4eab fixture \uff1b \u5e94\u7528\u5728\u7c7b\u4e0a\u7684 marker \u5c06\u9690\u5f0f\u7684\u5e94\u7528\u4e8e\u5176\u4e2d\u6240\u6709\u7684\u6d4b\u8bd5\u7528\u4f8b\u4e0a\uff1b \u9700\u8981\u6ce8\u610f\u7684\u4e00\u70b9\u662f\uff0c\u6d4b\u8bd5\u7c7b\u4e2d\u7684\u6bcf\u4e2a\u7528\u4f8b\u90fd\u62e5\u6709\u8be5\u7c7b\u7684\u552f\u4e00\u5b9e\u4f8b\u3002\u8fd9\u662f\u56e0\u4e3a\u5982\u679c\u8ba9\u6240\u6709\u6d4b\u8bd5\u7528\u4f8b\u5171\u4eab\u540c\u4e00\u4e2a\u7c7b\u5b9e\u4f8b\uff0c\u5c06\u4e0d\u5229\u4e8e\u6d4b\u8bd5\u7684\u9694\u79bb\u3002 # src/chapter-1/test_class_demo.py class TestClassDemoInstance: def test_one(self): assert 0 def test_two(self): assert 0 $ pipenv run pytest -q src/chapter-1/test_class_demo.py FF [100%] ====================================== FAILURES ====================================== ___________________________ TestClassDemoInstance.test_one ___________________________ self = <test_class_demo.TestClassDemoInstance object at 0x10ea69ee0> def test_one(self): > assert 0 E assert 0 src/chapter-1/test_class_demo.py:3: AssertionError ___________________________ TestClassDemoInstance.test_two ___________________________ self = <test_class_demo.TestClassDemoInstance object at 0x10ea5c7f0> def test_two(self): > assert 0 E assert 0 src/chapter-1/test_class_demo.py:6: AssertionError ============================== short test summary info =============================== FAILED src/chapter-1/test_class_demo.py::TestClassDemoInstance::test_one - assert 0 FAILED src/chapter-1/test_class_demo.py::TestClassDemoInstance::test_two - assert 0 2 failed in 0.05s \u53ef\u4ee5\u770b\u5230\uff0c\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u7684\u4e24\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u62e5\u6709\u4e0d\u540c\u7684\u7c7b\u5b9e\u4f8b\uff1a 0x10ea69ee0 \u548c 0x10ea5c7f0 \u3002 \u7533\u8bf7\u4e00\u4e2a\u552f\u4e00\u7684\u4e34\u65f6\u76ee\u5f55 # pytest \u63d0\u4f9b\u4e00\u4e9b\u5185\u7f6e\u7684 fixtures \uff0c\u7528\u4e8e\u8bf7\u6c42\u4e00\u4e9b\u7cfb\u7edf\u7684\u8d44\u6e90\u3002\u4f8b\u5982\uff0c\u4e00\u4e2a\u552f\u4e00\u7684\u4e34\u65f6\u76ee\u5f55\uff1a # src/chapter-1/test_tmpdir.py def test_tempdir(tmpdir): print(tmpdir) assert 0 \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u5728\u5f62\u53c2\u7684\u4f4d\u5b50\u5217\u51fa tempdir fixture\uff0cpytest \u4f1a\u5728\u6bcf\u4e2a\u7528\u4f8b\u6267\u884c\u4e4b\u524d\u521b\u5efa\u4e00\u4e2a\u552f\u4e00\u7684\u4e34\u65f6\u76ee\u5f55\u3002 \u73b0\u5728\uff0c\u6211\u4eec\u6765\u6267\u884c\u8fd9\u4e2a\u6d4b\u8bd5\u7528\u4f8b\uff1a $ pipenv run pytest -q src/chapter-1/test_tempdir.py F [100%] ====================================== FAILURES ====================================== ____________________________________ test_tempdir ____________________________________ tmpdir = local('/private/var/folders/7r/2gv2hwyx6bj_wz30cb9r9b5r0000gn/T/pytest-of-yaomeng/pytest-0/test_tempdir0') def test_tempdir(tmpdir): print(tmpdir) > assert 0 E assert 0 src/chapter-1/test_tempdir.py:3: AssertionError -------------------------------- Captured stdout call -------------------------------- /private/var/folders/7r/2gv2hwyx6bj_wz30cb9r9b5r0000gn/T/pytest-of-yaomeng/pytest-0/test_tempdir0 ============================== short test summary info =============================== FAILED src/chapter-1/test_tempdir.py::test_tempdir - assert 0 1 failed in 0.04s \u53ef\u4ee5\u4f7f\u7528\u5982\u4e0b\u547d\u4ee4\u67e5\u770b\u6240\u6709\u53ef\u7528\u7684 fixtures\uff0c\u5982\u679c\u60f3\u540c\u65f6\u67e5\u770b\u4ee5 _ \u5f00\u5934\u7684 fixtures\uff0c\u9700\u8981\u6dfb\u52a0 -v \u9009\u9879\uff1a $ pipenv run pytest -v --fixtures ================================ test session starts ================================= platform darwin -- Python 3.8.4, pytest-6.1.1, py-1.9.0, pluggy-0.13.1 -- /Users/yaomeng/.local/share/virtualenvs/pytest-chinese-doc-DA9roatD/bin/python cachedir: .pytest_cache rootdir: /Users/yaomeng/Private/projects/pytest-chinese-doc collected 7 items cache -- ../../../.local/share/virtualenvs/pytest-chinese-doc-DA9roatD/lib/python3.8/site-packages/_pytest/cacheprovider.py:473 Return a cache object that can persist state between testing sessions. cache.get(key, default) cache.set(key, value) Keys must be a ``/`` separated value, where the first part is usually the name of your plugin or application to avoid clashes with other cache users. Values can be any object handled by the json stdlib module. capsys -- ../../../.local/share/virtualenvs/pytest-chinese-doc-DA9roatD/lib/python3.8/site-packages/_pytest/capture.py:843 Enable text capturing of writes to ``sys.stdout`` and ``sys.stderr``. The captured output is made available via ``capsys.readouterr()`` method calls, which return a ``(out, err)`` namedtuple. ``out`` and ``err`` will be ``text`` objects. capsysbinary -- ../../../.local/share/virtualenvs/pytest-chinese-doc-DA9roatD/lib/python3.8/site-packages/_pytest/capture.py:860 Enable bytes capturing of writes to ``sys.stdout`` and ``sys.stderr``. The captured output is made available via ``capsysbinary.readouterr()`` method calls, which return a ``(out, err)`` namedtuple. ``out`` and ``err`` will be ``bytes`` objects. capfd -- ../../../.local/share/virtualenvs/pytest-chinese-doc-DA9roatD/lib/python3.8/site-packages/_pytest/capture.py:877 Enable text capturing of writes to file descriptors ``1`` and ``2``. The captured output is made available via ``capfd.readouterr()`` method calls, which return a ``(out, err)`` namedtuple. ``out`` and ``err`` will be ``text`` objects. capfdbinary -- ../../../.local/share/virtualenvs/pytest-chinese-doc-DA9roatD/lib/python3.8/site-packages/_pytest/capture.py:894 Enable bytes capturing of writes to file descriptors ``1`` and ``2``. The captured output is made available via ``capfd.readouterr()`` method calls, which return a ``(out, err)`` namedtuple. ``out`` and ``err`` will be ``byte`` objects. doctest_namespace [session scope] -- ../../../.local/share/virtualenvs/pytest-chinese-doc-DA9roatD/lib/python3.8/site-packages/_pytest/doctest.py:738 Fixture that returns a :py:class:`dict` that will be injected into the namespace of doctests. pytestconfig [session scope] -- ../../../.local/share/virtualenvs/pytest-chinese-doc-DA9roatD/lib/python3.8/site-packages/_pytest/fixtures.py:1398 Session-scoped fixture that returns the :class:`_pytest.config.Config` object. Example:: def test_foo(pytestconfig): if pytestconfig.getoption(\"verbose\") > 0: ... record_property -- ../../../.local/share/virtualenvs/pytest-chinese-doc-DA9roatD/lib/python3.8/site-packages/_pytest/junitxml.py:305 Add extra properties to the calling test. User properties become part of the test report and are available to the configured reporters, like JUnit XML. The fixture is callable with ``name, value``. The value is automatically XML-encoded. Example:: def test_function(record_property): record_property(\"example_key\", 1) record_xml_attribute -- ../../../.local/share/virtualenvs/pytest-chinese-doc-DA9roatD/lib/python3.8/site-packages/_pytest/junitxml.py:328 Add extra xml attributes to the tag for the calling test. The fixture is callable with ``name, value``. The value is automatically XML-encoded. record_testsuite_property [session scope] -- ../../../.local/share/virtualenvs/pytest-chinese-doc-DA9roatD/lib/python3.8/site-packages/_pytest/junitxml.py:366 Records a new ``<property>`` tag as child of the root ``<testsuite>``. This is suitable to writing global information regarding the entire test suite, and is compatible with ``xunit2`` JUnit family. This is a ``session``-scoped fixture which is called with ``(name, value)``. Example: .. code-block:: python def test_foo(record_testsuite_property): record_testsuite_property(\"ARCH\", \"PPC\") record_testsuite_property(\"STORAGE_TYPE\", \"CEPH\") ``name`` must be a string, ``value`` will be converted to a string and properly xml-escaped. caplog -- ../../../.local/share/virtualenvs/pytest-chinese-doc-DA9roatD/lib/python3.8/site-packages/_pytest/logging.py:467 Access and control log capturing. Captured logs are available through the following properties/methods:: * caplog.messages -> list of format-interpolated log messages * caplog.text -> string containing formatted log output * caplog.records -> list of logging.LogRecord instances * caplog.record_tuples -> list of (logger_name, level, message) tuples * caplog.clear() -> clear captured records and formatted log output string monkeypatch -- ../../../.local/share/virtualenvs/pytest-chinese-doc-DA9roatD/lib/python3.8/site-packages/_pytest/monkeypatch.py:29 The returned ``monkeypatch`` fixture provides these helper methods to modify objects, dictionaries or os.environ:: monkeypatch.setattr(obj, name, value, raising=True) monkeypatch.delattr(obj, name, raising=True) monkeypatch.setitem(mapping, name, value) monkeypatch.delitem(obj, name, raising=True) monkeypatch.setenv(name, value, prepend=False) monkeypatch.delenv(name, raising=True) monkeypatch.syspath_prepend(path) monkeypatch.chdir(path) All modifications will be undone after the requesting test function or fixture has finished. The ``raising`` parameter determines if a KeyError or AttributeError will be raised if the set/deletion operation has no target. recwarn -- ../../../.local/share/virtualenvs/pytest-chinese-doc-DA9roatD/lib/python3.8/site-packages/_pytest/recwarn.py:29 Return a :class:`WarningsRecorder` instance that records all warnings emitted by test functions. See http://docs.python.org/library/warnings.html for information on warning categories. tmpdir_factory [session scope] -- ../../../.local/share/virtualenvs/pytest-chinese-doc-DA9roatD/lib/python3.8/site-packages/_pytest/tmpdir.py:155 Return a :class:`_pytest.tmpdir.TempdirFactory` instance for the test session. tmp_path_factory [session scope] -- ../../../.local/share/virtualenvs/pytest-chinese-doc-DA9roatD/lib/python3.8/site-packages/_pytest/tmpdir.py:163 Return a :class:`_pytest.tmpdir.TempPathFactory` instance for the test session. tmpdir -- ../../../.local/share/virtualenvs/pytest-chinese-doc-DA9roatD/lib/python3.8/site-packages/_pytest/tmpdir.py:179 Return a temporary directory path object which is unique to each test function invocation, created as a sub directory of the base temporary directory. The returned object is a `py.path.local`_ path object. .. _`py.path.local`: https://py.readthedocs.io/en/latest/path.html tmp_path -- ../../../.local/share/virtualenvs/pytest-chinese-doc-DA9roatD/lib/python3.8/site-packages/_pytest/tmpdir.py:192 Return a temporary directory path object which is unique to each test function invocation, created as a sub directory of the base temporary directory. The returned object is a :class:`pathlib.Path` object. .. note:: in python < 3.6 this is a pathlib2.Path =============================== no tests ran in 0.05s ================================","title":"\u4e00\u3001\u5b89\u88c5\u548c\u5165\u95e8"},{"location":"zh-Hans-CN/%E4%B8%80%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E5%85%A5%E9%97%A8/#_1","text":"pytest \u662f\u4e00\u4e2a\u80fd\u591f\u7b80\u5316\u6d4b\u8bd5\u7cfb\u7edf\u6784\u5efa\u3001\u65b9\u4fbf\u6d4b\u8bd5\u89c4\u6a21\u6269\u5c55\u7684\u6846\u67b6\uff0c\u5b83\u8ba9\u6d4b\u8bd5\u53d8\u5f97\u66f4\u5177\u8868\u73b0\u529b\u548c\u53ef\u8bfb\u6027\u3002\u53ea\u9700\u8981\u51e0\u5206\u949f\u7684\u65f6\u95f4\uff0c\u4f60\u5c31\u53ef\u4ee5\u5f00\u59cb\u4e00\u4e2a\u7b80\u5355\u7684\u5355\u5143\u6d4b\u8bd5\u6216\u8005\u590d\u6742\u7684\u529f\u80fd\u6d4b\u8bd5\u3002","title":"\u5b89\u88c5\u548c\u5165\u95e8"},{"location":"zh-Hans-CN/%E4%B8%80%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E5%85%A5%E9%97%A8/#pytest","text":"\u5728\u547d\u4ee4\u884c\u6267\u884c\u4ee5\u4e0b\u547d\u4ee4\uff1a $ pip install pytest==6.1.1 \u68c0\u67e5\u7248\u672c\uff1a $ pytest --version pytest 6.1.1","title":"\u5b89\u88c5 pytest"},{"location":"zh-Hans-CN/%E4%B8%80%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E5%85%A5%E9%97%A8/#_2","text":"\u5b83\u53ea\u6709\u56db\u884c\u4ee3\u7801\uff1a # src/chapter-1/test_sample.py def func(x): return x + 1 def test_answer(): assert func(3) == 5 \u73b0\u5728\u5f00\u59cb\u6267\u884c\u8fd9\u4e2a\u6d4b\u8bd5\u7528\u4f8b\uff1a $ pipenv run pytest src/chapter-1/test_sample.py ================================ test session starts ================================= platform darwin -- Python 3.8.4, pytest-6.1.1, py-1.9.0, pluggy-0.13.1 rootdir: /Users/yaomeng/Private/projects/pytest-chinese-doc collected 1 item src/chapter-1/test_sample.py F [100%] ====================================== FAILURES ====================================== ____________________________________ test_answer _____________________________________ def test_answer(): > assert func(3) == 5 E assert 4 == 5 E + where 4 = func(3) src/chapter-1/test_sample.py:6: AssertionError ============================== short test summary info =============================== FAILED src/chapter-1/test_sample.py::test_answer - assert 4 == 5 ================================= 1 failed in 0.05s ================================== [100%] \u8868\u793a\u6267\u884c\u6240\u6709\u6d4b\u8bd5\u7528\u4f8b\u7684\u603b\u4f53\u8fdb\u5ea6\u3002\u56e0\u4e3a func(3) \u4e0d\u7b49\u4e8e 5 \uff0c\u6240\u4ee5\u6700\u540e pytest \u4f1a\u663e\u793a\u4e00\u4e2a\u8868\u793a\u6d4b\u8bd5\u5931\u8d25\u7684\u62a5\u544a\u3002 Note \u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u76f4\u63a5\u4f7f\u7528 assert \u6765\u9a8c\u8bc1\u6d4b\u8bd5\u7528\u4f8b\u4e2d\u7684\u9884\u671f\u7ed3\u679c\uff0c\u8fd9\u662f\u56e0\u4e3a pytest \u63d0\u4f9b\u4e86\u9ad8\u7ea7\u7684\u65ad\u8a00\u81ea\u7701\u529f\u80fd\uff0c\u53ef\u4ee5\u667a\u80fd\u7684\u4e3a\u6211\u4eec\u5c55\u793a\u5931\u8d25\u5904\u7684\u4e2d\u95f4\u4fe1\u606f\uff08 where 4 = func(3) \uff09\uff0c\u56e0\u6b64\u6211\u4eec\u5c31\u65e0\u9700\u4f7f\u7528 assertEqual \u3001 assertNotEqual \u4e4b\u7c7b\u7684\u65b9\u6cd5\u3002","title":"\u521b\u5efa\u4f60\u7684\u7b2c\u4e00\u4e2a\u6d4b\u8bd5\u7528\u4f8b"},{"location":"zh-Hans-CN/%E4%B8%80%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E5%85%A5%E9%97%A8/#_3","text":"pytest \u4f1a\u6267\u884c\u5f53\u524d\u53ca\u5176\u5b50\u6587\u4ef6\u5939\u4e2d\uff0c\u6240\u6709\u547d\u540d\u7b26\u5408 test_*.py \u6216\u8005 *_test.py \u89c4\u5219\u7684\u6587\u4ef6\u4e2d\u7684\u6240\u6709\u7684\u6d4b\u8bd5\u7528\u4f8b\uff1b","title":"\u6267\u884c\u591a\u4e2a\u6d4b\u8bd5\u7528\u4f8b"},{"location":"zh-Hans-CN/%E4%B8%80%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E5%85%A5%E9%97%A8/#_4","text":"\u4f7f\u7528 raises \u53ef\u4ee5\u9a8c\u8bc1\u67d0\u4e9b\u4ee3\u7801\u662f\u5426\u629b\u51fa\u4e00\u4e2a\u6307\u5b9a\u7684\u5f02\u5e38\uff1a # src/chapter-1/test_sysexit.py import pytest def f(): # \u8bf7\u6c42\u9000\u51fa\u89e3\u91ca\u5668 raise SystemExit(1) def test_mytest(): with pytest.raises(SystemExit): f() \u6267\u884c\u8fd9\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u65f6\uff0c\u52a0\u4e0a -q \u9009\u9879\u53ef\u4ee5\u7cbe\u7b80\u6d4b\u8bd5\u7ed3\u679c\u7684\u8f93\u51fa\uff1a $ pipenv run pytest src/chapter-1/test_sysexit.py ================================ test session starts ================================= platform darwin -- Python 3.8.4, pytest-6.1.1, py-1.9.0, pluggy-0.13.1 rootdir: /Users/yaomeng/Private/projects/pytest-chinese-doc collected 1 item src/chapter-1/test_sysexit.py . [100%] ================================= 1 passed in 0.01s ================================== Note \u4f7f\u7528 -q/--quiet \u547d\u4ee4\u884c\u6807\u8bb0\u53ef\u4ee5\u7b80\u5316\u6d4b\u8bd5\u7ed3\u679c\u8f93\u51fa\u3002","title":"\u89e6\u53d1\u4e00\u4e2a\u6307\u5b9a\u5f02\u5e38\u7684\u65ad\u8a00"},{"location":"zh-Hans-CN/%E4%B8%80%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E5%85%A5%E9%97%A8/#_5","text":"pytest \u53ef\u4ee5\u8ba9\u4f60\u5f88\u5bb9\u6613\u7684\u521b\u5efa\u4e00\u4e2a\u6d4b\u8bd5\u7c7b\u6765\u5305\u542b\u591a\u4e2a\u6d4b\u8bd5\u7528\u4f8b\uff1a # src/chapter-1/test_class.py class TestClass: def test_one(self): x = \"this\" assert \"h\" in x def test_two(self): x = \"hello\" assert hasattr(x, \"check\") \u6211\u4eec\u65e0\u9700\u8ba9\u6d4b\u8bd5\u7c7b\u7ee7\u627f\u81ea\u4efb\u4f55\u57fa\u7c7b\uff0c\u4f46\u662f\u8981\u786e\u4fdd\u7c7b\u540d\u7684\u524d\u7f00\u4e3a Test \uff0c\u5426\u5219\u5c06\u5ffd\u7565\u5176\u4e2d\u7684\u6d4b\u8bd5\u7528\u4f8b\u3002\u901a\u8fc7\u4f20\u5165\u6587\u4ef6\u8def\u5f84\u5c31\u53ef\u4ee5\u6267\u884c\u8fd9\u4e2a\u6d4b\u8bd5\u7c7b\uff1a $ pipenv run pytest -q src/chapter-1/test_class.py .F [100%] ====================================== FAILURES ====================================== _________________________________ TestClass.test_two _________________________________ self = <test_class.TestClass object at 0x1046f7df0> def test_two(self): x = \"hello\" > assert hasattr(x, \"check\") E AssertionError: assert False E + where False = hasattr('hello', 'check') src/chapter-1/test_class.py:8: AssertionError ============================== short test summary info =============================== FAILED src/chapter-1/test_class.py::TestClass::test_two - AssertionError: assert False 1 failed, 1 passed in 0.04s \u4ece\u8f93\u51fa\u7684\u7ed3\u679c\u4e2d\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff1a test_one \u6d4b\u8bd5\u6210\u529f\uff0c\u7528 . \u8868\u793a\uff1b test_two \u6d4b\u8bd5\u5931\u8d25\uff0c\u7528 F \u8868\u793a\uff1b \u5e76\u4e14\u6211\u4eec\u6e05\u695a\u7684\u770b\u5230 test_two \u5931\u8d25\u5904\u7684\u4e2d\u95f4\u503c\u7684\u4fe1\u606f\uff1a where False = hasattr('hello', 'check') Warning \u6d4b\u8bd5\u7c7b\u8981\u7b26\u5408\u7279\u5b9a\u7684\u89c4\u5219\uff0cpytest \u624d\u80fd\u53d1\u73b0\u5b83\uff1a \u6d4b\u8bd5\u7c7b\u7684\u547d\u540d\u8981\u7b26\u5408 Test* \u89c4\u5219\uff1b \u6d4b\u8bd5\u7c7b\u4e2d\u4e0d\u80fd\u6709 __init__() \u65b9\u6cd5\uff0c\u5426\u5219 pytest \u65e0\u6cd5\u91c7\u96c6\u5230\u5176\u4e2d\u7684\u6d4b\u8bd5\u7528\u4f8b\uff1b PytestCollectionWarning: cannot collect test class 'TestClass' because it has a __init__ constructor. \u5728\u7c7b\u4e2d\u7ec4\u7ec7\u591a\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u7684\u597d\u5904\u4f53\u73b0\u4ee5\u4e0b\u51e0\u4e2a\u65b9\u9762\uff1a \u7ed3\u6784\u5316\u6d4b\u8bd5\u7684\u7ec4\u7ec7\uff1b \u4ec5\u5728\u6307\u5b9a\u7684\u7c7b\u4e2d\u5171\u4eab fixture \uff1b \u5e94\u7528\u5728\u7c7b\u4e0a\u7684 marker \u5c06\u9690\u5f0f\u7684\u5e94\u7528\u4e8e\u5176\u4e2d\u6240\u6709\u7684\u6d4b\u8bd5\u7528\u4f8b\u4e0a\uff1b \u9700\u8981\u6ce8\u610f\u7684\u4e00\u70b9\u662f\uff0c\u6d4b\u8bd5\u7c7b\u4e2d\u7684\u6bcf\u4e2a\u7528\u4f8b\u90fd\u62e5\u6709\u8be5\u7c7b\u7684\u552f\u4e00\u5b9e\u4f8b\u3002\u8fd9\u662f\u56e0\u4e3a\u5982\u679c\u8ba9\u6240\u6709\u6d4b\u8bd5\u7528\u4f8b\u5171\u4eab\u540c\u4e00\u4e2a\u7c7b\u5b9e\u4f8b\uff0c\u5c06\u4e0d\u5229\u4e8e\u6d4b\u8bd5\u7684\u9694\u79bb\u3002 # src/chapter-1/test_class_demo.py class TestClassDemoInstance: def test_one(self): assert 0 def test_two(self): assert 0 $ pipenv run pytest -q src/chapter-1/test_class_demo.py FF [100%] ====================================== FAILURES ====================================== ___________________________ TestClassDemoInstance.test_one ___________________________ self = <test_class_demo.TestClassDemoInstance object at 0x10ea69ee0> def test_one(self): > assert 0 E assert 0 src/chapter-1/test_class_demo.py:3: AssertionError ___________________________ TestClassDemoInstance.test_two ___________________________ self = <test_class_demo.TestClassDemoInstance object at 0x10ea5c7f0> def test_two(self): > assert 0 E assert 0 src/chapter-1/test_class_demo.py:6: AssertionError ============================== short test summary info =============================== FAILED src/chapter-1/test_class_demo.py::TestClassDemoInstance::test_one - assert 0 FAILED src/chapter-1/test_class_demo.py::TestClassDemoInstance::test_two - assert 0 2 failed in 0.05s \u53ef\u4ee5\u770b\u5230\uff0c\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u7684\u4e24\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u62e5\u6709\u4e0d\u540c\u7684\u7c7b\u5b9e\u4f8b\uff1a 0x10ea69ee0 \u548c 0x10ea5c7f0 \u3002","title":"\u5728\u4e00\u4e2a\u7c7b\u4e2d\u7ec4\u7ec7\u591a\u4e2a\u6d4b\u8bd5\u7528\u4f8b"},{"location":"zh-Hans-CN/%E4%B8%80%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E5%85%A5%E9%97%A8/#_6","text":"pytest \u63d0\u4f9b\u4e00\u4e9b\u5185\u7f6e\u7684 fixtures \uff0c\u7528\u4e8e\u8bf7\u6c42\u4e00\u4e9b\u7cfb\u7edf\u7684\u8d44\u6e90\u3002\u4f8b\u5982\uff0c\u4e00\u4e2a\u552f\u4e00\u7684\u4e34\u65f6\u76ee\u5f55\uff1a # src/chapter-1/test_tmpdir.py def test_tempdir(tmpdir): print(tmpdir) assert 0 \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u5728\u5f62\u53c2\u7684\u4f4d\u5b50\u5217\u51fa tempdir fixture\uff0cpytest \u4f1a\u5728\u6bcf\u4e2a\u7528\u4f8b\u6267\u884c\u4e4b\u524d\u521b\u5efa\u4e00\u4e2a\u552f\u4e00\u7684\u4e34\u65f6\u76ee\u5f55\u3002 \u73b0\u5728\uff0c\u6211\u4eec\u6765\u6267\u884c\u8fd9\u4e2a\u6d4b\u8bd5\u7528\u4f8b\uff1a $ pipenv run pytest -q src/chapter-1/test_tempdir.py F [100%] ====================================== FAILURES ====================================== ____________________________________ test_tempdir ____________________________________ tmpdir = local('/private/var/folders/7r/2gv2hwyx6bj_wz30cb9r9b5r0000gn/T/pytest-of-yaomeng/pytest-0/test_tempdir0') def test_tempdir(tmpdir): print(tmpdir) > assert 0 E assert 0 src/chapter-1/test_tempdir.py:3: AssertionError -------------------------------- Captured stdout call -------------------------------- /private/var/folders/7r/2gv2hwyx6bj_wz30cb9r9b5r0000gn/T/pytest-of-yaomeng/pytest-0/test_tempdir0 ============================== short test summary info =============================== FAILED src/chapter-1/test_tempdir.py::test_tempdir - assert 0 1 failed in 0.04s \u53ef\u4ee5\u4f7f\u7528\u5982\u4e0b\u547d\u4ee4\u67e5\u770b\u6240\u6709\u53ef\u7528\u7684 fixtures\uff0c\u5982\u679c\u60f3\u540c\u65f6\u67e5\u770b\u4ee5 _ \u5f00\u5934\u7684 fixtures\uff0c\u9700\u8981\u6dfb\u52a0 -v \u9009\u9879\uff1a $ pipenv run pytest -v --fixtures ================================ test session starts ================================= platform darwin -- Python 3.8.4, pytest-6.1.1, py-1.9.0, pluggy-0.13.1 -- /Users/yaomeng/.local/share/virtualenvs/pytest-chinese-doc-DA9roatD/bin/python cachedir: .pytest_cache rootdir: /Users/yaomeng/Private/projects/pytest-chinese-doc collected 7 items cache -- ../../../.local/share/virtualenvs/pytest-chinese-doc-DA9roatD/lib/python3.8/site-packages/_pytest/cacheprovider.py:473 Return a cache object that can persist state between testing sessions. cache.get(key, default) cache.set(key, value) Keys must be a ``/`` separated value, where the first part is usually the name of your plugin or application to avoid clashes with other cache users. Values can be any object handled by the json stdlib module. capsys -- ../../../.local/share/virtualenvs/pytest-chinese-doc-DA9roatD/lib/python3.8/site-packages/_pytest/capture.py:843 Enable text capturing of writes to ``sys.stdout`` and ``sys.stderr``. The captured output is made available via ``capsys.readouterr()`` method calls, which return a ``(out, err)`` namedtuple. ``out`` and ``err`` will be ``text`` objects. capsysbinary -- ../../../.local/share/virtualenvs/pytest-chinese-doc-DA9roatD/lib/python3.8/site-packages/_pytest/capture.py:860 Enable bytes capturing of writes to ``sys.stdout`` and ``sys.stderr``. The captured output is made available via ``capsysbinary.readouterr()`` method calls, which return a ``(out, err)`` namedtuple. ``out`` and ``err`` will be ``bytes`` objects. capfd -- ../../../.local/share/virtualenvs/pytest-chinese-doc-DA9roatD/lib/python3.8/site-packages/_pytest/capture.py:877 Enable text capturing of writes to file descriptors ``1`` and ``2``. The captured output is made available via ``capfd.readouterr()`` method calls, which return a ``(out, err)`` namedtuple. ``out`` and ``err`` will be ``text`` objects. capfdbinary -- ../../../.local/share/virtualenvs/pytest-chinese-doc-DA9roatD/lib/python3.8/site-packages/_pytest/capture.py:894 Enable bytes capturing of writes to file descriptors ``1`` and ``2``. The captured output is made available via ``capfd.readouterr()`` method calls, which return a ``(out, err)`` namedtuple. ``out`` and ``err`` will be ``byte`` objects. doctest_namespace [session scope] -- ../../../.local/share/virtualenvs/pytest-chinese-doc-DA9roatD/lib/python3.8/site-packages/_pytest/doctest.py:738 Fixture that returns a :py:class:`dict` that will be injected into the namespace of doctests. pytestconfig [session scope] -- ../../../.local/share/virtualenvs/pytest-chinese-doc-DA9roatD/lib/python3.8/site-packages/_pytest/fixtures.py:1398 Session-scoped fixture that returns the :class:`_pytest.config.Config` object. Example:: def test_foo(pytestconfig): if pytestconfig.getoption(\"verbose\") > 0: ... record_property -- ../../../.local/share/virtualenvs/pytest-chinese-doc-DA9roatD/lib/python3.8/site-packages/_pytest/junitxml.py:305 Add extra properties to the calling test. User properties become part of the test report and are available to the configured reporters, like JUnit XML. The fixture is callable with ``name, value``. The value is automatically XML-encoded. Example:: def test_function(record_property): record_property(\"example_key\", 1) record_xml_attribute -- ../../../.local/share/virtualenvs/pytest-chinese-doc-DA9roatD/lib/python3.8/site-packages/_pytest/junitxml.py:328 Add extra xml attributes to the tag for the calling test. The fixture is callable with ``name, value``. The value is automatically XML-encoded. record_testsuite_property [session scope] -- ../../../.local/share/virtualenvs/pytest-chinese-doc-DA9roatD/lib/python3.8/site-packages/_pytest/junitxml.py:366 Records a new ``<property>`` tag as child of the root ``<testsuite>``. This is suitable to writing global information regarding the entire test suite, and is compatible with ``xunit2`` JUnit family. This is a ``session``-scoped fixture which is called with ``(name, value)``. Example: .. code-block:: python def test_foo(record_testsuite_property): record_testsuite_property(\"ARCH\", \"PPC\") record_testsuite_property(\"STORAGE_TYPE\", \"CEPH\") ``name`` must be a string, ``value`` will be converted to a string and properly xml-escaped. caplog -- ../../../.local/share/virtualenvs/pytest-chinese-doc-DA9roatD/lib/python3.8/site-packages/_pytest/logging.py:467 Access and control log capturing. Captured logs are available through the following properties/methods:: * caplog.messages -> list of format-interpolated log messages * caplog.text -> string containing formatted log output * caplog.records -> list of logging.LogRecord instances * caplog.record_tuples -> list of (logger_name, level, message) tuples * caplog.clear() -> clear captured records and formatted log output string monkeypatch -- ../../../.local/share/virtualenvs/pytest-chinese-doc-DA9roatD/lib/python3.8/site-packages/_pytest/monkeypatch.py:29 The returned ``monkeypatch`` fixture provides these helper methods to modify objects, dictionaries or os.environ:: monkeypatch.setattr(obj, name, value, raising=True) monkeypatch.delattr(obj, name, raising=True) monkeypatch.setitem(mapping, name, value) monkeypatch.delitem(obj, name, raising=True) monkeypatch.setenv(name, value, prepend=False) monkeypatch.delenv(name, raising=True) monkeypatch.syspath_prepend(path) monkeypatch.chdir(path) All modifications will be undone after the requesting test function or fixture has finished. The ``raising`` parameter determines if a KeyError or AttributeError will be raised if the set/deletion operation has no target. recwarn -- ../../../.local/share/virtualenvs/pytest-chinese-doc-DA9roatD/lib/python3.8/site-packages/_pytest/recwarn.py:29 Return a :class:`WarningsRecorder` instance that records all warnings emitted by test functions. See http://docs.python.org/library/warnings.html for information on warning categories. tmpdir_factory [session scope] -- ../../../.local/share/virtualenvs/pytest-chinese-doc-DA9roatD/lib/python3.8/site-packages/_pytest/tmpdir.py:155 Return a :class:`_pytest.tmpdir.TempdirFactory` instance for the test session. tmp_path_factory [session scope] -- ../../../.local/share/virtualenvs/pytest-chinese-doc-DA9roatD/lib/python3.8/site-packages/_pytest/tmpdir.py:163 Return a :class:`_pytest.tmpdir.TempPathFactory` instance for the test session. tmpdir -- ../../../.local/share/virtualenvs/pytest-chinese-doc-DA9roatD/lib/python3.8/site-packages/_pytest/tmpdir.py:179 Return a temporary directory path object which is unique to each test function invocation, created as a sub directory of the base temporary directory. The returned object is a `py.path.local`_ path object. .. _`py.path.local`: https://py.readthedocs.io/en/latest/path.html tmp_path -- ../../../.local/share/virtualenvs/pytest-chinese-doc-DA9roatD/lib/python3.8/site-packages/_pytest/tmpdir.py:192 Return a temporary directory path object which is unique to each test function invocation, created as a sub directory of the base temporary directory. The returned object is a :class:`pathlib.Path` object. .. note:: in python < 3.6 this is a pathlib2.Path =============================== no tests ran in 0.05s ================================","title":"\u7533\u8bf7\u4e00\u4e2a\u552f\u4e00\u7684\u4e34\u65f6\u76ee\u5f55"},{"location":"zh-Hans-CN/%E4%B8%89%E3%80%81%E7%BC%96%E5%86%99%E6%96%AD%E8%A8%80/","text":"\u7f16\u5199\u65ad\u8a00 # \u4f7f\u7528 assert \u7f16\u5199\u65ad\u8a00 # pytest \u5141\u8bb8\u4f60\u4f7f\u7528 python \u6807\u51c6\u7684 assert \u8868\u8fbe\u5f0f\u5199\u65ad\u8a00\uff1b \u4f8b\u5982\uff1a # src/chapter-3/test_assert1.py def func(x): return x + 1 def test_function(): assert func(2) == 4 \u5982\u679c\u8fd9\u4e2a\u65ad\u8a00\u5931\u8d25\uff0c\u4f60\u4f1a\u770b\u5230 func(2) \u5b9e\u9645\u7684\u8fd4\u56de\u503c + where 3 = func(2) \uff1a $ pipenv run pytest -q src/chapter-3/test_assert1.py F [100%] ====================================== FAILURES ====================================== ___________________________________ test_function ____________________________________ def test_function(): > assert func(2) == 4 E assert 3 == 4 E + where 3 = func(2) src/chapter-3/test_assert1.py:6: AssertionError ============================== short test summary info =============================== FAILED src/chapter-3/test_assert1.py::test_function - assert 3 == 4 1 failed in 0.15s pytest \u652f\u6301\u663e\u793a\u5e38\u89c1\u7684 python \u5b50\u8868\u8fbe\u5f0f\u7684\u503c\uff0c\u5305\u62ec\uff1a\u8c03\u7528\u3001\u5c5e\u6027\u3001\u6bd4\u8f83\u3001\u4e8c\u8fdb\u5236\u548c\u4e00\u5143\u8fd0\u7b97\u7b26\u7b49\uff0c\u8fd9\u5141\u8bb8\u4f60\u5728\u6ca1\u6709\u6a21\u7248\u4ee3\u7801\u53c2\u8003\u7684\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u4f7f\u7528\u7684 python \u7684\u6570\u636e\u7ed3\u6784\uff0c\u800c\u65e0\u987b\u62c5\u5fc3\u81ea\u7701\u4e22\u5931\u7684\u95ee\u9898\u3002 \u540c\u65f6\uff0c\u4f60\u4e5f\u53ef\u4ee5\u4e3a\u65ad\u8a00\u6307\u5b9a\u4e86\u4e00\u6761\u8bf4\u660e\u4fe1\u606f\uff0c\u7528\u4e8e\u5931\u8d25\u65f6\u7684\u60c5\u51b5\u8bf4\u660e\uff1a assert a % 2 == 0, \"value was odd, should be even\" \u7f16\u5199\u89e6\u53d1\u671f\u671b\u5f02\u5e38\u7684\u65ad\u8a00 # \u4f60\u53ef\u4ee5\u4f7f\u7528 pytest.raises() \u4f5c\u4e3a\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\uff0c\u6765\u7f16\u5199\u4e00\u4e2a\u89e6\u53d1\u671f\u671b\u5f02\u5e38\u7684\u65ad\u8a00\u3002 \u4f8b\u5982\uff0c\u6211\u4eec\u6709\u5982\u4e0b\u6d4b\u8bd5\u7528\u4f8b\uff1a import pytest def myfunc(): raise ValueError(\"Exception 123 raised\") def test_match(): with pytest.raises(ValueError): myfunc() \u5f53\u7528\u4f8b\u6ca1\u6709\u8fd4\u56de ValueError \u6216\u8005\u6ca1\u6709\u5f02\u5e38\u8fd4\u56de\u65f6\uff0c\u65ad\u8a00\u5224\u65ad\u5931\u8d25\uff1b \u5982\u679c\u4f60\u5e0c\u671b\u540c\u65f6\u8bbf\u95ee\u5f02\u5e38\u7684\u5c5e\u6027\uff0c\u53ef\u4ee5\u8fd9\u6837\uff1a import pytest def myfunc(): raise ValueError(\"Exception 123 raised\") def test_match(): with pytest.raises(ValueError) as excinfo: myfunc() assert '123' in str(excinfo.value) \u5176\u4e2d\uff0c excinfo \u662f ExceptionInfo \u7684\u4e00\u4e2a\u5b9e\u4f8b\uff0c\u5b83\u5c01\u88c5\u4e86\u5f02\u5e38\u7684\u4fe1\u606f\uff1b\u5e38\u7528\u7684\u5c5e\u6027\u5305\u62ec\uff1a .type \u3001 .value \u548c .traceback \uff1b Note \u5728\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u7684\u4f5c\u7528\u57df\u4e2d\uff0craises\u4ee3\u7801\u5fc5\u987b\u662f\u6700\u540e\u4e00\u884c\uff0c\u5426\u5219\uff0c\u5176\u540e\u9762\u7684\u4ee3\u7801\u5c06\u4e0d\u4f1a\u6267\u884c\uff1b\u6240\u4ee5\uff0c\u5982\u679c\u4e0a\u8ff0\u4f8b\u5b50\u6539\u6210\uff1a def test_match(): with pytest.raises(ValueError) as excinfo: myfunc() assert '456' in str(excinfo.value) \u5219\u6d4b\u8bd5\u5c06\u6c38\u8fdc\u6210\u529f\uff0c\u56e0\u4e3a assert '456' in str(excinfo.value) \u5e76\u4e0d\u4f1a\u6267\u884c\uff1b \u6211\u4eec\u4e5f\u53ef\u4ee5\u7ed9 pytest.raises() \u4f20\u9012\u4e00\u4e2a\u5173\u952e\u5b57\u53c2\u6570 match \uff0c\u6765\u6d4b\u8bd5\u5f02\u5e38\u7684\u5b57\u7b26\u4e32\u8868\u793a str(excinfo.value) \u662f\u5426\u7b26\u5408\u7ed9\u5b9a\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\uff08\u548c unittest \u4e2d\u7684 TestCase.assertRaisesRegexp \u65b9\u6cd5\u7c7b\u4f3c\uff09\uff1a import pytest def myfunc(): raise ValueError(\"Exception 123 raised\") def test_match(): with pytest.raises((ValueError, RuntimeError), match=r'.* 123 .*'): myfunc() pytest \u5b9e\u9645\u8c03\u7528\u7684\u662f re.search() \u65b9\u6cd5\u6765\u505a\u4e0a\u8ff0\u68c0\u67e5\u3002\u5e76\u4e14\uff0c pytest.raises() \u4e5f\u652f\u6301\u68c0\u67e5\u591a\u4e2a\u671f\u671b\u5f02\u5e38\uff08\u4ee5\u5143\u7ec4\u7684\u5f62\u5f0f\u4f20\u9012\u53c2\u6570\uff09\uff0c\u6211\u4eec\u53ea\u9700\u8981\u89e6\u53d1\u5176\u4e2d\u4efb\u610f\u4e00\u4e2a\u3002 pytest.raises \u8fd8\u6709\u53e6\u5916\u7684\u4e00\u79cd\u4f7f\u7528\u5f62\u5f0f\u3002 \u9996\u5148\uff0c\u6211\u4eec\u6765\u770b\u4e00\u4e0b\u5b83\u5728\u6e90\u7801\u4e2d\u7684\u5b9a\u4e49\uff1a # _pytest/python_api.py def raises( # noqa: F811 expected_exception: Union[\"Type[_E]\", Tuple[\"Type[_E]\", ...]], *args: Any, **kwargs: Any ) -> Union[\"RaisesContext[_E]\", _pytest._code.ExceptionInfo[_E]]: \u5b83\u63a5\u6536\u4e00\u4e2a\u4f4d\u7f6e\u53c2\u6570 expected_exception \uff0c\u4e00\u7ec4\u53ef\u53d8\u53c2\u6570 args \uff0c\u4e00\u7ec4\u5173\u952e\u5b57\u53c2\u6570 kwargs \uff1b \u63a5\u7740\u770b\u65b9\u6cd5\u7684\u4e3b\u4f53\u5185\u5bb9\uff1a # _pytest/python_api.py if isinstance(expected_exception, type): excepted_exceptions = (expected_exception,) # type: Tuple[Type[_E], ...] else: excepted_exceptions = expected_exception for exc in excepted_exceptions: if not isinstance(exc, type) or not issubclass(exc, BaseException): # type: ignore[unreachable] msg = \"expected exception must be a BaseException type, not {}\" # type: ignore[unreachable] not_a = exc.__name__ if isinstance(exc, type) else type(exc).__name__ raise TypeError(msg.format(not_a)) message = \"DID NOT RAISE {}\".format(expected_exception) if not args: match = kwargs.pop(\"match\", None) # type: Optional[Union[str, Pattern[str]]] if kwargs: msg = \"Unexpected keyword arguments passed to pytest.raises: \" msg += \", \".join(sorted(kwargs)) msg += \"\\nUse context-manager form instead?\" raise TypeError(msg) return RaisesContext(expected_exception, message, match) else: func = args[0] if not callable(func): raise TypeError( \"{!r} object (type: {}) must be callable\".format(func, type(func)) ) try: func(*args[1:], **kwargs) except expected_exception as e: # We just caught the exception - there is a traceback. assert e.__traceback__ is not None return _pytest._code.ExceptionInfo.from_exc_info( (type(e), e, e.__traceback__) ) fail(message) \u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c\u5982\u679c\u6ca1\u6709\u4f20\u5165\u53ef\u53d8\u53c2\u6570 args \uff0c\u90a3\u4e48\u5173\u952e\u5b57\u53c2\u6570 kwargs \u53ea\u80fd\u5305\u542b match \u5173\u952e\u5b57\uff0c\u5426\u5219\u4f1a\u4e0a\u62a5 TypeError \u5f02\u5e38\u3002 match = kwargs.pop(\"match\", None) # type: Optional[Union[str, Pattern[str]]] if kwargs: msg = \"Unexpected keyword arguments passed to pytest.raises: \" msg += \", \".join(sorted(kwargs)) msg += \"\\nUse context-manager form instead?\" raise TypeError(msg) \u5982\u679c\u4f20\u5165\u53ef\u53d8\u53c2\u6570 args \uff0c\u90a3\u4e48\u5b83\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u5fc5\u987b\u662f\u4e00\u4e2a\u53ef\u8c03\u7528\u7684\u5bf9\u8c61\uff0c\u5426\u5219\u4f1a\u62a5 TypeError \u5f02\u5e38\uff1b \u540c\u65f6\uff0c\u5b83\u4f1a\u628a\u5269\u4f59\u7684 args \u53c2\u6570\u548c\u6240\u6709 kwargs \u53c2\u6570\u4f20\u9012\u7ed9\u8fd9\u4e2a\u53ef\u8c03\u7528\u5bf9\u8c61\uff0c\u7136\u540e\u68c0\u67e5\u8fd9\u4e2a\u5bf9\u8c61\u6267\u884c\u4e4b\u540e\u662f\u5426\u89e6\u53d1\u6307\u5b9a\u5f02\u5e38\u3002 func = args[0] if not callable(func): raise TypeError( \"{!r} object (type: {}) must be callable\".format(func, type(func)) ) try: func(*args[1:], **kwargs) except expected_exception as e: ... \u6240\u4ee5\u6211\u4eec\u6709\u4e86\u4e00\u79cd\u65b0\u7684\u5199\u6cd5\uff1a def f(): raise ValueError(\"123\") pytest.raises(ValueError, f) \u4e5f\u53ef\u4ee5\u4f20\u5165\u4e00\u4e2a lambda \u8868\u8fbe\u5f0f\uff1a pytest.raises(ZeroDivisionError, lambda x: 1/x, 0) # \u6216\u8005 pytest.raises(ZeroDivisionError, lambda x: 1/x, x=0) \u8fd9\u4e2a\u65f6\u5019\u5982\u679c\u4f60\u518d\u4f20\u9012 match \u53c2\u6570\uff0c\u662f\u4e0d\u751f\u6548\u7684\uff0c\u56e0\u4e3a\u5b83\u53ea\u6709\u5728 if not args: \u7684\u65f6\u5019\u751f\u6548\uff1b pytest.mark.xfail() \u4e5f\u53ef\u4ee5\u63a5\u6536\u4e00\u4e2a raises \u53c2\u6570\uff0c\u6765\u5224\u65ad\u7528\u4f8b\u662f\u5426\u56e0\u4e3a\u4e00\u4e2a\u5177\u4f53\u7684\u5f02\u5e38\u800c\u5bfc\u81f4\u5931\u8d25\uff1a @pytest.mark.xfail(raises=IndexError) def test_f(): f() \u5982\u679c f() \u89e6\u53d1\u4e00\u4e2a IndexError \u5f02\u5e38\uff0c\u5219\u7528\u4f8b\u6807\u8bb0\u4e3a xfailed \uff1b\u5982\u679c\u6ca1\u6709\uff0c\u5219\u6b63\u5e38\u6267\u884c f() \uff1b Note \u5982\u679c test_f \u6d4b\u8bd5\u6210\u529f\uff0c\u7528\u4f8b\u7684\u7ed3\u679c\u662f xpassed \uff0c\u800c\u4e0d\u662f passed \uff1b pytest.raises \u9002\u7528\u4e8e\u68c0\u67e5\u7531\u4ee3\u7801\u6545\u610f\u5f15\u53d1\u7684\u5f02\u5e38\uff1b\u800c @pytest.mark.xfail() \u66f4\u9002\u5408\u7528\u4e8e\u8bb0\u5f55\u4e00\u4e9b\u672a\u4fee\u590d\u7684 Bug\uff1b \u7f16\u5199\u89e6\u53d1\u671f\u671b\u544a\u8b66\u7684\u65ad\u8a00 # \u6211\u4eec\u4e5f\u53ef\u4ee5\u5229\u7528 pytest.warns \u6765\u7f16\u5199\u89e6\u53d1\u671f\u671b\u544a\u8b66\u7684\u65ad\u8a00\uff0c\u5b83\u7684\u7528\u6cd5\u548c\u4e0a\u9762\u7684 pytest.raises \u975e\u5e38\u76f8\u4f3c\u3002 \u7279\u6b8a\u6570\u636e\u7ed3\u6784\u6bd4\u8f83\u65f6\u7684\u4f18\u5316 # \u6211\u4eec\u6765\u770b\u8fd9\u4e2a\u4e0b\u9762\u8fd9\u4e2a\u6d4b\u8bd5\u7528\u4f8b\uff1a # src/chapter-3/test_special_compare.py def test_set_comparison(): set1 = set('1308') set2 = set('8035') assert set1 == set2 def test_long_str_comparison(): str1 = 'show me codes' str2 = 'show me money' assert str1 == str2 def test_dict_comparison(): dict1 = { 'x': 1, 'y': 2, } dict2 = { 'x': 1, 'y': 1, } assert dict1 == dict2 \u6211\u4eec\u6bd4\u8f83\u4e86\u4e09\u79cd\u6570\u636e\u7ed3\u6784\uff1a\u96c6\u5408\u3001\u5b57\u7b26\u4e32\u548c\u5b57\u5178\uff0c\u4e0b\u9762\u6211\u4eec\u6765\u6267\u884c\u6d4b\u8bd5\uff1a $ pipenv run pytest -q src/chapter-3/test_special_compare.py FFF [100%] ====================================== FAILURES ====================================== ________________________________ test_set_comparison _________________________________ def test_set_comparison(): set1 = set(\"1308\") set2 = set(\"8035\") > assert set1 == set2 E AssertionError: assert {'0', '1', '3', '8'} == {'0', '3', '5', '8'} E Extra items in the left set: E '1' E Extra items in the right set: E '5' E Full diff: E - {'8', '3', '5', '0'} E + {'3', '8', '1', '0'} src/chapter-3/test_special_compare.py:4: AssertionError ______________________________ test_long_str_comparison ______________________________ def test_long_str_comparison(): str1 = \"show me codes\" str2 = \"show me money\" > assert str1 == str2 E AssertionError: assert 'show me codes' == 'show me money' E - show me money E ? ^ ^ ^ E + show me codes E ? ^ ^ ^ src/chapter-3/test_special_compare.py:10: AssertionError ________________________________ test_dict_comparison ________________________________ def test_dict_comparison(): dict1 = { \"x\": 1, \"y\": 2, } dict2 = { \"x\": 1, \"y\": 1, } > assert dict1 == dict2 E AssertionError: assert {'x': 1, 'y': 2} == {'x': 1, 'y': 1} E Omitting 1 identical items, use -vv to show E Differing items: E {'y': 2} != {'y': 1} E Full diff: E - {'x': 1, 'y': 1} E ? ^ E + {'x': 1, 'y': 2}... E E ...Full output truncated (2 lines hidden), use '-vv' to show src/chapter-3/test_special_compare.py:22: AssertionError ============================== short test summary info =============================== FAILED src/chapter-3/test_special_compare.py::test_set_comparison - AssertionError:... FAILED src/chapter-3/test_special_compare.py::test_long_str_comparison - AssertionE... FAILED src/chapter-3/test_special_compare.py::test_dict_comparison - AssertionError... 3 failed in 0.13s \u9488\u5bf9\u4e00\u4e9b\u7279\u6b8a\u7684\u6570\u636e\u7ed3\u6784\u95f4\u7684\u6bd4\u8f83\uff0cpytest \u5bf9\u7ed3\u679c\u7684\u663e\u793a\u505a\u4e86\u4e00\u4e9b\u4f18\u5316\uff1a \u96c6\u5408\u3001\u5217\u8868\u7b49\uff1a\u6807\u8bb0\u51fa\u7b2c\u4e00\u4e2a\u4e0d\u540c\u7684\u5143\u7d20\uff1b \u5b57\u7b26\u4e32\uff1a\u6807\u8bb0\u51fa\u4e0d\u540c\u7684\u90e8\u5206\uff1b \u5b57\u5178\uff1a\u6807\u8bb0\u51fa\u4e0d\u540c\u7684\u6761\u76ee\uff1b \u4e3a\u5931\u8d25\u65ad\u8a00\u6dfb\u52a0\u81ea\u5b9a\u4e49\u7684\u8bf4\u660e # \u6211\u4eec\u6765\u770b\u4e0b\u9762\u8fd9\u4e2a\u6d4b\u8bd5\u7528\u4f8b\uff1a # src/chapter-3/test_foo_compare.py class Foo: def __init__(self, val): self.val = val def __eq__(self, other): return self.val == other.val def test_foo_compare(): f1 = Foo(1) f2 = Foo(2) assert f1 == f2 \u6211\u4eec\u5b9a\u4e49\u4e86\u4e00\u4e2a Foo \u5bf9\u8c61\uff0c\u4e5f\u590d\u5199\u4e86\u5b83\u7684 __eq__() \u65b9\u6cd5\uff0c\u4f46\u5f53\u6211\u4eec\u6267\u884c\u8fd9\u4e2a\u7528\u4f8b\u65f6\uff1a $ pipenv run pytest -q src/chapter-3/test_foo_compare.py F [100%] ====================================== FAILURES ====================================== __________________________________ test_foo_compare __________________________________ def test_foo_compare(): f1 = Foo(1) f2 = Foo(2) > assert f1 == f2 E assert <test_foo_compare.Foo object at 0x1076bf250> == <test_foo_compare.Foo object at 0x1076bf6a0> src/chapter-3/test_foo_compare.py:12: AssertionError ============================== short test summary info =============================== FAILED src/chapter-3/test_foo_compare.py::test_foo_compare - assert <test_foo_compa... 1 failed in 0.12s \u6211\u4eec\u5e76\u4e0d\u80fd\u76f4\u89c2\u7684\u4ece\u4e2d\u770b\u51fa\u6765\u5931\u8d25\u7684\u539f\u56e0\uff1a assert <test_foo_compare.Foo object at 0x1076bf250> == <test_foo_compare.Foo object at 0x1076bf6a0> \u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u6709\u4e24\u79cd\u4f18\u5316\u7684\u65b9\u6cd5\uff1a \u590d\u5199 Foo \u7684 __repr__() \u65b9\u6cd5\uff1a def __repr__(self): return str(self.val) \u6211\u4eec\u518d\u6267\u884c\u7528\u4f8b\uff1a $ pipenv run pytest -q src/chapter-3/test_foo_compare.py F [100%] ====================================== FAILURES ====================================== __________________________________ test_foo_compare __________________________________ def test_foo_compare(): f1 = Foo(1) f2 = Foo(2) > assert f1 == f2 E assert 1 == 2 src/chapter-3/test_foo_compare.py:15: AssertionError ============================== short test summary info =============================== FAILED src/chapter-3/test_foo_compare.py::test_foo_compare - assert 1 == 2 \u8fd9\u65f6\uff0c\u6211\u4eec\u80fd\u770b\u5230\u5931\u8d25\u7684\u539f\u56e0\u662f\u56e0\u4e3a 1 == 2 \u4e0d\u6210\u7acb\uff1b Note \u81f3\u4e8e__str__()\u548c__repr__()\u7684\u533a\u522b\uff0c\u53ef\u4ee5\u53c2\u8003StackFlow\u4e0a\u7684\u8fd9\u4e2a\u95ee\u9898\u4e2d\u7684\u56de\u7b54\uff1a https://stackoverflow.com/questions/1436703/difference-between-str-and-repr \u4f7f\u7528 pytest_assertrepr_compare \u8fd9\u4e2a\u94a9\u5b50\u65b9\u6cd5\u6dfb\u52a0\u81ea\u5b9a\u4e49\u7684\u5931\u8d25\u8bf4\u660e\uff1a # src/chapter-3/conftest.py from test_foo_compare import Foo def pytest_assertrepr_compare(op, left, right): if isinstance(left, Foo) and isinstance(right, Foo) and op == \"==\": return [ \"\u6bd4\u8f83\u4e24\u4e2aFoo\u5b9e\u4f8b:\", # \u9876\u5934\u5199\u6982\u8981 \" \u503c: {} != {}\".format(left.val, right.val), # \u9664\u4e86\u7b2c\u4e00\u4e2a\u884c\uff0c\u5176\u4f59\u90fd\u53ef\u4ee5\u7f29\u8fdb ] \u6211\u4eec\u518d\u6b21\u6267\u884c\u7528\u4f8b\uff1a $ pipenv run pytest -q src/chapter-3/test_foo_compare.py F [100%] ====================================== FAILURES ====================================== __________________________________ test_foo_compare __________________________________ def test_foo_compare(): f1 = Foo(1) f2 = Foo(2) > assert f1 == f2 E assert \u6bd4\u8f83\u4e24\u4e2aFoo\u5b9e\u4f8b: E \u503c: 1 != 2 src/chapter-3/test_foo_compare.py:15: AssertionError ============================== short test summary info =============================== FAILED src/chapter-3/test_foo_compare.py::test_foo_compare - assert \u6bd4\u8f83\u4e24\u4e2aFoo\u5b9e\u4f8b: 1 failed in 0.11s \u6211\u4eec\u4f1a\u770b\u5230\u4e00\u4e2a\u66f4\u53cb\u597d\u7684\u5931\u8d25\u8bf4\u660e\uff1b \u5173\u4e8e\u65ad\u8a00\u81ea\u7701\u7684\u7ec6\u8282 # \u5f53\u65ad\u8a00\u5931\u8d25\u65f6\uff0cpytest \u4e3a\u6211\u4eec\u63d0\u4f9b\u4e86\u975e\u5e38\u4eba\u6027\u5316\u7684\u5931\u8d25\u8bf4\u660e\uff0c\u4e2d\u95f4\u5f80\u5f80\u5939\u6742\u7740\u76f8\u5e94\u53d8\u91cf\u7684\u81ea\u7701\u4fe1\u606f\uff0c\u8fd9\u4e2a\u6211\u4eec\u79f0\u4e3a\u65ad\u8a00\u7684\u81ea\u7701\uff1b \u90a3\u4e48\uff0cpytest \u662f\u5982\u4f55\u505a\u5230\u8fd9\u6837\u7684\uff1a pytest \u53d1\u73b0\u6d4b\u8bd5\u6a21\u5757\uff0c\u5e76\u5f15\u5165\u4ed6\u4eec\uff0c\u4e0e\u6b64\u540c\u65f6\uff0cpytest \u4f1a\u590d\u5199\u65ad\u8a00\u8bed\u53e5\uff0c\u6dfb\u52a0\u81ea\u7701\u4fe1\u606f\uff1b\u4f46\u662f\uff0c\u4e0d\u662f\u6d4b\u8bd5\u6a21\u5757\u7684\u65ad\u8a00\u8bed\u53e5\u5e76\u4e0d\u4f1a\u88ab\u590d\u5199\uff1b \u590d\u5199\u7f13\u5b58\u6587\u4ef6 # pytest \u4f1a\u628a\u88ab\u590d\u5199\u7684\u6a21\u5757\u5b58\u50a8\u5230\u672c\u5730\u4f5c\u4e3a\u7f13\u5b58\u4f7f\u7528\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u5728\u6d4b\u8bd5\u7528\u4f8b\u7684\u6839\u6587\u4ef6\u5939\u4e2d\u7684 conftest.py \u91cc\u6dfb\u52a0\u5982\u4e0b\u914d\u7f6e\u6765\u7981\u6b62\u8fd9\u79cd\u884c\u4e3a\uff1b import sys sys.dont_write_bytecode = True \u4f46\u662f\uff0c\u5b83\u5e76\u4e0d\u4f1a\u59a8\u788d\u4f60\u4eab\u53d7\u65ad\u8a00\u81ea\u7701\u7684\u597d\u5904\uff0c\u53ea\u662f\u4e0d\u4f1a\u5728\u672c\u5730\u5b58\u50a8 .pyc \u6587\u4ef6\u4e86\u3002 \u5173\u95ed\u65ad\u8a00\u81ea\u7701 # \u4f60\u53ef\u4ee5\u901a\u8fc7\u4e00\u4e0b\u4e24\u79cd\u65b9\u6cd5\uff1a \u5728\u6a21\u5757\u7684 docstring \u4e2d\u6dfb\u52a0 PYTEST_DONT_REWRITE \u5b57\u7b26\u4e32\uff1b \u6267\u884c pytest \u65f6\uff0c\u6dfb\u52a0 --assert=plain \u9009\u9879\uff1b \u6211\u4eec\u6765\u770b\u4e00\u4e0b\u5173\u95ed\u540e\u7684\u6548\u679c\uff1a pipenv run pytest -q --assert=plain src/chapter-3/test_foo_compare.py F [100%] ====================================== FAILURES ====================================== __________________________________ test_foo_compare __________________________________ def test_foo_compare(): f1 = Foo(1) f2 = Foo(2) > assert f1 == f2 E AssertionError src/chapter-3/test_foo_compare.py:15: AssertionError ============================== short test summary info =============================== FAILED src/chapter-3/test_foo_compare.py::test_foo_compare - AssertionError 1 failed in 0.12s \u65ad\u8a00\u5931\u8d25\u65f6\u7684\u4fe1\u606f\u5c31\u975e\u5e38\u7684\u4e0d\u5b8c\u6574\u4e86\uff0c\u6211\u4eec\u51e0\u4e4e\u770b\u4e0d\u51fa\u4efb\u4f55\u6709\u7528\u7684\u8c03\u8bd5\u4fe1\u606f\uff1b","title":"\u4e09\u3001\u7f16\u5199\u65ad\u8a00"},{"location":"zh-Hans-CN/%E4%B8%89%E3%80%81%E7%BC%96%E5%86%99%E6%96%AD%E8%A8%80/#_1","text":"","title":"\u7f16\u5199\u65ad\u8a00"},{"location":"zh-Hans-CN/%E4%B8%89%E3%80%81%E7%BC%96%E5%86%99%E6%96%AD%E8%A8%80/#assert","text":"pytest \u5141\u8bb8\u4f60\u4f7f\u7528 python \u6807\u51c6\u7684 assert \u8868\u8fbe\u5f0f\u5199\u65ad\u8a00\uff1b \u4f8b\u5982\uff1a # src/chapter-3/test_assert1.py def func(x): return x + 1 def test_function(): assert func(2) == 4 \u5982\u679c\u8fd9\u4e2a\u65ad\u8a00\u5931\u8d25\uff0c\u4f60\u4f1a\u770b\u5230 func(2) \u5b9e\u9645\u7684\u8fd4\u56de\u503c + where 3 = func(2) \uff1a $ pipenv run pytest -q src/chapter-3/test_assert1.py F [100%] ====================================== FAILURES ====================================== ___________________________________ test_function ____________________________________ def test_function(): > assert func(2) == 4 E assert 3 == 4 E + where 3 = func(2) src/chapter-3/test_assert1.py:6: AssertionError ============================== short test summary info =============================== FAILED src/chapter-3/test_assert1.py::test_function - assert 3 == 4 1 failed in 0.15s pytest \u652f\u6301\u663e\u793a\u5e38\u89c1\u7684 python \u5b50\u8868\u8fbe\u5f0f\u7684\u503c\uff0c\u5305\u62ec\uff1a\u8c03\u7528\u3001\u5c5e\u6027\u3001\u6bd4\u8f83\u3001\u4e8c\u8fdb\u5236\u548c\u4e00\u5143\u8fd0\u7b97\u7b26\u7b49\uff0c\u8fd9\u5141\u8bb8\u4f60\u5728\u6ca1\u6709\u6a21\u7248\u4ee3\u7801\u53c2\u8003\u7684\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u4f7f\u7528\u7684 python \u7684\u6570\u636e\u7ed3\u6784\uff0c\u800c\u65e0\u987b\u62c5\u5fc3\u81ea\u7701\u4e22\u5931\u7684\u95ee\u9898\u3002 \u540c\u65f6\uff0c\u4f60\u4e5f\u53ef\u4ee5\u4e3a\u65ad\u8a00\u6307\u5b9a\u4e86\u4e00\u6761\u8bf4\u660e\u4fe1\u606f\uff0c\u7528\u4e8e\u5931\u8d25\u65f6\u7684\u60c5\u51b5\u8bf4\u660e\uff1a assert a % 2 == 0, \"value was odd, should be even\"","title":"\u4f7f\u7528assert\u7f16\u5199\u65ad\u8a00"},{"location":"zh-Hans-CN/%E4%B8%89%E3%80%81%E7%BC%96%E5%86%99%E6%96%AD%E8%A8%80/#_2","text":"\u4f60\u53ef\u4ee5\u4f7f\u7528 pytest.raises() \u4f5c\u4e3a\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\uff0c\u6765\u7f16\u5199\u4e00\u4e2a\u89e6\u53d1\u671f\u671b\u5f02\u5e38\u7684\u65ad\u8a00\u3002 \u4f8b\u5982\uff0c\u6211\u4eec\u6709\u5982\u4e0b\u6d4b\u8bd5\u7528\u4f8b\uff1a import pytest def myfunc(): raise ValueError(\"Exception 123 raised\") def test_match(): with pytest.raises(ValueError): myfunc() \u5f53\u7528\u4f8b\u6ca1\u6709\u8fd4\u56de ValueError \u6216\u8005\u6ca1\u6709\u5f02\u5e38\u8fd4\u56de\u65f6\uff0c\u65ad\u8a00\u5224\u65ad\u5931\u8d25\uff1b \u5982\u679c\u4f60\u5e0c\u671b\u540c\u65f6\u8bbf\u95ee\u5f02\u5e38\u7684\u5c5e\u6027\uff0c\u53ef\u4ee5\u8fd9\u6837\uff1a import pytest def myfunc(): raise ValueError(\"Exception 123 raised\") def test_match(): with pytest.raises(ValueError) as excinfo: myfunc() assert '123' in str(excinfo.value) \u5176\u4e2d\uff0c excinfo \u662f ExceptionInfo \u7684\u4e00\u4e2a\u5b9e\u4f8b\uff0c\u5b83\u5c01\u88c5\u4e86\u5f02\u5e38\u7684\u4fe1\u606f\uff1b\u5e38\u7528\u7684\u5c5e\u6027\u5305\u62ec\uff1a .type \u3001 .value \u548c .traceback \uff1b Note \u5728\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u7684\u4f5c\u7528\u57df\u4e2d\uff0craises\u4ee3\u7801\u5fc5\u987b\u662f\u6700\u540e\u4e00\u884c\uff0c\u5426\u5219\uff0c\u5176\u540e\u9762\u7684\u4ee3\u7801\u5c06\u4e0d\u4f1a\u6267\u884c\uff1b\u6240\u4ee5\uff0c\u5982\u679c\u4e0a\u8ff0\u4f8b\u5b50\u6539\u6210\uff1a def test_match(): with pytest.raises(ValueError) as excinfo: myfunc() assert '456' in str(excinfo.value) \u5219\u6d4b\u8bd5\u5c06\u6c38\u8fdc\u6210\u529f\uff0c\u56e0\u4e3a assert '456' in str(excinfo.value) \u5e76\u4e0d\u4f1a\u6267\u884c\uff1b \u6211\u4eec\u4e5f\u53ef\u4ee5\u7ed9 pytest.raises() \u4f20\u9012\u4e00\u4e2a\u5173\u952e\u5b57\u53c2\u6570 match \uff0c\u6765\u6d4b\u8bd5\u5f02\u5e38\u7684\u5b57\u7b26\u4e32\u8868\u793a str(excinfo.value) \u662f\u5426\u7b26\u5408\u7ed9\u5b9a\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\uff08\u548c unittest \u4e2d\u7684 TestCase.assertRaisesRegexp \u65b9\u6cd5\u7c7b\u4f3c\uff09\uff1a import pytest def myfunc(): raise ValueError(\"Exception 123 raised\") def test_match(): with pytest.raises((ValueError, RuntimeError), match=r'.* 123 .*'): myfunc() pytest \u5b9e\u9645\u8c03\u7528\u7684\u662f re.search() \u65b9\u6cd5\u6765\u505a\u4e0a\u8ff0\u68c0\u67e5\u3002\u5e76\u4e14\uff0c pytest.raises() \u4e5f\u652f\u6301\u68c0\u67e5\u591a\u4e2a\u671f\u671b\u5f02\u5e38\uff08\u4ee5\u5143\u7ec4\u7684\u5f62\u5f0f\u4f20\u9012\u53c2\u6570\uff09\uff0c\u6211\u4eec\u53ea\u9700\u8981\u89e6\u53d1\u5176\u4e2d\u4efb\u610f\u4e00\u4e2a\u3002 pytest.raises \u8fd8\u6709\u53e6\u5916\u7684\u4e00\u79cd\u4f7f\u7528\u5f62\u5f0f\u3002 \u9996\u5148\uff0c\u6211\u4eec\u6765\u770b\u4e00\u4e0b\u5b83\u5728\u6e90\u7801\u4e2d\u7684\u5b9a\u4e49\uff1a # _pytest/python_api.py def raises( # noqa: F811 expected_exception: Union[\"Type[_E]\", Tuple[\"Type[_E]\", ...]], *args: Any, **kwargs: Any ) -> Union[\"RaisesContext[_E]\", _pytest._code.ExceptionInfo[_E]]: \u5b83\u63a5\u6536\u4e00\u4e2a\u4f4d\u7f6e\u53c2\u6570 expected_exception \uff0c\u4e00\u7ec4\u53ef\u53d8\u53c2\u6570 args \uff0c\u4e00\u7ec4\u5173\u952e\u5b57\u53c2\u6570 kwargs \uff1b \u63a5\u7740\u770b\u65b9\u6cd5\u7684\u4e3b\u4f53\u5185\u5bb9\uff1a # _pytest/python_api.py if isinstance(expected_exception, type): excepted_exceptions = (expected_exception,) # type: Tuple[Type[_E], ...] else: excepted_exceptions = expected_exception for exc in excepted_exceptions: if not isinstance(exc, type) or not issubclass(exc, BaseException): # type: ignore[unreachable] msg = \"expected exception must be a BaseException type, not {}\" # type: ignore[unreachable] not_a = exc.__name__ if isinstance(exc, type) else type(exc).__name__ raise TypeError(msg.format(not_a)) message = \"DID NOT RAISE {}\".format(expected_exception) if not args: match = kwargs.pop(\"match\", None) # type: Optional[Union[str, Pattern[str]]] if kwargs: msg = \"Unexpected keyword arguments passed to pytest.raises: \" msg += \", \".join(sorted(kwargs)) msg += \"\\nUse context-manager form instead?\" raise TypeError(msg) return RaisesContext(expected_exception, message, match) else: func = args[0] if not callable(func): raise TypeError( \"{!r} object (type: {}) must be callable\".format(func, type(func)) ) try: func(*args[1:], **kwargs) except expected_exception as e: # We just caught the exception - there is a traceback. assert e.__traceback__ is not None return _pytest._code.ExceptionInfo.from_exc_info( (type(e), e, e.__traceback__) ) fail(message) \u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c\u5982\u679c\u6ca1\u6709\u4f20\u5165\u53ef\u53d8\u53c2\u6570 args \uff0c\u90a3\u4e48\u5173\u952e\u5b57\u53c2\u6570 kwargs \u53ea\u80fd\u5305\u542b match \u5173\u952e\u5b57\uff0c\u5426\u5219\u4f1a\u4e0a\u62a5 TypeError \u5f02\u5e38\u3002 match = kwargs.pop(\"match\", None) # type: Optional[Union[str, Pattern[str]]] if kwargs: msg = \"Unexpected keyword arguments passed to pytest.raises: \" msg += \", \".join(sorted(kwargs)) msg += \"\\nUse context-manager form instead?\" raise TypeError(msg) \u5982\u679c\u4f20\u5165\u53ef\u53d8\u53c2\u6570 args \uff0c\u90a3\u4e48\u5b83\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u5fc5\u987b\u662f\u4e00\u4e2a\u53ef\u8c03\u7528\u7684\u5bf9\u8c61\uff0c\u5426\u5219\u4f1a\u62a5 TypeError \u5f02\u5e38\uff1b \u540c\u65f6\uff0c\u5b83\u4f1a\u628a\u5269\u4f59\u7684 args \u53c2\u6570\u548c\u6240\u6709 kwargs \u53c2\u6570\u4f20\u9012\u7ed9\u8fd9\u4e2a\u53ef\u8c03\u7528\u5bf9\u8c61\uff0c\u7136\u540e\u68c0\u67e5\u8fd9\u4e2a\u5bf9\u8c61\u6267\u884c\u4e4b\u540e\u662f\u5426\u89e6\u53d1\u6307\u5b9a\u5f02\u5e38\u3002 func = args[0] if not callable(func): raise TypeError( \"{!r} object (type: {}) must be callable\".format(func, type(func)) ) try: func(*args[1:], **kwargs) except expected_exception as e: ... \u6240\u4ee5\u6211\u4eec\u6709\u4e86\u4e00\u79cd\u65b0\u7684\u5199\u6cd5\uff1a def f(): raise ValueError(\"123\") pytest.raises(ValueError, f) \u4e5f\u53ef\u4ee5\u4f20\u5165\u4e00\u4e2a lambda \u8868\u8fbe\u5f0f\uff1a pytest.raises(ZeroDivisionError, lambda x: 1/x, 0) # \u6216\u8005 pytest.raises(ZeroDivisionError, lambda x: 1/x, x=0) \u8fd9\u4e2a\u65f6\u5019\u5982\u679c\u4f60\u518d\u4f20\u9012 match \u53c2\u6570\uff0c\u662f\u4e0d\u751f\u6548\u7684\uff0c\u56e0\u4e3a\u5b83\u53ea\u6709\u5728 if not args: \u7684\u65f6\u5019\u751f\u6548\uff1b pytest.mark.xfail() \u4e5f\u53ef\u4ee5\u63a5\u6536\u4e00\u4e2a raises \u53c2\u6570\uff0c\u6765\u5224\u65ad\u7528\u4f8b\u662f\u5426\u56e0\u4e3a\u4e00\u4e2a\u5177\u4f53\u7684\u5f02\u5e38\u800c\u5bfc\u81f4\u5931\u8d25\uff1a @pytest.mark.xfail(raises=IndexError) def test_f(): f() \u5982\u679c f() \u89e6\u53d1\u4e00\u4e2a IndexError \u5f02\u5e38\uff0c\u5219\u7528\u4f8b\u6807\u8bb0\u4e3a xfailed \uff1b\u5982\u679c\u6ca1\u6709\uff0c\u5219\u6b63\u5e38\u6267\u884c f() \uff1b Note \u5982\u679c test_f \u6d4b\u8bd5\u6210\u529f\uff0c\u7528\u4f8b\u7684\u7ed3\u679c\u662f xpassed \uff0c\u800c\u4e0d\u662f passed \uff1b pytest.raises \u9002\u7528\u4e8e\u68c0\u67e5\u7531\u4ee3\u7801\u6545\u610f\u5f15\u53d1\u7684\u5f02\u5e38\uff1b\u800c @pytest.mark.xfail() \u66f4\u9002\u5408\u7528\u4e8e\u8bb0\u5f55\u4e00\u4e9b\u672a\u4fee\u590d\u7684 Bug\uff1b","title":"\u7f16\u5199\u89e6\u53d1\u671f\u671b\u5f02\u5e38\u7684\u65ad\u8a00"},{"location":"zh-Hans-CN/%E4%B8%89%E3%80%81%E7%BC%96%E5%86%99%E6%96%AD%E8%A8%80/#_3","text":"\u6211\u4eec\u4e5f\u53ef\u4ee5\u5229\u7528 pytest.warns \u6765\u7f16\u5199\u89e6\u53d1\u671f\u671b\u544a\u8b66\u7684\u65ad\u8a00\uff0c\u5b83\u7684\u7528\u6cd5\u548c\u4e0a\u9762\u7684 pytest.raises \u975e\u5e38\u76f8\u4f3c\u3002","title":"\u7f16\u5199\u89e6\u53d1\u671f\u671b\u544a\u8b66\u7684\u65ad\u8a00"},{"location":"zh-Hans-CN/%E4%B8%89%E3%80%81%E7%BC%96%E5%86%99%E6%96%AD%E8%A8%80/#_4","text":"\u6211\u4eec\u6765\u770b\u8fd9\u4e2a\u4e0b\u9762\u8fd9\u4e2a\u6d4b\u8bd5\u7528\u4f8b\uff1a # src/chapter-3/test_special_compare.py def test_set_comparison(): set1 = set('1308') set2 = set('8035') assert set1 == set2 def test_long_str_comparison(): str1 = 'show me codes' str2 = 'show me money' assert str1 == str2 def test_dict_comparison(): dict1 = { 'x': 1, 'y': 2, } dict2 = { 'x': 1, 'y': 1, } assert dict1 == dict2 \u6211\u4eec\u6bd4\u8f83\u4e86\u4e09\u79cd\u6570\u636e\u7ed3\u6784\uff1a\u96c6\u5408\u3001\u5b57\u7b26\u4e32\u548c\u5b57\u5178\uff0c\u4e0b\u9762\u6211\u4eec\u6765\u6267\u884c\u6d4b\u8bd5\uff1a $ pipenv run pytest -q src/chapter-3/test_special_compare.py FFF [100%] ====================================== FAILURES ====================================== ________________________________ test_set_comparison _________________________________ def test_set_comparison(): set1 = set(\"1308\") set2 = set(\"8035\") > assert set1 == set2 E AssertionError: assert {'0', '1', '3', '8'} == {'0', '3', '5', '8'} E Extra items in the left set: E '1' E Extra items in the right set: E '5' E Full diff: E - {'8', '3', '5', '0'} E + {'3', '8', '1', '0'} src/chapter-3/test_special_compare.py:4: AssertionError ______________________________ test_long_str_comparison ______________________________ def test_long_str_comparison(): str1 = \"show me codes\" str2 = \"show me money\" > assert str1 == str2 E AssertionError: assert 'show me codes' == 'show me money' E - show me money E ? ^ ^ ^ E + show me codes E ? ^ ^ ^ src/chapter-3/test_special_compare.py:10: AssertionError ________________________________ test_dict_comparison ________________________________ def test_dict_comparison(): dict1 = { \"x\": 1, \"y\": 2, } dict2 = { \"x\": 1, \"y\": 1, } > assert dict1 == dict2 E AssertionError: assert {'x': 1, 'y': 2} == {'x': 1, 'y': 1} E Omitting 1 identical items, use -vv to show E Differing items: E {'y': 2} != {'y': 1} E Full diff: E - {'x': 1, 'y': 1} E ? ^ E + {'x': 1, 'y': 2}... E E ...Full output truncated (2 lines hidden), use '-vv' to show src/chapter-3/test_special_compare.py:22: AssertionError ============================== short test summary info =============================== FAILED src/chapter-3/test_special_compare.py::test_set_comparison - AssertionError:... FAILED src/chapter-3/test_special_compare.py::test_long_str_comparison - AssertionE... FAILED src/chapter-3/test_special_compare.py::test_dict_comparison - AssertionError... 3 failed in 0.13s \u9488\u5bf9\u4e00\u4e9b\u7279\u6b8a\u7684\u6570\u636e\u7ed3\u6784\u95f4\u7684\u6bd4\u8f83\uff0cpytest \u5bf9\u7ed3\u679c\u7684\u663e\u793a\u505a\u4e86\u4e00\u4e9b\u4f18\u5316\uff1a \u96c6\u5408\u3001\u5217\u8868\u7b49\uff1a\u6807\u8bb0\u51fa\u7b2c\u4e00\u4e2a\u4e0d\u540c\u7684\u5143\u7d20\uff1b \u5b57\u7b26\u4e32\uff1a\u6807\u8bb0\u51fa\u4e0d\u540c\u7684\u90e8\u5206\uff1b \u5b57\u5178\uff1a\u6807\u8bb0\u51fa\u4e0d\u540c\u7684\u6761\u76ee\uff1b","title":"\u7279\u6b8a\u6570\u636e\u7ed3\u6784\u6bd4\u8f83\u65f6\u7684\u4f18\u5316"},{"location":"zh-Hans-CN/%E4%B8%89%E3%80%81%E7%BC%96%E5%86%99%E6%96%AD%E8%A8%80/#_5","text":"\u6211\u4eec\u6765\u770b\u4e0b\u9762\u8fd9\u4e2a\u6d4b\u8bd5\u7528\u4f8b\uff1a # src/chapter-3/test_foo_compare.py class Foo: def __init__(self, val): self.val = val def __eq__(self, other): return self.val == other.val def test_foo_compare(): f1 = Foo(1) f2 = Foo(2) assert f1 == f2 \u6211\u4eec\u5b9a\u4e49\u4e86\u4e00\u4e2a Foo \u5bf9\u8c61\uff0c\u4e5f\u590d\u5199\u4e86\u5b83\u7684 __eq__() \u65b9\u6cd5\uff0c\u4f46\u5f53\u6211\u4eec\u6267\u884c\u8fd9\u4e2a\u7528\u4f8b\u65f6\uff1a $ pipenv run pytest -q src/chapter-3/test_foo_compare.py F [100%] ====================================== FAILURES ====================================== __________________________________ test_foo_compare __________________________________ def test_foo_compare(): f1 = Foo(1) f2 = Foo(2) > assert f1 == f2 E assert <test_foo_compare.Foo object at 0x1076bf250> == <test_foo_compare.Foo object at 0x1076bf6a0> src/chapter-3/test_foo_compare.py:12: AssertionError ============================== short test summary info =============================== FAILED src/chapter-3/test_foo_compare.py::test_foo_compare - assert <test_foo_compa... 1 failed in 0.12s \u6211\u4eec\u5e76\u4e0d\u80fd\u76f4\u89c2\u7684\u4ece\u4e2d\u770b\u51fa\u6765\u5931\u8d25\u7684\u539f\u56e0\uff1a assert <test_foo_compare.Foo object at 0x1076bf250> == <test_foo_compare.Foo object at 0x1076bf6a0> \u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u6709\u4e24\u79cd\u4f18\u5316\u7684\u65b9\u6cd5\uff1a \u590d\u5199 Foo \u7684 __repr__() \u65b9\u6cd5\uff1a def __repr__(self): return str(self.val) \u6211\u4eec\u518d\u6267\u884c\u7528\u4f8b\uff1a $ pipenv run pytest -q src/chapter-3/test_foo_compare.py F [100%] ====================================== FAILURES ====================================== __________________________________ test_foo_compare __________________________________ def test_foo_compare(): f1 = Foo(1) f2 = Foo(2) > assert f1 == f2 E assert 1 == 2 src/chapter-3/test_foo_compare.py:15: AssertionError ============================== short test summary info =============================== FAILED src/chapter-3/test_foo_compare.py::test_foo_compare - assert 1 == 2 \u8fd9\u65f6\uff0c\u6211\u4eec\u80fd\u770b\u5230\u5931\u8d25\u7684\u539f\u56e0\u662f\u56e0\u4e3a 1 == 2 \u4e0d\u6210\u7acb\uff1b Note \u81f3\u4e8e__str__()\u548c__repr__()\u7684\u533a\u522b\uff0c\u53ef\u4ee5\u53c2\u8003StackFlow\u4e0a\u7684\u8fd9\u4e2a\u95ee\u9898\u4e2d\u7684\u56de\u7b54\uff1a https://stackoverflow.com/questions/1436703/difference-between-str-and-repr \u4f7f\u7528 pytest_assertrepr_compare \u8fd9\u4e2a\u94a9\u5b50\u65b9\u6cd5\u6dfb\u52a0\u81ea\u5b9a\u4e49\u7684\u5931\u8d25\u8bf4\u660e\uff1a # src/chapter-3/conftest.py from test_foo_compare import Foo def pytest_assertrepr_compare(op, left, right): if isinstance(left, Foo) and isinstance(right, Foo) and op == \"==\": return [ \"\u6bd4\u8f83\u4e24\u4e2aFoo\u5b9e\u4f8b:\", # \u9876\u5934\u5199\u6982\u8981 \" \u503c: {} != {}\".format(left.val, right.val), # \u9664\u4e86\u7b2c\u4e00\u4e2a\u884c\uff0c\u5176\u4f59\u90fd\u53ef\u4ee5\u7f29\u8fdb ] \u6211\u4eec\u518d\u6b21\u6267\u884c\u7528\u4f8b\uff1a $ pipenv run pytest -q src/chapter-3/test_foo_compare.py F [100%] ====================================== FAILURES ====================================== __________________________________ test_foo_compare __________________________________ def test_foo_compare(): f1 = Foo(1) f2 = Foo(2) > assert f1 == f2 E assert \u6bd4\u8f83\u4e24\u4e2aFoo\u5b9e\u4f8b: E \u503c: 1 != 2 src/chapter-3/test_foo_compare.py:15: AssertionError ============================== short test summary info =============================== FAILED src/chapter-3/test_foo_compare.py::test_foo_compare - assert \u6bd4\u8f83\u4e24\u4e2aFoo\u5b9e\u4f8b: 1 failed in 0.11s \u6211\u4eec\u4f1a\u770b\u5230\u4e00\u4e2a\u66f4\u53cb\u597d\u7684\u5931\u8d25\u8bf4\u660e\uff1b","title":"\u4e3a\u5931\u8d25\u65ad\u8a00\u6dfb\u52a0\u81ea\u5b9a\u4e49\u7684\u8bf4\u660e"},{"location":"zh-Hans-CN/%E4%B8%89%E3%80%81%E7%BC%96%E5%86%99%E6%96%AD%E8%A8%80/#_6","text":"\u5f53\u65ad\u8a00\u5931\u8d25\u65f6\uff0cpytest \u4e3a\u6211\u4eec\u63d0\u4f9b\u4e86\u975e\u5e38\u4eba\u6027\u5316\u7684\u5931\u8d25\u8bf4\u660e\uff0c\u4e2d\u95f4\u5f80\u5f80\u5939\u6742\u7740\u76f8\u5e94\u53d8\u91cf\u7684\u81ea\u7701\u4fe1\u606f\uff0c\u8fd9\u4e2a\u6211\u4eec\u79f0\u4e3a\u65ad\u8a00\u7684\u81ea\u7701\uff1b \u90a3\u4e48\uff0cpytest \u662f\u5982\u4f55\u505a\u5230\u8fd9\u6837\u7684\uff1a pytest \u53d1\u73b0\u6d4b\u8bd5\u6a21\u5757\uff0c\u5e76\u5f15\u5165\u4ed6\u4eec\uff0c\u4e0e\u6b64\u540c\u65f6\uff0cpytest \u4f1a\u590d\u5199\u65ad\u8a00\u8bed\u53e5\uff0c\u6dfb\u52a0\u81ea\u7701\u4fe1\u606f\uff1b\u4f46\u662f\uff0c\u4e0d\u662f\u6d4b\u8bd5\u6a21\u5757\u7684\u65ad\u8a00\u8bed\u53e5\u5e76\u4e0d\u4f1a\u88ab\u590d\u5199\uff1b","title":"\u5173\u4e8e\u65ad\u8a00\u81ea\u7701\u7684\u7ec6\u8282"},{"location":"zh-Hans-CN/%E4%B8%89%E3%80%81%E7%BC%96%E5%86%99%E6%96%AD%E8%A8%80/#_7","text":"pytest \u4f1a\u628a\u88ab\u590d\u5199\u7684\u6a21\u5757\u5b58\u50a8\u5230\u672c\u5730\u4f5c\u4e3a\u7f13\u5b58\u4f7f\u7528\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u5728\u6d4b\u8bd5\u7528\u4f8b\u7684\u6839\u6587\u4ef6\u5939\u4e2d\u7684 conftest.py \u91cc\u6dfb\u52a0\u5982\u4e0b\u914d\u7f6e\u6765\u7981\u6b62\u8fd9\u79cd\u884c\u4e3a\uff1b import sys sys.dont_write_bytecode = True \u4f46\u662f\uff0c\u5b83\u5e76\u4e0d\u4f1a\u59a8\u788d\u4f60\u4eab\u53d7\u65ad\u8a00\u81ea\u7701\u7684\u597d\u5904\uff0c\u53ea\u662f\u4e0d\u4f1a\u5728\u672c\u5730\u5b58\u50a8 .pyc \u6587\u4ef6\u4e86\u3002","title":"\u590d\u5199\u7f13\u5b58\u6587\u4ef6"},{"location":"zh-Hans-CN/%E4%B8%89%E3%80%81%E7%BC%96%E5%86%99%E6%96%AD%E8%A8%80/#_8","text":"\u4f60\u53ef\u4ee5\u901a\u8fc7\u4e00\u4e0b\u4e24\u79cd\u65b9\u6cd5\uff1a \u5728\u6a21\u5757\u7684 docstring \u4e2d\u6dfb\u52a0 PYTEST_DONT_REWRITE \u5b57\u7b26\u4e32\uff1b \u6267\u884c pytest \u65f6\uff0c\u6dfb\u52a0 --assert=plain \u9009\u9879\uff1b \u6211\u4eec\u6765\u770b\u4e00\u4e0b\u5173\u95ed\u540e\u7684\u6548\u679c\uff1a pipenv run pytest -q --assert=plain src/chapter-3/test_foo_compare.py F [100%] ====================================== FAILURES ====================================== __________________________________ test_foo_compare __________________________________ def test_foo_compare(): f1 = Foo(1) f2 = Foo(2) > assert f1 == f2 E AssertionError src/chapter-3/test_foo_compare.py:15: AssertionError ============================== short test summary info =============================== FAILED src/chapter-3/test_foo_compare.py::test_foo_compare - AssertionError 1 failed in 0.12s \u65ad\u8a00\u5931\u8d25\u65f6\u7684\u4fe1\u606f\u5c31\u975e\u5e38\u7684\u4e0d\u5b8c\u6574\u4e86\uff0c\u6211\u4eec\u51e0\u4e4e\u770b\u4e0d\u51fa\u4efb\u4f55\u6709\u7528\u7684\u8c03\u8bd5\u4fe1\u606f\uff1b","title":"\u5173\u95ed\u65ad\u8a00\u81ea\u7701"},{"location":"zh-Hans-CN/%E4%BA%8C%E3%80%81%E4%BD%BF%E7%94%A8%E5%92%8C%E8%B0%83%E7%94%A8/","text":"\u4f7f\u7528\u548c\u8c03\u7528 # \u901a\u8fc7 python -m pytest \u7684\u65b9\u5f0f\u6267\u884c\u6d4b\u8bd5 # \u6211\u4eec\u53ef\u4ee5\u5728\u547d\u4ee4\u884c\u4e2d\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u6267\u884c\u6d4b\u8bd5\uff1a python -m pytest [...] \u4e0d\u8fc7\u8fd9\u4f1a\u5c06\u5f53\u524d\u8def\u5f84\u52a0\u5165\u5230 sys.path \u4e2d\uff0c\u9664\u6b64\u4e4b\u5916\u5b83\u4e0e pytest [...] \u7684\u6548\u679c\u4e00\u6837\u3002 Note python -m mod \u8868\u793a\u5c06\u6a21\u5757\uff08 mod \uff09\u4f5c\u4e3a\u811a\u672c\u6765\u8fd0\u884c\uff0c\u4f46\u662f\u6a21\u5757\u4e2d\u5fc5\u987b\u5305\u542b\u4e00\u4e2a __main__.py \u6587\u4ef6\u3002 pytest \u7684 __main__.py \u6587\u4ef6\u5185\u5bb9\u5982\u4e0b\uff1a \"\"\"The pytest entry point.\"\"\" import pytest if __name__ == \"__main__\": raise SystemExit(pytest.console_main()) \u6d4b\u8bd5\u7ed3\u675f\u65f6\u53ef\u80fd\u8fd4\u56de\u7684\u72b6\u6001\u7801 # \u6d4b\u8bd5\u6267\u884c\u7ed3\u675f\u540e\uff0cpytest \u53ef\u80fd\u4f1a\u8fd4\u56de\u4ee5\u4e0b\u516d\u79cd\u4e0d\u540c\u7684\u72b6\u6001\u7801\uff1a 0\uff08 OK \uff09\uff1a\u6536\u96c6\u5230\u7684\u6240\u6709\u7684\u6d4b\u8bd5\u7528\u4f8b\u5747\u6d4b\u8bd5\u6210\u529f\uff1b 1\uff08 TESTS_FAILED \uff09\uff1a\u6709\u7528\u4f8b\u6d4b\u8bd5\u5931\u8d25\uff1b 2\uff08 INTERRUPTED \uff09\uff1a\u6d4b\u8bd5\u6267\u884c\u8fc7\u7a0b\u88ab\u7528\u6237\u7ec8\u6b62\uff0c\u4f8b\u5982\uff1a CTRL + C \uff1b 3\uff08 INTERNAL_ERROR \uff09\uff1a\u6d4b\u8bd5\u6267\u884c\u8fc7\u7a0b\u4e2d\u53d1\u751f\u5185\u90e8\u9519\u8bef\uff1b 4\uff08 USAGE_ERROR \uff09\uff1apytest \u547d\u4ee4\u884c\u4f7f\u7528\u9519\u8bef\uff1b 5\uff08 NO_TESTS_COLLECTED \uff09\uff1a\u6ca1\u6709\u6536\u96c6\u5230\u4efb\u4f55\u6d4b\u8bd5\u7528\u4f8b\uff1b \u5b83\u4eec\u5c01\u88c5\u5728\u4e00\u4e2a\u679a\u4e3e\u7c7b\u4e2d\uff1a pytest.ExitCode \uff0c\u5e76\u4e14\u53ef\u4ee5\u88ab\u76f4\u63a5\u5f15\u5165\u548c\u8bbf\u95ee\uff1a from pytest import ExitCode Note \u5982\u679c\u4f60\u60f3\u5728\u67d0\u4e9b\u573a\u666f\u4e0b\u81ea\u5b9a\u4e49\u8fd4\u56de\u7684\u72b6\u6001\u7801\uff0c\u5c24\u5176\u662f\u5f53\u672a\u6536\u96c6\u5230\u4efb\u4f55\u6d4b\u8bd5\u7528\u4f8b\u65f6\uff0c\u53ef\u4ee5\u8003\u8651\u4f7f\u7528 pytest-custom_exit_code \u63d2\u4ef6\u3002 \u83b7\u53d6\u5e2e\u52a9\u4fe1\u606f # # \u663e\u793a pytest \u7684\u7248\u672c\u4fe1\u606f $ pytest --version # \u663e\u793a\u6240\u6709\u53ef\u7528\u7684 fixture $ pytest --fixtures # \u663e\u793a\u547d\u4ee4\u884c\u7684\u5e2e\u52a9\u4fe1\u606f\u548c\u914d\u7f6e\u6587\u4ef6\u7684\u9009\u9879 $ pytest -h | --help \u6240\u6709\u53ef\u7528\u7684\u547d\u4ee4\u884c\u9009\u9879\u53ef\u4ee5\u53c2\u770b\uff1a https://docs.pytest.org/en/6.1.1/reference.html#command-line-flags \u5728\u7b2c\u4e00\u4e2a\uff08N\u4e2a\uff09\u6d4b\u8bd5\u7528\u4f8b\u5931\u8d25\u65f6\u9000\u51fa # # \u9047\u5230\u7b2c\u4e00\u4e2a\u5931\u8d25\u7684\u6d4b\u8bd5\u7528\u4f8b\u65f6\u9000\u51fa $ pytest -x | --exitfirst # \u9047\u5230\u7b2c\u4e8c\u4e2a\u5931\u8d25\u7684\u6d4b\u8bd5\u7528\u4f8b\u65f6\u9000\u51fa $ pytest --maxfail=2 \u6267\u884c\u6307\u5b9a\u7684\u6d4b\u8bd5\u7528\u4f8b # pytest \u652f\u6301\u591a\u79cd\u65b9\u5f0f\u4ece\u547d\u4ee4\u884c\u6267\u884c\u6307\u5b9a\u7684\u6d4b\u8bd5\u7528\u4f8b\u3002 \u6267\u884c\u6307\u5b9a\u6a21\u5757\u4e2d\u7684\u6d4b\u8bd5\u7528\u4f8b # $ pytest test_mod.py \u6267\u884c\u6307\u5b9a\u76ee\u5f55\u4e0b\u6240\u6709\u7684\u6d4b\u8bd5\u7528\u4f8b # $ pytest testing/ \u6267\u884c\u5339\u914d\u6307\u5b9a\u5173\u952e\u5b57\u7684\u6d4b\u8bd5\u7528\u4f8b # $ pytest -k \"MyClass and not method\" \u8fd9\u5c06\u6267\u884c\u6d4b\u8bd5\u6a21\u5757\u540d\u3001\u7c7b\u540d\u6216\u8005\u51fd\u6570\u540d\u5339\u914d\u6307\u5b9a\u5173\u952e\u5b57\u7684\u6d4b\u8bd5\u7528\u4f8b\uff08\u4e0d\u533a\u5206\u5927\u5c0f\u5199\uff09\u3002\u4f8b\u5982\uff0c\u4e0a\u8ff0\u4f8b\u5b50\u4f1a\u6267\u884c TestMyClass.test_something \uff0c\u800c\u4e0d\u4f1a\u6267\u884c TestMyClass.test_method_simple \u3002 \u6267\u884c\u6307\u5b9a nodeid \u7684\u6d4b\u8bd5\u7528\u4f8b # pytest \u4e3a\u6bcf\u4e00\u4e2a\u6536\u96c6\u5230\u7684\u6d4b\u8bd5\u7528\u4f8b\u6307\u5b9a\u4e00\u4e2a\u552f\u4e00\u7684 nodeid \uff0c\u5b83\u7531 \u6a21\u5757\u540d \u548c \u8bf4\u660e\u7b26 \u6784\u6210\uff0c\u4ee5 :: \u95f4\u9694\uff0c\u5176\u4e2d\u8bf4\u660e\u7b26\u53ef\u4ee5\u5305\u542b\u7c7b\u540d\u3001\u51fd\u6570\u540d\u548c\u7531 parametrize \u6807\u8bb0\u8d4b\u4e88\u7684\u53c2\u6570\u3002 \u6211\u4eec\u6765\u770b\u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50\uff0c\u8fd9\u91cc\u6709\u4e09\u4e2a\u6d4b\u8bd5\u7528\u4f8b\uff0c\u5206\u522b\u5bf9\u5e94\u4e0d\u540c\u7684 \u8bf4\u660e\u7b26 \uff1a # src/chapter-2/test_nodeid.py import pytest def test_one(): pass class TestNodeid: def test_one(self): pass @pytest.mark.parametrize(\"x,y\", [(1, 2), (3, 4)]) def test_two(self, x, y): assert x + 1 == y \u6307\u5b9a \u51fd\u6570\u540d \uff1a $ pipenv run pytest src/chapter-2/test_nodeid.py::test_one --collect-only ================================ test session starts ================================= platform darwin -- Python 3.8.4, pytest-6.1.1, py-1.9.0, pluggy-0.13.1 rootdir: /Users/yaomeng/Private/projects/pytest-chinese-doc collected 1 item <Module src/chapter-2/test_nodeid.py> <Function test_one> =============================== no tests ran in 0.01s ================================ \u6307\u5b9a \u7c7b\u540d+\u51fd\u6570\u540d \uff1a $ pipenv run pytest src/chapter-2/test_nodeid.py::TestNodeid::test_one --collect-only ================================ test session starts ================================= platform darwin -- Python 3.8.4, pytest-6.1.1, py-1.9.0, pluggy-0.13.1 rootdir: /Users/yaomeng/Private/projects/pytest-chinese-doc collected 1 item <Module src/chapter-2/test_nodeid.py> <Class TestNodeid> <Function test_one> =============================== no tests ran in 0.01s ================================ \u6307\u5b9a \u7531 parametrize \u6807\u8bb0\u8d4b\u4e88\u7684\u53c2\u6570 \uff1a $ pipenv run pytest src/chapter-2/test_nodeid.py::TestNodeid::test_two[1-2] --collect-only ================================ test session starts ================================= platform darwin -- Python 3.8.4, pytest-6.1.1, py-1.9.0, pluggy-0.13.1 rootdir: /Users/yaomeng/Private/projects/pytest-chinese-doc collecting ... nodeid src/chapter-2/test_nodeid.py::TestNodeid::test_two[1-2] collected 1 item <Module src/chapter-2/test_nodeid.py> <Class TestNodeid> <Function test_two[1-2]> =============================== no tests ran in 0.01s ================================ \u8fd9\u91cc\u6307\u5b9a\u53c2\u6570 x \u3001 y \u7684\u5f62\u5f0f\u662f [1-1] \uff0c\u4e2d\u95f4\u4ee5 - \u95f4\u9694\uff0c\u5e76\u4e14\u53ea\u80fd\u4e3a [1-1] \u6216\u8005 [3-4] \u3002 Attention \u4e0a\u8ff0\u65b9\u5f0f\u5e76\u672a\u771f\u6b63\u6267\u884c\u8fd9\u4e9b\u6d4b\u8bd5\u7528\u4f8b\uff0c\u53ea\u662f\u901a\u8fc7 --collect-only \u5c55\u793a\u8fc7\u6ee4\u540e\u6536\u96c6\u5230\u7684\u6d4b\u8bd5\u7528\u4f8b\u3002 Note \u6211\u4eec\u4e5f\u53ef\u4ee5\u4f7f\u7528\u4e0a\u9762\u4ecb\u7ecd\u7684\u547d\u4ee4\u884c\u9009\u9879 -k \u8fbe\u5230\u540c\u6837\u7684\u6548\u679c\uff0c\u4f8b\u5982\uff1a\u6267\u884c test_nodeid.py::test_one \u6d4b\u8bd5\u7528\u4f8b\uff1a $ pipenv run pytest -k \"test_one and not testnodeid\" src/chapter-2/test_nodeid.py --collect-only ================================ test session starts ================================= platform darwin -- Python 3.8.4, pytest-6.1.1, py-1.9.0, pluggy-0.13.1 rootdir: /Users/yaomeng/Private/projects/pytest-chinese-doc collected 4 items / 3 deselected / 1 selected <Module src/chapter-2/test_nodeid.py> <Function test_one> =============================== 3 deselected in 0.01s ================================ \u8fd9\u548c\u4e0a\u9762\u7684 pipenv run pytest src/chapter-2/test_nodeid.py::test_one --collect-only \u6548\u679c\u662f\u4e00\u6837\u7684\u3002 \u6267\u884c\u6307\u5b9a\u6807\u8bb0\u7684\u6d4b\u8bd5\u7528\u4f8b # $ pytest -m slow \u8fd9\u4f1a\u6267\u884c\u6240\u6709\u7531 @pytest.mark.slow \u6807\u8bb0\u7684\u6d4b\u8bd5\u7528\u4f8b\u3002 \u66f4\u591a\u8be6\u7ec6\u7684\u4fe1\u606f\u53ef\u4ee5\u53c2\u8003\uff1a https://docs.pytest.org/en/6.1.1/mark.html#mark \u6267\u884c\u6307\u5b9a\u5305\u4e2d\u7684\u6d4b\u8bd5\u7528\u4f8b # $ pytest --pyargs pkg.testing \u4fee\u6539\u56de\u6eaf\u4fe1\u606f\u7684\u8f93\u51fa\u6a21\u5f0f # # \u5728\u56de\u6eaf\u4fe1\u606f\u4e2d\u663e\u793a\u5c40\u90e8\u53d8\u91cf $ pytest -l | --showlocals # \u9ed8\u8ba4\u7684\u6a21\u5f0f $ pytest --tb=auto # \u8be6\u7ec6\u7684\u8f93\u51fa $ pytest --tb=long # \u7cbe\u7b80\u7684\u8f93\u51fa $ pytest --tb=short # \u6bcf\u4e2a\u5931\u8d25\u4fe1\u606f\u603b\u7ed3\u5728\u4e00\u884c\u4e2d $ pytest --tb=line # python \u7684\u6807\u51c6\u6a21\u5f0f $ pytest --tb=native # \u4e0d\u6253\u5370\u56de\u6eaf\u4fe1\u606f $ pytest --tb=no \u4f7f\u7528 --full-trace \u6807\u8bb0\u4f1a\u5f97\u5230\u66f4\u8be6\u7ec6\u7684\u56de\u6eaf\u4fe1\u606f\uff08\u6bd4 --tb=long \u8fd8\u8981\u8be6\u7ec6\uff09\uff0c\u5e76\u4e14\u5b83\u751a\u81f3\u4f1a\u6293\u53d6\u7528\u6237\u5f3a\u5236\u6253\u65ad\u6d4b\u8bd5\u6267\u884c\u65f6\u7684\u56de\u6eaf\u4fe1\u606f\uff08 CTRL + C \uff09\u3002\u8fd9\u5728\u67d0\u4e9b\u573a\u666f\u975e\u5e38\u6709\u7528\uff0c\u5f53\u4f60\u7684\u6d4b\u8bd5\u957f\u65f6\u95f4\u6302\u6b7b\u5728\u67d0\u4e00\u6b65\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 CTRL + C \u9000\u51fa\u6267\u884c\u6765\u5b9a\u4f4d\u95ee\u9898\u3002 \u8be6\u7ec6\u7684\u603b\u7ed3\u62a5\u544a # \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u547d\u4ee4\u884c\u9009\u9879 -r \u5728\u6267\u884c\u7ed3\u675f\u540e\uff0c\u6253\u5370\u4e00\u4e2a\u603b\u7ed3\u62a5\u544a\u3002 \u4f8b\u5982\uff0c\u6211\u4eec\u6709\u4ee5\u4e0b\u6d4b\u8bd5\u6a21\u5757\uff1a # src/chapter-2/test_report.py import pytest @pytest.fixture def error_fixture(): assert 0 def test_ok(): print(\"ok\") def test_fail(): assert 0 def test_error(error_fixture): pass def test_skip(): pytest.skip(\"skipping this test\") def test_xfail(): pytest.xfail(\"xfailing this test\") @pytest.mark.xfail(reason=\"always xfail\") def test_xpass(): pass \u73b0\u5728\uff0c\u6211\u4eec\u60f3\u5728\u6d4b\u8bd5\u7ed3\u675f\u540e\uff0c\u5c55\u793a\u6240\u6709 \u6ca1\u6709\u6d4b\u8bd5\u6210\u529f \u7684\u6d4b\u8bd5\u7528\u4f8b\u7684\u62a5\u544a\uff1a pipenv run pytest -q -ra src/chapter-2/test_report.py .FEsxX [100%] ======================================= ERRORS ======================================= ____________________________ ERROR at setup of test_error ____________________________ @pytest.fixture def error_fixture(): > assert 0 E assert 0 src/chapter-2/test_report.py:6: AssertionError ====================================== FAILURES ====================================== _____________________________________ test_fail ______________________________________ def test_fail(): > assert 0 E assert 0 src/chapter-2/test_report.py:14: AssertionError ============================== short test summary info =============================== SKIPPED [1] src/chapter-2/test_report.py:22: skipping this test XFAIL src/chapter-2/test_report.py::test_xfail reason: xfailing this test XPASS src/chapter-2/test_report.py::test_xpass always xfail ERROR src/chapter-2/test_report.py::test_error - assert 0 FAILED src/chapter-2/test_report.py::test_fail - assert 0 1 failed, 1 passed, 1 skipped, 1 xfailed, 1 xpassed, 1 error in 0.06s \u6211\u4eec\u53ef\u4ee5\u770b\u5230\u5728 short test summary info \u7684\u533a\u57df\u4e2d\uff0c\u62a5\u544a\u5c55\u793a\u4e86 SKIPPED \u3001 XFAIL \u3001 XPASS \u3001 ERROR \u548c FAILED \u7684\u6d4b\u8bd5\u7528\u4f8b\uff0c\u552f\u72ec\u6ca1\u6709\u5c55\u793a PASSED \u7684\u6d4b\u8bd5\u7528\u4f8b\u3002 -r \u53ef\u4ee5\u5728\u5b83\u7684\u540e\u9762\u7d27\u63a5\u7740\u4e00\u4e2a\u6216\u8005\u591a\u4e2a\u5b57\u7b26\uff0c\u7528\u4e8e\u6307\u5b9a\u60f3\u8981\u663e\u793a\u7684\u6d4b\u8bd5\u7528\u4f8b\uff0c\u9ed8\u8ba4\u662f fE \uff0c\u8868\u793a\u603b\u7ed3\u62a5\u544a\u53ea\u4f1a\u663e\u793a\u5931\u8d25\u7684\u548c\u53d1\u751f\u9519\u8bef\u7684\u6d4b\u8bd5\u7528\u4f8b\u3002 \u6240\u6709\u6709\u6548\u7684\u5b57\u7b26\u53c2\u6570\u5982\u4e0b\uff1a f \uff1a\u5931\u8d25\u7684\uff1b E \uff1a\u53d1\u751f\u9519\u8bef\u7684\uff1b s \uff1a\u88ab\u8df3\u8fc7\u7684\uff1b x \uff1a\u7ed3\u679c\u4e3a xfailed \u7684\uff1b p \uff1a\u6210\u529f\u7684\uff1b P \uff1a\u6210\u529f\u7684\uff0c\u5e76\u4e14\u6709\u8f93\u51fa\u4fe1\u606f\u7684\u3002\u5373\u6d4b\u8bd5\u7528\u4f8b\u4e2d\u5305\u542b print \u7b49\u884c\u4e3a\u7684\uff1b \u4ee5\u53ca\u4e00\u4e9b\u7279\u6b8a\u7684\u5b57\u7b26\u53c2\u6570\uff1a a \uff1a\u6240\u6709\u7684\uff0c\u4f46\u662f\u9664\u4e86 pP \u7684\uff1b A \uff1a\u6240\u6709\u7684\uff1b N \uff1a\u56e0\u4e3a\u9ed8\u8ba4\u503c\u662f fE \uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5b83\u53bb\u4e0d\u6253\u5370\u6d4b\u8bd5\u62a5\u544a\uff1b \u4e0a\u8ff0\u5b57\u7b26\u53c2\u6570\u4e5f\u53ef\u4ee5\u53e0\u52a0\u4f7f\u7528\uff0c\u4f8b\u5982\uff1a\u6211\u4eec\u671f\u671b\u8fc7\u6ee4\u51fa\u5931\u8d25\u7684\u548c\u672a\u6267\u884c\u7684\uff1a $ pytest -rfs \u5931\u8d25\u65f6\u52a0\u8f7d PDB \uff08Python Debugger\uff09\u73af\u5883 # PDB \u662f python \u5185\u5efa\u7684\u8bca\u65ad\u5668\uff0cpytest \u5141\u8bb8\u901a\u8fc7\u4ee5\u4e0b\u547d\u4ee4\u5728\u6267\u884c\u5931\u8d25\u65f6\u8fdb\u5165\u8fd9\u4e2a\u8bca\u65ad\u5668\u6a21\u5f0f\uff1a $ pytest --pdb pytest \u4f1a\u5728 \u6bcf\u4e2a\u6d4b\u8bd5\u7528\u4f8b \u5931\u8d25\uff08\u6216\u8005 Ctrl+C \uff09\u65f6\uff0c\u8c03\u7528\u8fd9\u4e2a\u8bca\u65ad\u5668\u3002\u5982\u679c\u4f60\u53ea\u60f3\u5728\u7b2c\u4e00\u6b21\u5931\u8d25\u65f6\uff0c\u8c03\u7528\u8fd9\u4e2a\u8bca\u65ad\u5668\uff0c\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u547d\u4ee4\uff1a # \u9047\u5230\u7b2c\u4e00\u4e2a\u5931\u8d25\u65f6\uff0c\u8c03\u7528 PDB \u73af\u5883\uff0c\u7136\u540e\u9000\u51fa\u6574\u4e2a\u6267\u884c\u8fc7\u7a0b $ pytest -x --pdb # \u53ea\u6709\u524d\u4e09\u4e2a\u5931\u8d25\u7528\u4f8b\u8c03\u7528 PDB \u73af\u5883 $ pytest --pdb --maxfail=3 sys.last_value \u3001 sys.last_type \u548c sys.last_traceback \u5b58\u50a8\u4e86\u53d1\u751f\u5f02\u5e38\u65f6\u4fe1\u606f\uff0c\u6211\u4eec\u53ef\u4ee5\u5728 PDB \u73af\u5883\u4e2d\u8bbf\u95ee\u5b83\u4eec\u3002 \u6211\u4eec\u6765\u770b\u4e0b\u9762\u8fd9\u4e2a\u6d4b\u8bd5\u7528\u4f8b\uff1a # src/chapter-2/test_pdb.py def test_pdb(): x = 0 assert x \u6267\u884c\u6d4b\u8bd5\u7528\u4f8b\uff08 --pdb \uff09\uff1a $ pipenv run pytest src/chapter-2/test_pdb.py --pdb ================================ test session starts ================================= platform darwin -- Python 3.8.4, pytest-6.1.1, py-1.9.0, pluggy-0.13.1 rootdir: /Users/yaomeng/Private/projects/pytest-chinese-doc collected 1 item src/chapter-2/test_pdb.py F >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> traceback >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> def test_pdb(): x = 0 > assert x E assert 0 src/chapter-2/test_pdb.py:3: AssertionError >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> entering PDB >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> >>>>>>>>>>>>>>>>>>>>> PDB post_mortem (IO-capturing turned off) >>>>>>>>>>>>>>>>>>>>>> > /Users/yaomeng/Private/projects/pytest-chinese-doc/src/chapter-2/test_pdb.py(3)test_pdb() -> assert x # \u9700\u8981\u5148\u5f15\u5165 sys \u6a21\u5757 (Pdb) import sys (Pdb) sys.last_value AssertionError('assert 0') (Pdb) sys.last_type <class 'AssertionError'> # \u4f7f\u7528 exit \u9000\u51fa PDB \u73af\u5883\uff0c\u4f7f\u7528 continue \u7ee7\u7eed\u6267\u884c\u4e0b\u9762\u7684\u6b65\u9aa4 (Pdb) exit ============================== short test summary info =============================== FAILED src/chapter-2/test_pdb.py::test_pdb - assert 0 !!!!!!!!!!!!!!!!!!!!!! _pytest.outcomes.Exit: Quitting debugger !!!!!!!!!!!!!!!!!!!!!! ================================= 1 failed in 27.67s ================================= \u5f00\u59cb\u6267\u884c\u65f6\u5c31\u52a0\u8f7d PDB \u73af\u5883 # \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u547d\u4ee4\uff0c\u5728 \u6bcf\u4e2a\u6d4b\u8bd5\u7528\u4f8b \u5f00\u59cb\u65f6\uff0c\u90fd\u5148\u52a0\u8f7d PDB \u73af\u5883\uff1a $ pytest --trace \u8bbe\u7f6e\u65ad\u70b9 # \u5728\u6d4b\u8bd5\u7528\u4f8b\u4ee3\u7801\u4e2d\u6dfb\u52a0 import pdb;pdb.set_trace() \uff0c\u5f53\u5176\u88ab\u8c03\u7528\u65f6\uff0c pytest \u4f1a\u505c\u6b62\u8fd9\u6761\u7528\u4f8b\u7684\u8f93\u51fa\uff1a \u5176\u4ed6\u7528\u4f8b\u4e0d\u53d7\u5f71\u54cd\uff1b \u901a\u8fc7 continue \u547d\u4ee4\uff0c\u53ef\u4ee5\u9000\u51fa PDB \u73af\u5883\uff0c\u5e76\u7ee7\u7eed\u6267\u884c\u7528\u4f8b\uff1b \u4f7f\u7528\u5185\u7f6e\u7684\u4e2d\u65ad\u51fd\u6570 # python 3.7 \u5f00\u59cb\u65b0\u52a0\u4e86\u4e00\u4e2a\u5185\u7f6e breakpoint() \u51fd\u6570\u3002pytest \u652f\u6301\u4ee5\u4e0b\u4f7f\u7528\u884c\u4e3a\uff1a \u5f53 breakpoint() \u88ab\u8c03\u7528\uff0c\u5e76\u4e14 PYTHONBREAKPOINT \u4e3a None \u65f6\uff0c pytest \u4f1a\u4f7f\u7528\u81ea\u5b9a\u4e49\u7684 PDB \u4ee3\u66ff\u7cfb\u7edf\u7684\uff1b \u6d4b\u8bd5\u6267\u884c\u7ed3\u675f\u65f6\uff0c\u81ea\u52a8\u5207\u56de\u7cfb\u7edf\u81ea\u5e26\u7684 PDB \uff1b \u5f53\u52a0\u4e0a --pdb \u9009\u9879\u65f6\uff0c breakpoint() \u548c\u6d4b\u8bd5\u53d1\u751f\u9519\u8bef\u65f6\uff0c\u90fd\u4f1a\u8c03\u7528\u5185\u90e8\u81ea\u5b9a\u4e49\u7684 PDB \uff1b --pdbcls \u9009\u9879\u5141\u8bb8\u6307\u5b9a\u4e00\u4e2a\u7528\u6237\u81ea\u5b9a\u4e49\u7684 PDB \u7c7b\uff1b Note \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 --pdbcls=IPython.terminal.debugger:TerminalPdb \u9009\u9879\u6307\u5b9a ipython \u4e3a\u6211\u4eec\u7684 PDB \u8c03\u8bd5\u73af\u5883\uff1a $ pipenv run pytest src/chapter-2/test_pdb.py --pdbcls=IPython.terminal.debugger:TerminalPdb --pdb ================================ test session starts ================================= platform darwin -- Python 3.8.4, pytest-6.1.1, py-1.9.0, pluggy-0.13.1 rootdir: /Users/yaomeng/Private/projects/pytest-chinese-doc collected 1 item src/chapter-2/test_pdb.py F >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> traceback >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> def test_pdb(): x = 0 > assert x E assert 0 src/chapter-2/test_pdb.py:3: AssertionError >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> entering PDB >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> >>>>>>>>>>>>>>>>>>>>> PDB post_mortem (IO-capturing turned off) >>>>>>>>>>>>>>>>>>>>>> > /Users/yaomeng/Private/projects/pytest-chinese-doc/src/chapter-2/test_pdb.py(3)test_pdb() 1 def test_pdb(): 2 x = 0 ----> 3 assert x ipdb> import sys ipdb> sys.last_type <class 'AssertionError'> ipdb> exit ============================== short test summary info =============================== FAILED src/chapter-2/test_pdb.py::test_pdb - assert 0 !!!!!!!!!!!!!!!!!!!!!! _pytest.outcomes.Exit: Quitting debugger !!!!!!!!!!!!!!!!!!!!!! ================================= 1 failed in 19.02s ================================= \u5206\u6790\u6d4b\u8bd5\u6267\u884c\u65f6\u957f # Attention pytest 6.0 \u7248\u672c\u5f00\u59cb\u4f7f\u7528\u65b0\u7684\u884c\u4e3a \u5217\u51fa\u6267\u884c\u65f6\u95f4\u8d85\u8fc71\u79d2\uff0c\u6700\u6162\u768410\u4e2a\u6d4b\u8bd5\u7528\u4f8b\uff1a $ pytest --durations=10 --durations-min=1.0 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cpytest \u4e0d\u4f1a\u5217\u51fa\u6267\u884c\u65f6\u957f\u5c0f\u4e8e 0.005 \u79d2\u7684\u6d4b\u8bd5\u7528\u4f8b\uff0c\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u6dfb\u52a0 -vv \u9009\u9879\u6765\u540c\u65f6\u67e5\u770b\u5b83\u4eec\u3002 \u9519\u8bef\u53e5\u67c4 # Attention pytest 5.0 \u7248\u672c\u65b0\u589e\u7279\u6027 \u5728\u6d4b\u8bd5\u6267\u884c\u4e2d\u53d1\u751f\u6bb5\u9519\u8bef\u6216\u8005\u8d85\u65f6\u7684\u60c5\u51b5\u4e0b\uff0c faulthandler \u6807\u51c6\u6a21\u5757\u53ef\u4ee5\u8f6c\u50a8 python \u7684\u56de\u6eaf\u4fe1\u606f\u3002 \u5b83\u5728 pytest \u7684\u6267\u884c\u4e2d\u9ed8\u8ba4\u6253\u5f00\uff0c\u9664\u975e\u4f7f\u7528 -p no:faulthandler \u547d\u4ee4\u884c\u9009\u9879\u5173\u95ed\u5b83\u3002 \u540c\u6837\uff0c faulthandler_timeout=X \u914d\u7f6e\u9879\uff0c\u53ef\u7528\u4e8e\u5f53\u6d4b\u8bd5\u7528\u4f8b\u7684\u5b8c\u6210\u65f6\u95f4\u8d85\u8fc7 X \u79d2\u65f6\uff0c\u8f6c\u50a8\u6240\u6709\u7ebf\u7a0b\u7684 python \u56de\u6eaf\u4fe1\u606f\uff1a # src/chapter-2/pytest.ini [pytest] faulthandler_timeout=5 \u6211\u4eec\u6709\u5982\u4e0b\u6d4b\u8bd5\u7528\u4f8b\uff1a # src/chapter-2/test_fault_handler.py import time def test_faulthandler(): time.sleep(7) \u6267\u884c\u6d4b\u8bd5\u7528\u4f8b\uff1a $ pipenv run pytest -q src/chapter-2/test_faulthandler.py Timeout (0:00:05)! Thread 0x000000010f0505c0 (most recent call first): File \"/Users/yaomeng/Private/projects/pytest-chinese-doc/src/chapter-2/test_faulthandler.py\", line 5 in test_faulthandler File \"/Users/yaomeng/.local/share/virtualenvs/pytest-chinese-doc-DA9roatD/lib/python3.8/site-packages/_pytest/python.py\", line 184 in pytest_pyfunc_call File \"/Users/yaomeng/.local/share/virtualenvs/pytest-chinese-doc-DA9roatD/lib/python3.8/site-packages/pluggy/callers.py\", line 187 in _multicall File \"/Users/yaomeng/.local/share/virtualenvs/pytest-chinese-doc-DA9roatD/lib/python3.8/site-packages/pluggy/manager.py\", line 84 in <lambda> File \"/Users/yaomeng/.local/share/virtualenvs/pytest-chinese-doc-DA9roatD/lib/python3.8/site-packages/pluggy/manager.py\", line 93 in _hookexec File \"/Users/yaomeng/.local/share/virtualenvs/pytest-chinese-doc-DA9roatD/lib/python3.8/site-packages/pluggy/hooks.py\", line 286 in __call__ File \"/Users/yaomeng/.local/share/virtualenvs/pytest-chinese-doc-DA9roatD/lib/python3.8/site-packages/_pytest/python.py\", line 1627 in runtest File \"/Users/yaomeng/.local/share/virtualenvs/pytest-chinese-doc-DA9roatD/lib/python3.8/site-packages/_pytest/runner.py\", line 163 in pytest_runtest_call File \"/Users/yaomeng/.local/share/virtualenvs/pytest-chinese-doc-DA9roatD/lib/python3.8/site-packages/pluggy/callers.py\", line 187 in _multicall File \"/Users/yaomeng/.local/share/virtualenvs/pytest-chinese-doc-DA9roatD/lib/python3.8/site-packages/pluggy/manager.py\", line 84 in <lambda> File \"/Users/yaomeng/.local/share/virtualenvs/pytest-chinese-doc-DA9roatD/lib/python3.8/site-packages/pluggy/manager.py\", line 93 in _hookexec File \"/Users/yaomeng/.local/share/virtualenvs/pytest-chinese-doc-DA9roatD/lib/python3.8/site-packages/pluggy/hooks.py\", line 286 in __call__ File \"/Users/yaomeng/.local/share/virtualenvs/pytest-chinese-doc-DA9roatD/lib/python3.8/site-packages/_pytest/runner.py\", line 256 in <lambda> File \"/Users/yaomeng/.local/share/virtualenvs/pytest-chinese-doc-DA9roatD/lib/python3.8/site-packages/_pytest/runner.py\", line 310 in from_call File \"/Users/yaomeng/.local/share/virtualenvs/pytest-chinese-doc-DA9roatD/lib/python3.8/site-packages/_pytest/runner.py\", line 255 in call_runtest_hook File \"/Users/yaomeng/.local/share/virtualenvs/pytest-chinese-doc-DA9roatD/lib/python3.8/site-packages/_pytest/runner.py\", line 216 in call_and_report File \"/Users/yaomeng/.local/share/virtualenvs/pytest-chinese-doc-DA9roatD/lib/python3.8/site-packages/_pytest/runner.py\", line 127 in runtestprotocol File \"/Users/yaomeng/.local/share/virtualenvs/pytest-chinese-doc-DA9roatD/lib/python3.8/site-packages/_pytest/runner.py\", line 110 in pytest_runtest_protocol File \"/Users/yaomeng/.local/share/virtualenvs/pytest-chinese-doc-DA9roatD/lib/python3.8/site-packages/pluggy/callers.py\", line 187 in _multicall File \"/Users/yaomeng/.local/share/virtualenvs/pytest-chinese-doc-DA9roatD/lib/python3.8/site-packages/pluggy/manager.py\", line 84 in <lambda> File \"/Users/yaomeng/.local/share/virtualenvs/pytest-chinese-doc-DA9roatD/lib/python3.8/site-packages/pluggy/manager.py\", line 93 in _hookexec File \"/Users/yaomeng/.local/share/virtualenvs/pytest-chinese-doc-DA9roatD/lib/python3.8/site-packages/pluggy/hooks.py\", line 286 in __call__ File \"/Users/yaomeng/.local/share/virtualenvs/pytest-chinese-doc-DA9roatD/lib/python3.8/site-packages/_pytest/main.py\", line 338 in pytest_runtestloop File \"/Users/yaomeng/.local/share/virtualenvs/pytest-chinese-doc-DA9roatD/lib/python3.8/site-packages/pluggy/callers.py\", line 187 in _multicall File \"/Users/yaomeng/.local/share/virtualenvs/pytest-chinese-doc-DA9roatD/lib/python3.8/site-packages/pluggy/manager.py\", line 84 in <lambda> File \"/Users/yaomeng/.local/share/virtualenvs/pytest-chinese-doc-DA9roatD/lib/python3.8/site-packages/pluggy/manager.py\", line 93 in _hookexec File \"/Users/yaomeng/.local/share/virtualenvs/pytest-chinese-doc-DA9roatD/lib/python3.8/site-packages/pluggy/hooks.py\", line 286 in __call__ File \"/Users/yaomeng/.local/share/virtualenvs/pytest-chinese-doc-DA9roatD/lib/python3.8/site-packages/_pytest/main.py\", line 313 in _main File \"/Users/yaomeng/.local/share/virtualenvs/pytest-chinese-doc-DA9roatD/lib/python3.8/site-packages/_pytest/main.py\", line 257 in wrap_session File \"/Users/yaomeng/.local/share/virtualenvs/pytest-chinese-doc-DA9roatD/lib/python3.8/site-packages/_pytest/main.py\", line 306 in pytest_cmdline_main File \"/Users/yaomeng/.local/share/virtualenvs/pytest-chinese-doc-DA9roatD/lib/python3.8/site-packages/pluggy/callers.py\", line 187 in _multicall File \"/Users/yaomeng/.local/share/virtualenvs/pytest-chinese-doc-DA9roatD/lib/python3.8/site-packages/pluggy/manager.py\", line 84 in <lambda> File \"/Users/yaomeng/.local/share/virtualenvs/pytest-chinese-doc-DA9roatD/lib/python3.8/site-packages/pluggy/manager.py\", line 93 in _hookexec File \"/Users/yaomeng/.local/share/virtualenvs/pytest-chinese-doc-DA9roatD/lib/python3.8/site-packages/pluggy/hooks.py\", line 286 in __call__ File \"/Users/yaomeng/.local/share/virtualenvs/pytest-chinese-doc-DA9roatD/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 164 in main File \"/Users/yaomeng/.local/share/virtualenvs/pytest-chinese-doc-DA9roatD/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 187 in console_main File \"/Users/yaomeng/.local/share/virtualenvs/pytest-chinese-doc-DA9roatD/bin/pytest\", line 8 in <module> . [100%] 1 passed in 6.02s \u53ef\u4ee5\u770b\u5230\uff0c\u5728\u6267\u884c\u521a\u8d85\u8fc75\u79d2\u7684\u65f6\u5019\u4f1a\u6253\u5370\u51fa\u56de\u6eaf\u4fe1\u606f\uff0c\u4f46\u4e0d\u4f1a\u4e2d\u65ad\u6d4b\u8bd5\u7684\u6267\u884c\uff1b \u5173\u95ed faulthandler \u63d2\u4ef6\u518d\u6b21\u6267\u884c\u8fd9\u4e2a\u6d4b\u8bd5\u7528\u4f8b\uff1a pipenv run pytest -q src/chapter-2/test_faulthandler.py -p no:faulthandler . [100%] ================================== warnings summary ================================== ../../../.local/share/virtualenvs/pytest-chinese-doc-DA9roatD/lib/python3.8/site-packages/_pytest/config/__init__.py:1230 /Users/yaomeng/.local/share/virtualenvs/pytest-chinese-doc-DA9roatD/lib/python3.8/site-packages/_pytest/config/__init__.py:1230: PytestConfigWarning: Unknown config option: faulthandler_timeout self._warn_or_fail_if_strict(\"Unknown config option: {}\\n\".format(key)) -- Docs: https://docs.pytest.org/en/stable/warnings.html 1 passed, 1 warning in 6.02s \u53ef\u4ee5\u770b\u5230\uff0c\u8d85\u65f6\u5e76\u4e0d\u4f1a\u89e6\u53d1\u56de\u6eaf\u4fe1\u606f\u7684\u6253\u5370\u3002\u4e0d\u8fc7\u6211\u4eec\u4f1a\u5f97\u5230\u4e00\u4e2a\u544a\u8b66\uff0c\u56e0\u4e3a\u6211\u4eec\u5173\u95ed\u4e86 faulthandler \u63d2\u4ef6\uff0c\u90a3\u4e48\u5b83\u5b9a\u4e49\u7684 faulthandler_timeout \u914d\u7f6e\u5c06\u65e0\u6cd5\u8bc6\u522b\u3002 Note \u8fd9\u4e2a\u529f\u80fd\u662f\u4ece pytest-faulthandler \u63d2\u4ef6\u5408\u5e76\u800c\u6765\u7684\uff0c\u4f46\u662f\u6709\u4e24\u70b9\u4e0d\u540c\uff1a \u53bb\u4f7f\u80fd\u65f6\uff0c\u4f7f\u7528 -p no:faulthandler \u4ee3\u66ff\u539f\u6765\u7684 --no-faulthandler ; \u4f7f\u7528 faulthandler_timeout \u914d\u7f6e\u9879\u4ee3\u66ff --faulthandler-timeout \u547d\u4ee4\u884c\u9009\u9879\u6765\u914d\u7f6e\u8d85\u65f6\u65f6\u95f4\u3002\u5f53\u7136\uff0c\u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528 -o faulthandler_timeout=X \u5728\u547d\u4ee4\u884c\u914d\u7f6e\uff1b \u521b\u5efa JUnitXML \u683c\u5f0f\u7684\u6d4b\u8bd5\u62a5\u544a # \u4f7f\u7528\u5982\u4e0b\u547d\u4ee4\uff0c\u53ef\u4ee5\u5728\u6307\u5b9a\u7684 path \u4e2d\u521b\u5efa\u4e00\u4e2a\u80fd\u88ab Jenkins \u6216\u8005\u5176\u4ed6CI\u5de5\u5177\u8bfb\u53d6\u7684 XML \u683c\u5f0f\u7684\u6d4b\u8bd5\u62a5\u544a\uff1a $ pytest --junitxml=path \u4f60\u53ef\u4ee5\u5728\u9879\u76ee\u7684 pytest.ini \u6587\u4ef6\u4e2d\uff0c\u901a\u8fc7\u8bbe\u7f6e junit_suite_name \u7684\u503c\uff0c\u81ea\u5b9a\u4e49 XML \u6587\u4ef6\u4e2d testsuite \u6839\u8282\u70b9\u7684 name \u4fe1\u606f\uff1a # src/chapter-2/pytest.ini [pytest] junit_suite_name = pytest_chinese_doc Attention junit_suite_name \u662f pytest 4.0 \u7248\u672c\u65b0\u589e\u7684\u914d\u7f6e\u9879\uff1b \u6211\u4eec\u5148\u6765\u6267\u884c\u4e00\u4e2a\u6d4b\u8bd5\u7528\u4f8b test_nodeid.py::test_one \u770b\u770b\u6548\u679c\uff1a $ pipenv run pytest -q --junitxml=src/chapter-2/report/test_one.xml src/chapter-2/test_nodeid.py::test_one . [100%] - generated xml file: /Users/yaomeng/Private/projects/pytest-chinese-doc/src/chapter-2/report/test_one.xml - 1 passed in 0.02s \u67e5\u770b\u751f\u6210\u7684 XML \u6587\u4ef6\uff1a <?xml version=\"1.0\" encoding=\"utf-8\"?> <testsuites> <testsuite name=\"pytest_chinese_doc\" errors=\"0\" failures=\"0\" skipped=\"0\" tests=\"1\" time=\"0.025\" timestamp=\"2020-10-06T10:46:48.256695\" hostname=\"yaomengdeMacBook-Air.local\"> <testcase classname=\"test_nodeid\" name=\"test_one\" time=\"0.001\"/> </testsuite> </testsuites> \u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c <testsuite> \u8282\u70b9\u7684 name \u5c5e\u6027\u7684\u503c\uff0c\u53d8\u4e3a\u6211\u4eec\u6240\u671f\u671b\u7684 pytest_chinese_doc \uff0c\u800c\u4e0d\u662f\u9ed8\u8ba4\u7684 pytest \u3002 JUnit XML\u89c4\u5b9a time \u5c5e\u6027\u5e94\u8be5\u8868\u660e\u6d4b\u8bd5\u7528\u4f8b\u6267\u884c\u7684\u5168\u90e8\u8017\u65f6\uff0c\u5305\u542b setup \u548c teardown \u4e2d\u7684\u64cd\u4f5c\uff0c\u8fd9\u4e5f\u662fpytest\u7684\u9ed8\u8ba4\u884c\u4e3a\uff1b \u5982\u679c\u4f60\u53ea\u60f3\u8bb0\u5f55\u6d4b\u8bd5\u7528\u4f8b\u6267\u884c\u7684\u65f6\u95f4\uff0c\u53ea\u9700\u8981\u505a\u5982\u4e0b\u914d\u7f6e\uff1a # src/chapter-2/pytest.ini [pytest] junit_duration_report = call \u5728 XML \u62a5\u544a\u4e2d\u4e3a\u6d4b\u8bd5\u7528\u4f8b\u9644\u52a0\u989d\u5916\u7684\u5b50\u8282\u70b9\u4fe1\u606f # \u6211\u4eec\u6709\u4e24\u79cd\u65b9\u5f0f\u5b9e\u73b0\u8fd9\u4e2a\u529f\u80fd\uff1a \u4f7f\u7528 record_property fixture\uff1a \u4f8b\u5982\uff1a\u4e3a test_xml_report::test_record_property \u7528\u4f8b\u6dfb\u52a0\u4e00\u4e2a\u989d\u5916\u7684 test_id \u4fe1\u606f\uff1a # src/chapter-2/test_xml_report.py def test_record_property(record_property): record_property(\"test_id\", 10010) \u5728 XML \u6587\u4ef6\u4e2d\u7684\u8868\u73b0\u4e3a\uff1a <property name=\"test_id\" value=\"10010\"/> \u3002 <!-- src/chapter-2/report/test_record_property.xml --> <?xml version=\"1.0\" encoding=\"utf-8\"?> <testsuites> <testsuite name=\"pytest_chinese_doc\" errors=\"0\" failures=\"0\" skipped=\"0\" tests=\"1\" time=\"0.021\" timestamp=\"2020-10-06T11:10:59.021407\" hostname=\"yaomengdeMacBook-Air.local\"> <testcase classname=\"test_xml_report\" name=\"test_record_property\" time=\"0.000\"> <properties> <property name=\"test_id\" value=\"10010\"/> </properties> </testcase> </testsuite> </testsuites> \u65b0\u589e\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7684\u6807\u8bb0 @pytest.mark.test_id() : \u9996\u5148\uff0c\u5728 conftest.py \u6587\u4ef6\u4e2d\u91cd\u8f7d pytest_collection_modifyitems \u94a9\u5b50\u65b9\u6cd5\uff0c\u6dfb\u52a0\u5bf9 test_id \u6807\u8bb0\u7684\u652f\u6301\uff1a # src/chapter-2/conftest.py def pytest_collection_modifyitems(items): for item in items: for marker in item.iter_markers(name=\"test_id\"): test_id = marker.args[0] item.user_properties.append((\"test_id\", test_id)) \u7136\u540e\uff0c\u4e3a\u6d4b\u8bd5\u7528\u4f8b\u6dfb\u52a0\u65b0\u6807\u8bb0\uff1a # src/chapter-2/test_xml_report.py import pytest @pytest.mark.test_id(10086) def test_marker_test_id(): pass \u5728 XML \u6587\u4ef6\u4e2d\u7684\u8868\u73b0\u4e5f\u4e3a\uff1a <property name=\"test_id\" value=\"10086\"/> \u3002 <?xml version=\"1.0\" encoding=\"utf-8\"?> <testsuites> <testsuite name=\"pytest_chinese_doc\" errors=\"0\" failures=\"0\" skipped=\"0\" tests=\"2\" time=\"0.025\" timestamp=\"2020-10-06T11:23:30.388331\" hostname=\"yaomengdeMacBook-Air.local\"> <testcase classname=\"test_xml_report\" name=\"test_marker_test_id\" time=\"0.000\"> <properties> <property name=\"test_id\" value=\"10086\"/> </properties> </testcase> <testcase classname=\"test_xml_report\" name=\"test_record_property\" time=\"0.000\"> <properties> <property name=\"test_id\" value=\"10010\"/> </properties> </testcase> </testsuite> </testsuites> Warning \u8fd9\u65f6\u6211\u4eec\u4f1a\u5f97\u5230\u4e00\u4e2a\u544a\u8b66\uff1a PytestUnknownMarkWarning: Unknown pytest.mark.test_id - is this a typo? You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/mark.html @pytest.mark.test_id(10010) \u8fd9\u662f\u56e0\u4e3a\u6211\u4eec\u6ca1\u6709\u5728pytest\u4e2d\u6ce8\u518ctest_id\u6807\u8bb0\uff0c\u4f46\u4e0d\u5f71\u54cd\u6b63\u5e38\u7684\u6267\u884c\uff1b \u5982\u679c\u4f60\u60f3\u53bb\u9664\u8fd9\u4e2a\u544a\u8b66\uff0c\u53ea\u9700\u8981\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u6ce8\u518c\u8fd9\u4e2a\u6807\u8bb0\uff1a [pytest] markers = test_id: \u4e3a\u6d4b\u8bd5\u7528\u4f8b\u6dfb\u52a0ID Important \u4ece pytest 6.0 \u7248\u672c\u5f00\u59cb\uff0c --junit_family \u547d\u4ee4\u884c\u9009\u9879\u7684\u9ed8\u8ba4\u503c\u6539\u6210 xunit2 \uff0c\u8fd9\u662f\u5bf9\u65e7\u7684 xunit1 \u683c\u5f0f\u7684\u4e00\u79cd\u66f4\u65b0\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u64cd\u4f5c\u6b64\u7c7b\u6587\u4ef6\u7684\u5de5\u5177\uff08Jenkins\u3001Azure Pipelines\u7b49\uff09\u5747\u652f\u6301\u8be5\u683c\u5f0f\u3002 \u4f7f\u7528 xunit2 \u683c\u5f0f\uff0c\u53ea\u9700\u8981\u66f4\u65b0\u4f60\u7684\u914d\u7f6e\u6587\u4ef6\uff1a [pytest] junit_family=xunit2 \u5982\u679c\u4f60\u6240\u4f7f\u7528\u7684\u5de5\u5177\u5e76\u4e0d\u652f\u6301\u8fd9\u79cd\u65b0\u683c\u5f0f\uff0c\u4f60\u4e5f\u53ef\u4ee5\u7ee7\u7eed\u4f7f\u7528\u4e4b\u524d\u7684\u683c\u5f0f\uff1a [pytest] junit_family=legacy \u76ee\u524d\u5df2\u77e5\u7684\u652f\u6301 xunit2 \u683c\u5f0f\u7684\u5de5\u5177\u6709\uff1a Jenkins \u5e76\u7ed3\u5408 JUnit \u63d2\u4ef6\uff1b Azure Pipelines \uff1b \u5728 XML \u62a5\u544a\u4e2d\u4e3a\u6d4b\u8bd5\u7528\u4f8b\u9644\u52a0\u989d\u5916\u7684\u5c5e\u6027\u4fe1\u606f # \u53ef\u4ee5\u901a\u8fc7 record_xml_attribute fixture \u4e3a\u6d4b\u8bd5\u7528\u4f8b\u9644\u52a0\u989d\u5916\u7684 \u5c5e\u6027 \uff0c\u800c\u4e0d\u50cf record_property \u4e3a\u5176\u6dfb\u52a0\u5b50\u8282\u70b9\uff1b \u4f8b\u5982\uff1a\u4e3a\u6d4b\u8bd5\u7528\u4f8b\u6dfb\u52a0\u4e00\u4e2a test_id \u5c5e\u6027\uff0c\u5e76\u4fee\u6539\u539f\u5148\u7684 classname \u5c5e\u6027\uff1a # src/chapter-2/test_xml_report.py def test_record_xml_attribute(record_xml_attribute): record_xml_attribute(\"test_id\", 10010) record_xml_attribute(\"classname\", \"custom_classname\") \u5728\u62a5\u544a\u4e2d\u7684\u8868\u73b0\u4e3a <testcase classname=\"custom_classname\" test_id=\"10010\" ... \uff1a <!-- src/chapter-2/report/test_record_xml_attribute.xml --> <?xml version=\"1.0\" encoding=\"utf-8\"?> <testsuites> <testsuite name=\"pytest_chinese_doc\" errors=\"0\" failures=\"0\" skipped=\"0\" tests=\"1\" time=\"0.024\" timestamp=\"2020-10-06T14:58:12.006400\" hostname=\"yaomengdeMacBook-Air.local\"> <testcase classname=\"custom_classname\" name=\"test_record_xml_attribute\" file=\"test_xml_report.py\" line=\"12\" test_id=\"10010\" time=\"0.011\"/> </testsuite> </testsuites> Warning record_xml_attribute \u76ee\u524d\u662f\u4e00\u4e2a\u5b9e\u9a8c\u6027\u7684\u529f\u80fd\uff0c\u672a\u6765\u53ef\u80fd\u88ab\u66f4\u5f3a\u5927\u7684 API \u6240\u66ff\u4ee3\uff0c\u4f46\u529f\u80fd\u672c\u8eab\u4f1a\u88ab\u4fdd\u7559\u3002 \u5728 XML \u62a5\u544a\u4e2d\u4e3a\u6d4b\u8bd5\u96c6\u9644\u52a0\u989d\u5916\u7684\u5b50\u8282\u70b9\u4fe1\u606f # Attention pytest 4.5 \u7248\u672c\u65b0\u589e\u529f\u80fd \u53ef\u4ee5\u901a\u8fc7\u81ea\u5b9a\u4e49\u4e00\u4e2a session \u4f5c\u7528\u57df\u7ea7\u522b\u7684 fixture\uff0c\u4e3a\u6d4b\u8bd5\u96c6\u6dfb\u52a0\u5b50\u8282\u70b9\u4fe1\u606f\uff0c\u5e76\u4e14\u4f1a\u4f5c\u7528\u4e8e\u6240\u6709\u7684\u6d4b\u8bd5\u7528\u4f8b\uff1b \u8fd9\u4e2a\u81ea\u5b9a\u4e49\u7684 fixture \u9700\u8981\u8c03\u7528\u53e6\u5916\u4e00\u4e2a record_testsuite_property fixture\uff1a record_testsuite_property \u63a5\u6536\u4e24\u4e2a\u53c2\u6570 name \u548c value \u4ee5\u6784\u6210 <property> \u6807\u7b7e\uff0c\u5176\u4e2d\uff0c name \u5fc5\u987b\u4e3a\u5b57\u7b26\u4e32\uff0c value \u4f1a\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\u5e76\u8fdb\u884c XML \u8f6c\u4e49\uff1b # src/chapter-2/test_xml_report.py @pytest.fixture(scope=\"session\") def log_global_env_facts(record_testsuite_property): record_testsuite_property(\"EXECUTOR\", \"luizyao\") record_testsuite_property(\"LOCATION\", \"NJ\") def test_testsuite_property(log_global_env_facts): pass \u751f\u6210\u7684\u6d4b\u8bd5\u62a5\u544a\u8868\u73b0\u4e3a\uff1a\u5728 testsuite \u8282\u70b9\u4e2d\uff0c\u591a\u4e86\u4e00\u4e2a properties \u5b50\u8282\u70b9\uff0c\u5305\u542b\u6240\u6709\u65b0\u589e\u7684\u5c5e\u6027\u8282\u70b9\uff0c\u800c\u4e14\uff0c\u5b83\u548c\u6240\u6709\u7684 testcase \u8282\u70b9\u662f\u5e73\u7ea7\u7684\uff1b <!-- src/chapter-2/report/test_testsuite_property.xml --> <?xml version=\"1.0\" encoding=\"utf-8\"?> <testsuites> <testsuite name=\"pytest_chinese_doc\" errors=\"0\" failures=\"0\" skipped=\"0\" tests=\"1\" time=\"0.022\" timestamp=\"2020-10-06T15:07:49.768753\" hostname=\"yaomengdeMacBook-Air.local\"> <properties> <property name=\"EXECUTOR\" value=\"luizyao\"/> <property name=\"LOCATION\" value=\"NJ\"/> </properties> <testcase classname=\"test_xml_report\" name=\"test_testsuite_property\" file=\"test_xml_report.py\" line=\"23\" time=\"0.000\"/> </testsuite> </testsuites> \u8fd9\u6837\u751f\u6210\u7684 XML \u6587\u4ef6\u662f\u7b26\u5408\u6700\u65b0\u7684 xunit2 \u6807\u51c6\u7684\uff0c\u8fd9\u70b9\u548c record_property \u3001 record_xml_attribute \u6b63\u597d\u76f8\u53cd\u3002\u5982\u679c junit_family=xunit2 \uff0c\u5b83\u4eec\u4f1a\u89e6\u53d1\u544a\u8b66\uff1a PytestWarning: record_xml_attribute is incompatible with junit_family 'xunit2' (use 'legacy' or 'xunit1') \uff0c\u800c record_testsuite_property \u4e0d\u4f1a\u3002 \u4e3a\u6d4b\u8bd5\u62a5\u544a\u63d0\u4f9b URL \u94fe\u63a5 -- pastebin \u670d\u52a1 # \u76ee\u524d\uff0c\u53ea\u5b9e\u73b0\u4e86\u5728 http://bpaste.net \u4e0a\u7684\u5c55\u793a\u529f\u80fd\uff1b \u4e3a\u6bcf\u4e00\u4e2a\u5931\u8d25\u7684\u6d4b\u8bd5\u7528\u4f8b\u521b\u5efa\u4e00\u4e2aURL pytest --pastebin=failed \u4e5f\u53ef\u4ee5\u901a\u8fc7\u6dfb\u52a0 -x \u9009\u9879\uff0c\u53ea\u4e3a\u7b2c\u4e00\u4e2a\u5931\u8d25\u7684\u6d4b\u8bd5\u7528\u4f8b\u521b\u5efa\u4e00\u4e2aURL\uff1b \u4e3a\u6240\u6709\u7684\u6d4b\u8bd5\u7528\u4f8b\u521b\u5efa\u4e00\u4e2aURL pytest --pastebin=all \u5c3d\u65e9\u7684\u52a0\u8f7d\u63d2\u4ef6 # \u4f60\u53ef\u4ee5\u5728\u547d\u4ee4\u884c\u4e2d\u4f7f\u7528 -p \u9009\u9879\uff0c\u6765\u5c3d\u65e9\u7684\u52a0\u8f7d\u67d0\u4e00\u4e2a\u63d2\u4ef6\uff1a pytest -p mypluginmodule -p \u9009\u9879\u63a5\u6536\u4e00\u4e2a name \u53c2\u6570\uff0c\u8fd9\u4e2a\u53c2\u6570\u53ef\u4ee5\u4e3a\uff1a \u4e00\u4e2a\u5b8c\u6574\u7684\u672c\u5730\u63d2\u4ef6\u5f15\u5165\uff0c\u4f8b\u5982\uff1a myproject.plugins \uff0c\u5176\u5fc5\u987b\u662f\u53ef\u4ee5 import \u7684\u3002 \u4e00\u4e2a\u516c\u5171\u63d2\u4ef6\u7684\u540d\u79f0\uff0c\u8fd9\u662f\u5176\u6ce8\u518c\u65f6\u5728 setuptools \u4e2d\u8d4b\u4e88\u7684\u540d\u5b57\uff0c\u4f8b\u5982\uff1a\u5c3d\u65e9\u7684\u52a0 pytest-cov \u63d2\u4ef6\uff1a pytest -p pytest_cov \u53bb\u4f7f\u80fd\u63d2\u4ef6 # \u4f60\u53ef\u4ee5\u5728\u547d\u4ee4\u884c\u4e2d\u4f7f\u7528 -p \u7ed3\u5408 no: \uff0c\u6765\u53bb\u4f7f\u80fd\u4e00\u4e2a\u63d2\u4ef6\u7684\u52a0\u8f7d\uff0c\u4f8b\u5982\uff1a pytest -p no:doctest \u5728 python \u4ee3\u7801\u4e2d\u8c03\u7528 pytest # \u53ef\u4ee5\u76f4\u63a5\u5728\u4ee3\u7801\u4e2d\u8c03\u7528 pytest \uff1a pytest.main() \u8fd9\u548c\u4f60\u5728\u547d\u4ee4\u884c\u4e2d\u6267\u884c pytest \u51e0\u4e4e\u662f\u4e00\u6837\u7684\uff0c\u4f46\u5176\u4e5f\u6709\u4ee5\u4e0b\u7279\u70b9\uff1a \u4e0d\u4f1a\u89e6\u53d1 SystemExit \uff0c\u800c\u662f\u8fd4\u56de exitcode \uff1a # src/chapter-2/test_via_main.py import time def test_one(): time.sleep(10) if __name__ == \"__main__\": import pytest ret = pytest.main([\"-q\", __file__]) print( \"pytest.main() \u8fd4\u56de pytest.ExitCode.INTERRUPTED\uff1a\", ret == pytest.ExitCode.INTERRUPTED, ) \u7528\u4f8b\u4e2d\u6709\u7b49\u5f8510\u79d2\u7684\u64cd\u4f5c\uff0c\u5728\u8fd9\u671f\u95f4\uff0c\u6253\u65ad\u6267\u884c\uff08 Ctr+C \uff09\uff0c pytest.main() \u8fd4\u56de\u7684\u662f INTERRUPTED \u72b6\u6001\u7801\uff1b pipenv run python src/chapter-2/test_via_main.py ^C !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! KeyboardInterrupt !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! /Users/yaomeng/Private/projects/pytest-chinese-doc/src/chapter-2/test_via_main.py:5: KeyboardInterrupt (to show a full traceback on KeyboardInterrupt use --full-trace) no tests ran in 1.38s pytest.main() \u8fd4\u56de pytest.ExitCode.INTERRUPTED\uff1a True \u4f20\u9012\u9009\u9879\u548c\u53c2\u6570\uff1a pytest.main([\"-x\", \"mytestdir\"]) \u6307\u5b9a\u4e00\u4e2a\u63d2\u4ef6\uff1a import pytest class MyPlugin: def pytest_sessionfinish(self): print(\"*** test run reporting finishing\") pytest.main([\"-qq\"], plugins=[MyPlugin()]) Note \u8c03\u7528 pytest.main() \u4f1a\u5f15\u5165\u4f60\u7684\u6d4b\u8bd5\u6587\u4ef6\u4ee5\u53ca\u5176\u5f15\u7528\u7684\u6240\u6709\u6a21\u5757\u3002\u7531\u4e8e python \u5f15\u5165\u673a\u5236\u7684\u7f13\u5b58\u7279\u6027\uff0c\u5f53\u8fd9\u4e9b\u6587\u4ef6\u53d1\u751f\u53d8\u5316\u65f6\uff0c\u540e\u7eed\u518d\u8c03\u7528 pytest.main() \uff08\u5728\u540c\u4e00\u4e2a\u7a0b\u5e8f\u6267\u884c\u8fc7\u7a0b\u4e2d\uff09\u65f6\uff0c\u5e76\u4e0d\u4f1a\u54cd\u5e94\u8fd9\u4e9b\u6587\u4ef6\u7684\u53d8\u5316\u3002 \u57fa\u4e8e\u8fd9\u4e2a\u539f\u56e0\uff0c\u6211\u4eec\u4e0d\u63a8\u8350\u5728\u540c\u4e00\u4e2a\u7a0b\u5e8f\u4e2d\u591a\u6b21\u8c03\u7528 pytest.main() \uff08\u4f8b\u5982\uff1a\u4e3a\u4e86\u91cd\u65b0\u6267\u884c\u6d4b\u8bd5\uff1b\u5982\u679c\u4f60\u786e\u5b9e\u6709\u8fd9\u4e2a\u9700\u6c42\uff0c\u6216\u8bb8\u53ef\u4ee5\u8003\u8651 pytest-repeat \u63d2\u4ef6\uff09\uff1b","title":"\u4e8c\u3001\u4f7f\u7528\u548c\u8c03\u7528"},{"location":"zh-Hans-CN/%E4%BA%8C%E3%80%81%E4%BD%BF%E7%94%A8%E5%92%8C%E8%B0%83%E7%94%A8/#_1","text":"","title":"\u4f7f\u7528\u548c\u8c03\u7528"},{"location":"zh-Hans-CN/%E4%BA%8C%E3%80%81%E4%BD%BF%E7%94%A8%E5%92%8C%E8%B0%83%E7%94%A8/#python-m-pytest","text":"\u6211\u4eec\u53ef\u4ee5\u5728\u547d\u4ee4\u884c\u4e2d\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u6267\u884c\u6d4b\u8bd5\uff1a python -m pytest [...] \u4e0d\u8fc7\u8fd9\u4f1a\u5c06\u5f53\u524d\u8def\u5f84\u52a0\u5165\u5230 sys.path \u4e2d\uff0c\u9664\u6b64\u4e4b\u5916\u5b83\u4e0e pytest [...] \u7684\u6548\u679c\u4e00\u6837\u3002 Note python -m mod \u8868\u793a\u5c06\u6a21\u5757\uff08 mod \uff09\u4f5c\u4e3a\u811a\u672c\u6765\u8fd0\u884c\uff0c\u4f46\u662f\u6a21\u5757\u4e2d\u5fc5\u987b\u5305\u542b\u4e00\u4e2a __main__.py \u6587\u4ef6\u3002 pytest \u7684 __main__.py \u6587\u4ef6\u5185\u5bb9\u5982\u4e0b\uff1a \"\"\"The pytest entry point.\"\"\" import pytest if __name__ == \"__main__\": raise SystemExit(pytest.console_main())","title":"\u901a\u8fc7python -m pytest\u7684\u65b9\u5f0f\u6267\u884c\u6d4b\u8bd5"},{"location":"zh-Hans-CN/%E4%BA%8C%E3%80%81%E4%BD%BF%E7%94%A8%E5%92%8C%E8%B0%83%E7%94%A8/#_2","text":"\u6d4b\u8bd5\u6267\u884c\u7ed3\u675f\u540e\uff0cpytest \u53ef\u80fd\u4f1a\u8fd4\u56de\u4ee5\u4e0b\u516d\u79cd\u4e0d\u540c\u7684\u72b6\u6001\u7801\uff1a 0\uff08 OK \uff09\uff1a\u6536\u96c6\u5230\u7684\u6240\u6709\u7684\u6d4b\u8bd5\u7528\u4f8b\u5747\u6d4b\u8bd5\u6210\u529f\uff1b 1\uff08 TESTS_FAILED \uff09\uff1a\u6709\u7528\u4f8b\u6d4b\u8bd5\u5931\u8d25\uff1b 2\uff08 INTERRUPTED \uff09\uff1a\u6d4b\u8bd5\u6267\u884c\u8fc7\u7a0b\u88ab\u7528\u6237\u7ec8\u6b62\uff0c\u4f8b\u5982\uff1a CTRL + C \uff1b 3\uff08 INTERNAL_ERROR \uff09\uff1a\u6d4b\u8bd5\u6267\u884c\u8fc7\u7a0b\u4e2d\u53d1\u751f\u5185\u90e8\u9519\u8bef\uff1b 4\uff08 USAGE_ERROR \uff09\uff1apytest \u547d\u4ee4\u884c\u4f7f\u7528\u9519\u8bef\uff1b 5\uff08 NO_TESTS_COLLECTED \uff09\uff1a\u6ca1\u6709\u6536\u96c6\u5230\u4efb\u4f55\u6d4b\u8bd5\u7528\u4f8b\uff1b \u5b83\u4eec\u5c01\u88c5\u5728\u4e00\u4e2a\u679a\u4e3e\u7c7b\u4e2d\uff1a pytest.ExitCode \uff0c\u5e76\u4e14\u53ef\u4ee5\u88ab\u76f4\u63a5\u5f15\u5165\u548c\u8bbf\u95ee\uff1a from pytest import ExitCode Note \u5982\u679c\u4f60\u60f3\u5728\u67d0\u4e9b\u573a\u666f\u4e0b\u81ea\u5b9a\u4e49\u8fd4\u56de\u7684\u72b6\u6001\u7801\uff0c\u5c24\u5176\u662f\u5f53\u672a\u6536\u96c6\u5230\u4efb\u4f55\u6d4b\u8bd5\u7528\u4f8b\u65f6\uff0c\u53ef\u4ee5\u8003\u8651\u4f7f\u7528 pytest-custom_exit_code \u63d2\u4ef6\u3002","title":"\u6d4b\u8bd5\u7ed3\u675f\u65f6\u53ef\u80fd\u8fd4\u56de\u7684\u72b6\u6001\u7801"},{"location":"zh-Hans-CN/%E4%BA%8C%E3%80%81%E4%BD%BF%E7%94%A8%E5%92%8C%E8%B0%83%E7%94%A8/#_3","text":"# \u663e\u793a pytest \u7684\u7248\u672c\u4fe1\u606f $ pytest --version # \u663e\u793a\u6240\u6709\u53ef\u7528\u7684 fixture $ pytest --fixtures # \u663e\u793a\u547d\u4ee4\u884c\u7684\u5e2e\u52a9\u4fe1\u606f\u548c\u914d\u7f6e\u6587\u4ef6\u7684\u9009\u9879 $ pytest -h | --help \u6240\u6709\u53ef\u7528\u7684\u547d\u4ee4\u884c\u9009\u9879\u53ef\u4ee5\u53c2\u770b\uff1a https://docs.pytest.org/en/6.1.1/reference.html#command-line-flags","title":"\u83b7\u53d6\u5e2e\u52a9\u4fe1\u606f"},{"location":"zh-Hans-CN/%E4%BA%8C%E3%80%81%E4%BD%BF%E7%94%A8%E5%92%8C%E8%B0%83%E7%94%A8/#n","text":"# \u9047\u5230\u7b2c\u4e00\u4e2a\u5931\u8d25\u7684\u6d4b\u8bd5\u7528\u4f8b\u65f6\u9000\u51fa $ pytest -x | --exitfirst # \u9047\u5230\u7b2c\u4e8c\u4e2a\u5931\u8d25\u7684\u6d4b\u8bd5\u7528\u4f8b\u65f6\u9000\u51fa $ pytest --maxfail=2","title":"\u5728\u7b2c\u4e00\u4e2a\uff08N\u4e2a\uff09\u6d4b\u8bd5\u7528\u4f8b\u5931\u8d25\u65f6\u9000\u51fa"},{"location":"zh-Hans-CN/%E4%BA%8C%E3%80%81%E4%BD%BF%E7%94%A8%E5%92%8C%E8%B0%83%E7%94%A8/#_4","text":"pytest \u652f\u6301\u591a\u79cd\u65b9\u5f0f\u4ece\u547d\u4ee4\u884c\u6267\u884c\u6307\u5b9a\u7684\u6d4b\u8bd5\u7528\u4f8b\u3002","title":"\u6267\u884c\u6307\u5b9a\u7684\u6d4b\u8bd5\u7528\u4f8b"},{"location":"zh-Hans-CN/%E4%BA%8C%E3%80%81%E4%BD%BF%E7%94%A8%E5%92%8C%E8%B0%83%E7%94%A8/#_5","text":"$ pytest test_mod.py","title":"\u6267\u884c\u6307\u5b9a\u6a21\u5757\u4e2d\u7684\u6d4b\u8bd5\u7528\u4f8b"},{"location":"zh-Hans-CN/%E4%BA%8C%E3%80%81%E4%BD%BF%E7%94%A8%E5%92%8C%E8%B0%83%E7%94%A8/#_6","text":"$ pytest testing/","title":"\u6267\u884c\u6307\u5b9a\u76ee\u5f55\u4e0b\u6240\u6709\u7684\u6d4b\u8bd5\u7528\u4f8b"},{"location":"zh-Hans-CN/%E4%BA%8C%E3%80%81%E4%BD%BF%E7%94%A8%E5%92%8C%E8%B0%83%E7%94%A8/#_7","text":"$ pytest -k \"MyClass and not method\" \u8fd9\u5c06\u6267\u884c\u6d4b\u8bd5\u6a21\u5757\u540d\u3001\u7c7b\u540d\u6216\u8005\u51fd\u6570\u540d\u5339\u914d\u6307\u5b9a\u5173\u952e\u5b57\u7684\u6d4b\u8bd5\u7528\u4f8b\uff08\u4e0d\u533a\u5206\u5927\u5c0f\u5199\uff09\u3002\u4f8b\u5982\uff0c\u4e0a\u8ff0\u4f8b\u5b50\u4f1a\u6267\u884c TestMyClass.test_something \uff0c\u800c\u4e0d\u4f1a\u6267\u884c TestMyClass.test_method_simple \u3002","title":"\u6267\u884c\u5339\u914d\u6307\u5b9a\u5173\u952e\u5b57\u7684\u6d4b\u8bd5\u7528\u4f8b"},{"location":"zh-Hans-CN/%E4%BA%8C%E3%80%81%E4%BD%BF%E7%94%A8%E5%92%8C%E8%B0%83%E7%94%A8/#nodeid","text":"pytest \u4e3a\u6bcf\u4e00\u4e2a\u6536\u96c6\u5230\u7684\u6d4b\u8bd5\u7528\u4f8b\u6307\u5b9a\u4e00\u4e2a\u552f\u4e00\u7684 nodeid \uff0c\u5b83\u7531 \u6a21\u5757\u540d \u548c \u8bf4\u660e\u7b26 \u6784\u6210\uff0c\u4ee5 :: \u95f4\u9694\uff0c\u5176\u4e2d\u8bf4\u660e\u7b26\u53ef\u4ee5\u5305\u542b\u7c7b\u540d\u3001\u51fd\u6570\u540d\u548c\u7531 parametrize \u6807\u8bb0\u8d4b\u4e88\u7684\u53c2\u6570\u3002 \u6211\u4eec\u6765\u770b\u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50\uff0c\u8fd9\u91cc\u6709\u4e09\u4e2a\u6d4b\u8bd5\u7528\u4f8b\uff0c\u5206\u522b\u5bf9\u5e94\u4e0d\u540c\u7684 \u8bf4\u660e\u7b26 \uff1a # src/chapter-2/test_nodeid.py import pytest def test_one(): pass class TestNodeid: def test_one(self): pass @pytest.mark.parametrize(\"x,y\", [(1, 2), (3, 4)]) def test_two(self, x, y): assert x + 1 == y \u6307\u5b9a \u51fd\u6570\u540d \uff1a $ pipenv run pytest src/chapter-2/test_nodeid.py::test_one --collect-only ================================ test session starts ================================= platform darwin -- Python 3.8.4, pytest-6.1.1, py-1.9.0, pluggy-0.13.1 rootdir: /Users/yaomeng/Private/projects/pytest-chinese-doc collected 1 item <Module src/chapter-2/test_nodeid.py> <Function test_one> =============================== no tests ran in 0.01s ================================ \u6307\u5b9a \u7c7b\u540d+\u51fd\u6570\u540d \uff1a $ pipenv run pytest src/chapter-2/test_nodeid.py::TestNodeid::test_one --collect-only ================================ test session starts ================================= platform darwin -- Python 3.8.4, pytest-6.1.1, py-1.9.0, pluggy-0.13.1 rootdir: /Users/yaomeng/Private/projects/pytest-chinese-doc collected 1 item <Module src/chapter-2/test_nodeid.py> <Class TestNodeid> <Function test_one> =============================== no tests ran in 0.01s ================================ \u6307\u5b9a \u7531 parametrize \u6807\u8bb0\u8d4b\u4e88\u7684\u53c2\u6570 \uff1a $ pipenv run pytest src/chapter-2/test_nodeid.py::TestNodeid::test_two[1-2] --collect-only ================================ test session starts ================================= platform darwin -- Python 3.8.4, pytest-6.1.1, py-1.9.0, pluggy-0.13.1 rootdir: /Users/yaomeng/Private/projects/pytest-chinese-doc collecting ... nodeid src/chapter-2/test_nodeid.py::TestNodeid::test_two[1-2] collected 1 item <Module src/chapter-2/test_nodeid.py> <Class TestNodeid> <Function test_two[1-2]> =============================== no tests ran in 0.01s ================================ \u8fd9\u91cc\u6307\u5b9a\u53c2\u6570 x \u3001 y \u7684\u5f62\u5f0f\u662f [1-1] \uff0c\u4e2d\u95f4\u4ee5 - \u95f4\u9694\uff0c\u5e76\u4e14\u53ea\u80fd\u4e3a [1-1] \u6216\u8005 [3-4] \u3002 Attention \u4e0a\u8ff0\u65b9\u5f0f\u5e76\u672a\u771f\u6b63\u6267\u884c\u8fd9\u4e9b\u6d4b\u8bd5\u7528\u4f8b\uff0c\u53ea\u662f\u901a\u8fc7 --collect-only \u5c55\u793a\u8fc7\u6ee4\u540e\u6536\u96c6\u5230\u7684\u6d4b\u8bd5\u7528\u4f8b\u3002 Note \u6211\u4eec\u4e5f\u53ef\u4ee5\u4f7f\u7528\u4e0a\u9762\u4ecb\u7ecd\u7684\u547d\u4ee4\u884c\u9009\u9879 -k \u8fbe\u5230\u540c\u6837\u7684\u6548\u679c\uff0c\u4f8b\u5982\uff1a\u6267\u884c test_nodeid.py::test_one \u6d4b\u8bd5\u7528\u4f8b\uff1a $ pipenv run pytest -k \"test_one and not testnodeid\" src/chapter-2/test_nodeid.py --collect-only ================================ test session starts ================================= platform darwin -- Python 3.8.4, pytest-6.1.1, py-1.9.0, pluggy-0.13.1 rootdir: /Users/yaomeng/Private/projects/pytest-chinese-doc collected 4 items / 3 deselected / 1 selected <Module src/chapter-2/test_nodeid.py> <Function test_one> =============================== 3 deselected in 0.01s ================================ \u8fd9\u548c\u4e0a\u9762\u7684 pipenv run pytest src/chapter-2/test_nodeid.py::test_one --collect-only \u6548\u679c\u662f\u4e00\u6837\u7684\u3002","title":"\u6267\u884c\u6307\u5b9anodeid\u7684\u6d4b\u8bd5\u7528\u4f8b"},{"location":"zh-Hans-CN/%E4%BA%8C%E3%80%81%E4%BD%BF%E7%94%A8%E5%92%8C%E8%B0%83%E7%94%A8/#_8","text":"$ pytest -m slow \u8fd9\u4f1a\u6267\u884c\u6240\u6709\u7531 @pytest.mark.slow \u6807\u8bb0\u7684\u6d4b\u8bd5\u7528\u4f8b\u3002 \u66f4\u591a\u8be6\u7ec6\u7684\u4fe1\u606f\u53ef\u4ee5\u53c2\u8003\uff1a https://docs.pytest.org/en/6.1.1/mark.html#mark","title":"\u6267\u884c\u6307\u5b9a\u6807\u8bb0\u7684\u6d4b\u8bd5\u7528\u4f8b"},{"location":"zh-Hans-CN/%E4%BA%8C%E3%80%81%E4%BD%BF%E7%94%A8%E5%92%8C%E8%B0%83%E7%94%A8/#_9","text":"$ pytest --pyargs pkg.testing","title":"\u6267\u884c\u6307\u5b9a\u5305\u4e2d\u7684\u6d4b\u8bd5\u7528\u4f8b"},{"location":"zh-Hans-CN/%E4%BA%8C%E3%80%81%E4%BD%BF%E7%94%A8%E5%92%8C%E8%B0%83%E7%94%A8/#_10","text":"# \u5728\u56de\u6eaf\u4fe1\u606f\u4e2d\u663e\u793a\u5c40\u90e8\u53d8\u91cf $ pytest -l | --showlocals # \u9ed8\u8ba4\u7684\u6a21\u5f0f $ pytest --tb=auto # \u8be6\u7ec6\u7684\u8f93\u51fa $ pytest --tb=long # \u7cbe\u7b80\u7684\u8f93\u51fa $ pytest --tb=short # \u6bcf\u4e2a\u5931\u8d25\u4fe1\u606f\u603b\u7ed3\u5728\u4e00\u884c\u4e2d $ pytest --tb=line # python \u7684\u6807\u51c6\u6a21\u5f0f $ pytest --tb=native # \u4e0d\u6253\u5370\u56de\u6eaf\u4fe1\u606f $ pytest --tb=no \u4f7f\u7528 --full-trace \u6807\u8bb0\u4f1a\u5f97\u5230\u66f4\u8be6\u7ec6\u7684\u56de\u6eaf\u4fe1\u606f\uff08\u6bd4 --tb=long \u8fd8\u8981\u8be6\u7ec6\uff09\uff0c\u5e76\u4e14\u5b83\u751a\u81f3\u4f1a\u6293\u53d6\u7528\u6237\u5f3a\u5236\u6253\u65ad\u6d4b\u8bd5\u6267\u884c\u65f6\u7684\u56de\u6eaf\u4fe1\u606f\uff08 CTRL + C \uff09\u3002\u8fd9\u5728\u67d0\u4e9b\u573a\u666f\u975e\u5e38\u6709\u7528\uff0c\u5f53\u4f60\u7684\u6d4b\u8bd5\u957f\u65f6\u95f4\u6302\u6b7b\u5728\u67d0\u4e00\u6b65\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 CTRL + C \u9000\u51fa\u6267\u884c\u6765\u5b9a\u4f4d\u95ee\u9898\u3002","title":"\u4fee\u6539\u56de\u6eaf\u4fe1\u606f\u7684\u8f93\u51fa\u6a21\u5f0f"},{"location":"zh-Hans-CN/%E4%BA%8C%E3%80%81%E4%BD%BF%E7%94%A8%E5%92%8C%E8%B0%83%E7%94%A8/#_11","text":"\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u547d\u4ee4\u884c\u9009\u9879 -r \u5728\u6267\u884c\u7ed3\u675f\u540e\uff0c\u6253\u5370\u4e00\u4e2a\u603b\u7ed3\u62a5\u544a\u3002 \u4f8b\u5982\uff0c\u6211\u4eec\u6709\u4ee5\u4e0b\u6d4b\u8bd5\u6a21\u5757\uff1a # src/chapter-2/test_report.py import pytest @pytest.fixture def error_fixture(): assert 0 def test_ok(): print(\"ok\") def test_fail(): assert 0 def test_error(error_fixture): pass def test_skip(): pytest.skip(\"skipping this test\") def test_xfail(): pytest.xfail(\"xfailing this test\") @pytest.mark.xfail(reason=\"always xfail\") def test_xpass(): pass \u73b0\u5728\uff0c\u6211\u4eec\u60f3\u5728\u6d4b\u8bd5\u7ed3\u675f\u540e\uff0c\u5c55\u793a\u6240\u6709 \u6ca1\u6709\u6d4b\u8bd5\u6210\u529f \u7684\u6d4b\u8bd5\u7528\u4f8b\u7684\u62a5\u544a\uff1a pipenv run pytest -q -ra src/chapter-2/test_report.py .FEsxX [100%] ======================================= ERRORS ======================================= ____________________________ ERROR at setup of test_error ____________________________ @pytest.fixture def error_fixture(): > assert 0 E assert 0 src/chapter-2/test_report.py:6: AssertionError ====================================== FAILURES ====================================== _____________________________________ test_fail ______________________________________ def test_fail(): > assert 0 E assert 0 src/chapter-2/test_report.py:14: AssertionError ============================== short test summary info =============================== SKIPPED [1] src/chapter-2/test_report.py:22: skipping this test XFAIL src/chapter-2/test_report.py::test_xfail reason: xfailing this test XPASS src/chapter-2/test_report.py::test_xpass always xfail ERROR src/chapter-2/test_report.py::test_error - assert 0 FAILED src/chapter-2/test_report.py::test_fail - assert 0 1 failed, 1 passed, 1 skipped, 1 xfailed, 1 xpassed, 1 error in 0.06s \u6211\u4eec\u53ef\u4ee5\u770b\u5230\u5728 short test summary info \u7684\u533a\u57df\u4e2d\uff0c\u62a5\u544a\u5c55\u793a\u4e86 SKIPPED \u3001 XFAIL \u3001 XPASS \u3001 ERROR \u548c FAILED \u7684\u6d4b\u8bd5\u7528\u4f8b\uff0c\u552f\u72ec\u6ca1\u6709\u5c55\u793a PASSED \u7684\u6d4b\u8bd5\u7528\u4f8b\u3002 -r \u53ef\u4ee5\u5728\u5b83\u7684\u540e\u9762\u7d27\u63a5\u7740\u4e00\u4e2a\u6216\u8005\u591a\u4e2a\u5b57\u7b26\uff0c\u7528\u4e8e\u6307\u5b9a\u60f3\u8981\u663e\u793a\u7684\u6d4b\u8bd5\u7528\u4f8b\uff0c\u9ed8\u8ba4\u662f fE \uff0c\u8868\u793a\u603b\u7ed3\u62a5\u544a\u53ea\u4f1a\u663e\u793a\u5931\u8d25\u7684\u548c\u53d1\u751f\u9519\u8bef\u7684\u6d4b\u8bd5\u7528\u4f8b\u3002 \u6240\u6709\u6709\u6548\u7684\u5b57\u7b26\u53c2\u6570\u5982\u4e0b\uff1a f \uff1a\u5931\u8d25\u7684\uff1b E \uff1a\u53d1\u751f\u9519\u8bef\u7684\uff1b s \uff1a\u88ab\u8df3\u8fc7\u7684\uff1b x \uff1a\u7ed3\u679c\u4e3a xfailed \u7684\uff1b p \uff1a\u6210\u529f\u7684\uff1b P \uff1a\u6210\u529f\u7684\uff0c\u5e76\u4e14\u6709\u8f93\u51fa\u4fe1\u606f\u7684\u3002\u5373\u6d4b\u8bd5\u7528\u4f8b\u4e2d\u5305\u542b print \u7b49\u884c\u4e3a\u7684\uff1b \u4ee5\u53ca\u4e00\u4e9b\u7279\u6b8a\u7684\u5b57\u7b26\u53c2\u6570\uff1a a \uff1a\u6240\u6709\u7684\uff0c\u4f46\u662f\u9664\u4e86 pP \u7684\uff1b A \uff1a\u6240\u6709\u7684\uff1b N \uff1a\u56e0\u4e3a\u9ed8\u8ba4\u503c\u662f fE \uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5b83\u53bb\u4e0d\u6253\u5370\u6d4b\u8bd5\u62a5\u544a\uff1b \u4e0a\u8ff0\u5b57\u7b26\u53c2\u6570\u4e5f\u53ef\u4ee5\u53e0\u52a0\u4f7f\u7528\uff0c\u4f8b\u5982\uff1a\u6211\u4eec\u671f\u671b\u8fc7\u6ee4\u51fa\u5931\u8d25\u7684\u548c\u672a\u6267\u884c\u7684\uff1a $ pytest -rfs","title":"\u8be6\u7ec6\u7684\u603b\u7ed3\u62a5\u544a"},{"location":"zh-Hans-CN/%E4%BA%8C%E3%80%81%E4%BD%BF%E7%94%A8%E5%92%8C%E8%B0%83%E7%94%A8/#pdbpython-debugger","text":"PDB \u662f python \u5185\u5efa\u7684\u8bca\u65ad\u5668\uff0cpytest \u5141\u8bb8\u901a\u8fc7\u4ee5\u4e0b\u547d\u4ee4\u5728\u6267\u884c\u5931\u8d25\u65f6\u8fdb\u5165\u8fd9\u4e2a\u8bca\u65ad\u5668\u6a21\u5f0f\uff1a $ pytest --pdb pytest \u4f1a\u5728 \u6bcf\u4e2a\u6d4b\u8bd5\u7528\u4f8b \u5931\u8d25\uff08\u6216\u8005 Ctrl+C \uff09\u65f6\uff0c\u8c03\u7528\u8fd9\u4e2a\u8bca\u65ad\u5668\u3002\u5982\u679c\u4f60\u53ea\u60f3\u5728\u7b2c\u4e00\u6b21\u5931\u8d25\u65f6\uff0c\u8c03\u7528\u8fd9\u4e2a\u8bca\u65ad\u5668\uff0c\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u547d\u4ee4\uff1a # \u9047\u5230\u7b2c\u4e00\u4e2a\u5931\u8d25\u65f6\uff0c\u8c03\u7528 PDB \u73af\u5883\uff0c\u7136\u540e\u9000\u51fa\u6574\u4e2a\u6267\u884c\u8fc7\u7a0b $ pytest -x --pdb # \u53ea\u6709\u524d\u4e09\u4e2a\u5931\u8d25\u7528\u4f8b\u8c03\u7528 PDB \u73af\u5883 $ pytest --pdb --maxfail=3 sys.last_value \u3001 sys.last_type \u548c sys.last_traceback \u5b58\u50a8\u4e86\u53d1\u751f\u5f02\u5e38\u65f6\u4fe1\u606f\uff0c\u6211\u4eec\u53ef\u4ee5\u5728 PDB \u73af\u5883\u4e2d\u8bbf\u95ee\u5b83\u4eec\u3002 \u6211\u4eec\u6765\u770b\u4e0b\u9762\u8fd9\u4e2a\u6d4b\u8bd5\u7528\u4f8b\uff1a # src/chapter-2/test_pdb.py def test_pdb(): x = 0 assert x \u6267\u884c\u6d4b\u8bd5\u7528\u4f8b\uff08 --pdb \uff09\uff1a $ pipenv run pytest src/chapter-2/test_pdb.py --pdb ================================ test session starts ================================= platform darwin -- Python 3.8.4, pytest-6.1.1, py-1.9.0, pluggy-0.13.1 rootdir: /Users/yaomeng/Private/projects/pytest-chinese-doc collected 1 item src/chapter-2/test_pdb.py F >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> traceback >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> def test_pdb(): x = 0 > assert x E assert 0 src/chapter-2/test_pdb.py:3: AssertionError >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> entering PDB >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> >>>>>>>>>>>>>>>>>>>>> PDB post_mortem (IO-capturing turned off) >>>>>>>>>>>>>>>>>>>>>> > /Users/yaomeng/Private/projects/pytest-chinese-doc/src/chapter-2/test_pdb.py(3)test_pdb() -> assert x # \u9700\u8981\u5148\u5f15\u5165 sys \u6a21\u5757 (Pdb) import sys (Pdb) sys.last_value AssertionError('assert 0') (Pdb) sys.last_type <class 'AssertionError'> # \u4f7f\u7528 exit \u9000\u51fa PDB \u73af\u5883\uff0c\u4f7f\u7528 continue \u7ee7\u7eed\u6267\u884c\u4e0b\u9762\u7684\u6b65\u9aa4 (Pdb) exit ============================== short test summary info =============================== FAILED src/chapter-2/test_pdb.py::test_pdb - assert 0 !!!!!!!!!!!!!!!!!!!!!! _pytest.outcomes.Exit: Quitting debugger !!!!!!!!!!!!!!!!!!!!!! ================================= 1 failed in 27.67s =================================","title":"\u5931\u8d25\u65f6\u52a0\u8f7dPDB\uff08Python Debugger\uff09\u73af\u5883"},{"location":"zh-Hans-CN/%E4%BA%8C%E3%80%81%E4%BD%BF%E7%94%A8%E5%92%8C%E8%B0%83%E7%94%A8/#pdb","text":"\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u547d\u4ee4\uff0c\u5728 \u6bcf\u4e2a\u6d4b\u8bd5\u7528\u4f8b \u5f00\u59cb\u65f6\uff0c\u90fd\u5148\u52a0\u8f7d PDB \u73af\u5883\uff1a $ pytest --trace","title":"\u5f00\u59cb\u6267\u884c\u65f6\u5c31\u52a0\u8f7dPDB\u73af\u5883"},{"location":"zh-Hans-CN/%E4%BA%8C%E3%80%81%E4%BD%BF%E7%94%A8%E5%92%8C%E8%B0%83%E7%94%A8/#_12","text":"\u5728\u6d4b\u8bd5\u7528\u4f8b\u4ee3\u7801\u4e2d\u6dfb\u52a0 import pdb;pdb.set_trace() \uff0c\u5f53\u5176\u88ab\u8c03\u7528\u65f6\uff0c pytest \u4f1a\u505c\u6b62\u8fd9\u6761\u7528\u4f8b\u7684\u8f93\u51fa\uff1a \u5176\u4ed6\u7528\u4f8b\u4e0d\u53d7\u5f71\u54cd\uff1b \u901a\u8fc7 continue \u547d\u4ee4\uff0c\u53ef\u4ee5\u9000\u51fa PDB \u73af\u5883\uff0c\u5e76\u7ee7\u7eed\u6267\u884c\u7528\u4f8b\uff1b","title":"\u8bbe\u7f6e\u65ad\u70b9"},{"location":"zh-Hans-CN/%E4%BA%8C%E3%80%81%E4%BD%BF%E7%94%A8%E5%92%8C%E8%B0%83%E7%94%A8/#_13","text":"python 3.7 \u5f00\u59cb\u65b0\u52a0\u4e86\u4e00\u4e2a\u5185\u7f6e breakpoint() \u51fd\u6570\u3002pytest \u652f\u6301\u4ee5\u4e0b\u4f7f\u7528\u884c\u4e3a\uff1a \u5f53 breakpoint() \u88ab\u8c03\u7528\uff0c\u5e76\u4e14 PYTHONBREAKPOINT \u4e3a None \u65f6\uff0c pytest \u4f1a\u4f7f\u7528\u81ea\u5b9a\u4e49\u7684 PDB \u4ee3\u66ff\u7cfb\u7edf\u7684\uff1b \u6d4b\u8bd5\u6267\u884c\u7ed3\u675f\u65f6\uff0c\u81ea\u52a8\u5207\u56de\u7cfb\u7edf\u81ea\u5e26\u7684 PDB \uff1b \u5f53\u52a0\u4e0a --pdb \u9009\u9879\u65f6\uff0c breakpoint() \u548c\u6d4b\u8bd5\u53d1\u751f\u9519\u8bef\u65f6\uff0c\u90fd\u4f1a\u8c03\u7528\u5185\u90e8\u81ea\u5b9a\u4e49\u7684 PDB \uff1b --pdbcls \u9009\u9879\u5141\u8bb8\u6307\u5b9a\u4e00\u4e2a\u7528\u6237\u81ea\u5b9a\u4e49\u7684 PDB \u7c7b\uff1b Note \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 --pdbcls=IPython.terminal.debugger:TerminalPdb \u9009\u9879\u6307\u5b9a ipython \u4e3a\u6211\u4eec\u7684 PDB \u8c03\u8bd5\u73af\u5883\uff1a $ pipenv run pytest src/chapter-2/test_pdb.py --pdbcls=IPython.terminal.debugger:TerminalPdb --pdb ================================ test session starts ================================= platform darwin -- Python 3.8.4, pytest-6.1.1, py-1.9.0, pluggy-0.13.1 rootdir: /Users/yaomeng/Private/projects/pytest-chinese-doc collected 1 item src/chapter-2/test_pdb.py F >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> traceback >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> def test_pdb(): x = 0 > assert x E assert 0 src/chapter-2/test_pdb.py:3: AssertionError >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> entering PDB >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> >>>>>>>>>>>>>>>>>>>>> PDB post_mortem (IO-capturing turned off) >>>>>>>>>>>>>>>>>>>>>> > /Users/yaomeng/Private/projects/pytest-chinese-doc/src/chapter-2/test_pdb.py(3)test_pdb() 1 def test_pdb(): 2 x = 0 ----> 3 assert x ipdb> import sys ipdb> sys.last_type <class 'AssertionError'> ipdb> exit ============================== short test summary info =============================== FAILED src/chapter-2/test_pdb.py::test_pdb - assert 0 !!!!!!!!!!!!!!!!!!!!!! _pytest.outcomes.Exit: Quitting debugger !!!!!!!!!!!!!!!!!!!!!! ================================= 1 failed in 19.02s =================================","title":"\u4f7f\u7528\u5185\u7f6e\u7684\u4e2d\u65ad\u51fd\u6570"},{"location":"zh-Hans-CN/%E4%BA%8C%E3%80%81%E4%BD%BF%E7%94%A8%E5%92%8C%E8%B0%83%E7%94%A8/#_14","text":"Attention pytest 6.0 \u7248\u672c\u5f00\u59cb\u4f7f\u7528\u65b0\u7684\u884c\u4e3a \u5217\u51fa\u6267\u884c\u65f6\u95f4\u8d85\u8fc71\u79d2\uff0c\u6700\u6162\u768410\u4e2a\u6d4b\u8bd5\u7528\u4f8b\uff1a $ pytest --durations=10 --durations-min=1.0 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cpytest \u4e0d\u4f1a\u5217\u51fa\u6267\u884c\u65f6\u957f\u5c0f\u4e8e 0.005 \u79d2\u7684\u6d4b\u8bd5\u7528\u4f8b\uff0c\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u6dfb\u52a0 -vv \u9009\u9879\u6765\u540c\u65f6\u67e5\u770b\u5b83\u4eec\u3002","title":"\u5206\u6790\u6d4b\u8bd5\u6267\u884c\u65f6\u957f"},{"location":"zh-Hans-CN/%E4%BA%8C%E3%80%81%E4%BD%BF%E7%94%A8%E5%92%8C%E8%B0%83%E7%94%A8/#_15","text":"Attention pytest 5.0 \u7248\u672c\u65b0\u589e\u7279\u6027 \u5728\u6d4b\u8bd5\u6267\u884c\u4e2d\u53d1\u751f\u6bb5\u9519\u8bef\u6216\u8005\u8d85\u65f6\u7684\u60c5\u51b5\u4e0b\uff0c faulthandler \u6807\u51c6\u6a21\u5757\u53ef\u4ee5\u8f6c\u50a8 python \u7684\u56de\u6eaf\u4fe1\u606f\u3002 \u5b83\u5728 pytest \u7684\u6267\u884c\u4e2d\u9ed8\u8ba4\u6253\u5f00\uff0c\u9664\u975e\u4f7f\u7528 -p no:faulthandler \u547d\u4ee4\u884c\u9009\u9879\u5173\u95ed\u5b83\u3002 \u540c\u6837\uff0c faulthandler_timeout=X \u914d\u7f6e\u9879\uff0c\u53ef\u7528\u4e8e\u5f53\u6d4b\u8bd5\u7528\u4f8b\u7684\u5b8c\u6210\u65f6\u95f4\u8d85\u8fc7 X \u79d2\u65f6\uff0c\u8f6c\u50a8\u6240\u6709\u7ebf\u7a0b\u7684 python \u56de\u6eaf\u4fe1\u606f\uff1a # src/chapter-2/pytest.ini [pytest] faulthandler_timeout=5 \u6211\u4eec\u6709\u5982\u4e0b\u6d4b\u8bd5\u7528\u4f8b\uff1a # src/chapter-2/test_fault_handler.py import time def test_faulthandler(): time.sleep(7) \u6267\u884c\u6d4b\u8bd5\u7528\u4f8b\uff1a $ pipenv run pytest -q src/chapter-2/test_faulthandler.py Timeout (0:00:05)! Thread 0x000000010f0505c0 (most recent call first): File \"/Users/yaomeng/Private/projects/pytest-chinese-doc/src/chapter-2/test_faulthandler.py\", line 5 in test_faulthandler File \"/Users/yaomeng/.local/share/virtualenvs/pytest-chinese-doc-DA9roatD/lib/python3.8/site-packages/_pytest/python.py\", line 184 in pytest_pyfunc_call File \"/Users/yaomeng/.local/share/virtualenvs/pytest-chinese-doc-DA9roatD/lib/python3.8/site-packages/pluggy/callers.py\", line 187 in _multicall File \"/Users/yaomeng/.local/share/virtualenvs/pytest-chinese-doc-DA9roatD/lib/python3.8/site-packages/pluggy/manager.py\", line 84 in <lambda> File \"/Users/yaomeng/.local/share/virtualenvs/pytest-chinese-doc-DA9roatD/lib/python3.8/site-packages/pluggy/manager.py\", line 93 in _hookexec File \"/Users/yaomeng/.local/share/virtualenvs/pytest-chinese-doc-DA9roatD/lib/python3.8/site-packages/pluggy/hooks.py\", line 286 in __call__ File \"/Users/yaomeng/.local/share/virtualenvs/pytest-chinese-doc-DA9roatD/lib/python3.8/site-packages/_pytest/python.py\", line 1627 in runtest File \"/Users/yaomeng/.local/share/virtualenvs/pytest-chinese-doc-DA9roatD/lib/python3.8/site-packages/_pytest/runner.py\", line 163 in pytest_runtest_call File \"/Users/yaomeng/.local/share/virtualenvs/pytest-chinese-doc-DA9roatD/lib/python3.8/site-packages/pluggy/callers.py\", line 187 in _multicall File \"/Users/yaomeng/.local/share/virtualenvs/pytest-chinese-doc-DA9roatD/lib/python3.8/site-packages/pluggy/manager.py\", line 84 in <lambda> File \"/Users/yaomeng/.local/share/virtualenvs/pytest-chinese-doc-DA9roatD/lib/python3.8/site-packages/pluggy/manager.py\", line 93 in _hookexec File \"/Users/yaomeng/.local/share/virtualenvs/pytest-chinese-doc-DA9roatD/lib/python3.8/site-packages/pluggy/hooks.py\", line 286 in __call__ File \"/Users/yaomeng/.local/share/virtualenvs/pytest-chinese-doc-DA9roatD/lib/python3.8/site-packages/_pytest/runner.py\", line 256 in <lambda> File \"/Users/yaomeng/.local/share/virtualenvs/pytest-chinese-doc-DA9roatD/lib/python3.8/site-packages/_pytest/runner.py\", line 310 in from_call File \"/Users/yaomeng/.local/share/virtualenvs/pytest-chinese-doc-DA9roatD/lib/python3.8/site-packages/_pytest/runner.py\", line 255 in call_runtest_hook File \"/Users/yaomeng/.local/share/virtualenvs/pytest-chinese-doc-DA9roatD/lib/python3.8/site-packages/_pytest/runner.py\", line 216 in call_and_report File \"/Users/yaomeng/.local/share/virtualenvs/pytest-chinese-doc-DA9roatD/lib/python3.8/site-packages/_pytest/runner.py\", line 127 in runtestprotocol File \"/Users/yaomeng/.local/share/virtualenvs/pytest-chinese-doc-DA9roatD/lib/python3.8/site-packages/_pytest/runner.py\", line 110 in pytest_runtest_protocol File \"/Users/yaomeng/.local/share/virtualenvs/pytest-chinese-doc-DA9roatD/lib/python3.8/site-packages/pluggy/callers.py\", line 187 in _multicall File \"/Users/yaomeng/.local/share/virtualenvs/pytest-chinese-doc-DA9roatD/lib/python3.8/site-packages/pluggy/manager.py\", line 84 in <lambda> File \"/Users/yaomeng/.local/share/virtualenvs/pytest-chinese-doc-DA9roatD/lib/python3.8/site-packages/pluggy/manager.py\", line 93 in _hookexec File \"/Users/yaomeng/.local/share/virtualenvs/pytest-chinese-doc-DA9roatD/lib/python3.8/site-packages/pluggy/hooks.py\", line 286 in __call__ File \"/Users/yaomeng/.local/share/virtualenvs/pytest-chinese-doc-DA9roatD/lib/python3.8/site-packages/_pytest/main.py\", line 338 in pytest_runtestloop File \"/Users/yaomeng/.local/share/virtualenvs/pytest-chinese-doc-DA9roatD/lib/python3.8/site-packages/pluggy/callers.py\", line 187 in _multicall File \"/Users/yaomeng/.local/share/virtualenvs/pytest-chinese-doc-DA9roatD/lib/python3.8/site-packages/pluggy/manager.py\", line 84 in <lambda> File \"/Users/yaomeng/.local/share/virtualenvs/pytest-chinese-doc-DA9roatD/lib/python3.8/site-packages/pluggy/manager.py\", line 93 in _hookexec File \"/Users/yaomeng/.local/share/virtualenvs/pytest-chinese-doc-DA9roatD/lib/python3.8/site-packages/pluggy/hooks.py\", line 286 in __call__ File \"/Users/yaomeng/.local/share/virtualenvs/pytest-chinese-doc-DA9roatD/lib/python3.8/site-packages/_pytest/main.py\", line 313 in _main File \"/Users/yaomeng/.local/share/virtualenvs/pytest-chinese-doc-DA9roatD/lib/python3.8/site-packages/_pytest/main.py\", line 257 in wrap_session File \"/Users/yaomeng/.local/share/virtualenvs/pytest-chinese-doc-DA9roatD/lib/python3.8/site-packages/_pytest/main.py\", line 306 in pytest_cmdline_main File \"/Users/yaomeng/.local/share/virtualenvs/pytest-chinese-doc-DA9roatD/lib/python3.8/site-packages/pluggy/callers.py\", line 187 in _multicall File \"/Users/yaomeng/.local/share/virtualenvs/pytest-chinese-doc-DA9roatD/lib/python3.8/site-packages/pluggy/manager.py\", line 84 in <lambda> File \"/Users/yaomeng/.local/share/virtualenvs/pytest-chinese-doc-DA9roatD/lib/python3.8/site-packages/pluggy/manager.py\", line 93 in _hookexec File \"/Users/yaomeng/.local/share/virtualenvs/pytest-chinese-doc-DA9roatD/lib/python3.8/site-packages/pluggy/hooks.py\", line 286 in __call__ File \"/Users/yaomeng/.local/share/virtualenvs/pytest-chinese-doc-DA9roatD/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 164 in main File \"/Users/yaomeng/.local/share/virtualenvs/pytest-chinese-doc-DA9roatD/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 187 in console_main File \"/Users/yaomeng/.local/share/virtualenvs/pytest-chinese-doc-DA9roatD/bin/pytest\", line 8 in <module> . [100%] 1 passed in 6.02s \u53ef\u4ee5\u770b\u5230\uff0c\u5728\u6267\u884c\u521a\u8d85\u8fc75\u79d2\u7684\u65f6\u5019\u4f1a\u6253\u5370\u51fa\u56de\u6eaf\u4fe1\u606f\uff0c\u4f46\u4e0d\u4f1a\u4e2d\u65ad\u6d4b\u8bd5\u7684\u6267\u884c\uff1b \u5173\u95ed faulthandler \u63d2\u4ef6\u518d\u6b21\u6267\u884c\u8fd9\u4e2a\u6d4b\u8bd5\u7528\u4f8b\uff1a pipenv run pytest -q src/chapter-2/test_faulthandler.py -p no:faulthandler . [100%] ================================== warnings summary ================================== ../../../.local/share/virtualenvs/pytest-chinese-doc-DA9roatD/lib/python3.8/site-packages/_pytest/config/__init__.py:1230 /Users/yaomeng/.local/share/virtualenvs/pytest-chinese-doc-DA9roatD/lib/python3.8/site-packages/_pytest/config/__init__.py:1230: PytestConfigWarning: Unknown config option: faulthandler_timeout self._warn_or_fail_if_strict(\"Unknown config option: {}\\n\".format(key)) -- Docs: https://docs.pytest.org/en/stable/warnings.html 1 passed, 1 warning in 6.02s \u53ef\u4ee5\u770b\u5230\uff0c\u8d85\u65f6\u5e76\u4e0d\u4f1a\u89e6\u53d1\u56de\u6eaf\u4fe1\u606f\u7684\u6253\u5370\u3002\u4e0d\u8fc7\u6211\u4eec\u4f1a\u5f97\u5230\u4e00\u4e2a\u544a\u8b66\uff0c\u56e0\u4e3a\u6211\u4eec\u5173\u95ed\u4e86 faulthandler \u63d2\u4ef6\uff0c\u90a3\u4e48\u5b83\u5b9a\u4e49\u7684 faulthandler_timeout \u914d\u7f6e\u5c06\u65e0\u6cd5\u8bc6\u522b\u3002 Note \u8fd9\u4e2a\u529f\u80fd\u662f\u4ece pytest-faulthandler \u63d2\u4ef6\u5408\u5e76\u800c\u6765\u7684\uff0c\u4f46\u662f\u6709\u4e24\u70b9\u4e0d\u540c\uff1a \u53bb\u4f7f\u80fd\u65f6\uff0c\u4f7f\u7528 -p no:faulthandler \u4ee3\u66ff\u539f\u6765\u7684 --no-faulthandler ; \u4f7f\u7528 faulthandler_timeout \u914d\u7f6e\u9879\u4ee3\u66ff --faulthandler-timeout \u547d\u4ee4\u884c\u9009\u9879\u6765\u914d\u7f6e\u8d85\u65f6\u65f6\u95f4\u3002\u5f53\u7136\uff0c\u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528 -o faulthandler_timeout=X \u5728\u547d\u4ee4\u884c\u914d\u7f6e\uff1b","title":"\u9519\u8bef\u53e5\u67c4"},{"location":"zh-Hans-CN/%E4%BA%8C%E3%80%81%E4%BD%BF%E7%94%A8%E5%92%8C%E8%B0%83%E7%94%A8/#junitxml","text":"\u4f7f\u7528\u5982\u4e0b\u547d\u4ee4\uff0c\u53ef\u4ee5\u5728\u6307\u5b9a\u7684 path \u4e2d\u521b\u5efa\u4e00\u4e2a\u80fd\u88ab Jenkins \u6216\u8005\u5176\u4ed6CI\u5de5\u5177\u8bfb\u53d6\u7684 XML \u683c\u5f0f\u7684\u6d4b\u8bd5\u62a5\u544a\uff1a $ pytest --junitxml=path \u4f60\u53ef\u4ee5\u5728\u9879\u76ee\u7684 pytest.ini \u6587\u4ef6\u4e2d\uff0c\u901a\u8fc7\u8bbe\u7f6e junit_suite_name \u7684\u503c\uff0c\u81ea\u5b9a\u4e49 XML \u6587\u4ef6\u4e2d testsuite \u6839\u8282\u70b9\u7684 name \u4fe1\u606f\uff1a # src/chapter-2/pytest.ini [pytest] junit_suite_name = pytest_chinese_doc Attention junit_suite_name \u662f pytest 4.0 \u7248\u672c\u65b0\u589e\u7684\u914d\u7f6e\u9879\uff1b \u6211\u4eec\u5148\u6765\u6267\u884c\u4e00\u4e2a\u6d4b\u8bd5\u7528\u4f8b test_nodeid.py::test_one \u770b\u770b\u6548\u679c\uff1a $ pipenv run pytest -q --junitxml=src/chapter-2/report/test_one.xml src/chapter-2/test_nodeid.py::test_one . [100%] - generated xml file: /Users/yaomeng/Private/projects/pytest-chinese-doc/src/chapter-2/report/test_one.xml - 1 passed in 0.02s \u67e5\u770b\u751f\u6210\u7684 XML \u6587\u4ef6\uff1a <?xml version=\"1.0\" encoding=\"utf-8\"?> <testsuites> <testsuite name=\"pytest_chinese_doc\" errors=\"0\" failures=\"0\" skipped=\"0\" tests=\"1\" time=\"0.025\" timestamp=\"2020-10-06T10:46:48.256695\" hostname=\"yaomengdeMacBook-Air.local\"> <testcase classname=\"test_nodeid\" name=\"test_one\" time=\"0.001\"/> </testsuite> </testsuites> \u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c <testsuite> \u8282\u70b9\u7684 name \u5c5e\u6027\u7684\u503c\uff0c\u53d8\u4e3a\u6211\u4eec\u6240\u671f\u671b\u7684 pytest_chinese_doc \uff0c\u800c\u4e0d\u662f\u9ed8\u8ba4\u7684 pytest \u3002 JUnit XML\u89c4\u5b9a time \u5c5e\u6027\u5e94\u8be5\u8868\u660e\u6d4b\u8bd5\u7528\u4f8b\u6267\u884c\u7684\u5168\u90e8\u8017\u65f6\uff0c\u5305\u542b setup \u548c teardown \u4e2d\u7684\u64cd\u4f5c\uff0c\u8fd9\u4e5f\u662fpytest\u7684\u9ed8\u8ba4\u884c\u4e3a\uff1b \u5982\u679c\u4f60\u53ea\u60f3\u8bb0\u5f55\u6d4b\u8bd5\u7528\u4f8b\u6267\u884c\u7684\u65f6\u95f4\uff0c\u53ea\u9700\u8981\u505a\u5982\u4e0b\u914d\u7f6e\uff1a # src/chapter-2/pytest.ini [pytest] junit_duration_report = call","title":"\u521b\u5efaJUnitXML\u683c\u5f0f\u7684\u6d4b\u8bd5\u62a5\u544a"},{"location":"zh-Hans-CN/%E4%BA%8C%E3%80%81%E4%BD%BF%E7%94%A8%E5%92%8C%E8%B0%83%E7%94%A8/#xml","text":"\u6211\u4eec\u6709\u4e24\u79cd\u65b9\u5f0f\u5b9e\u73b0\u8fd9\u4e2a\u529f\u80fd\uff1a \u4f7f\u7528 record_property fixture\uff1a \u4f8b\u5982\uff1a\u4e3a test_xml_report::test_record_property \u7528\u4f8b\u6dfb\u52a0\u4e00\u4e2a\u989d\u5916\u7684 test_id \u4fe1\u606f\uff1a # src/chapter-2/test_xml_report.py def test_record_property(record_property): record_property(\"test_id\", 10010) \u5728 XML \u6587\u4ef6\u4e2d\u7684\u8868\u73b0\u4e3a\uff1a <property name=\"test_id\" value=\"10010\"/> \u3002 <!-- src/chapter-2/report/test_record_property.xml --> <?xml version=\"1.0\" encoding=\"utf-8\"?> <testsuites> <testsuite name=\"pytest_chinese_doc\" errors=\"0\" failures=\"0\" skipped=\"0\" tests=\"1\" time=\"0.021\" timestamp=\"2020-10-06T11:10:59.021407\" hostname=\"yaomengdeMacBook-Air.local\"> <testcase classname=\"test_xml_report\" name=\"test_record_property\" time=\"0.000\"> <properties> <property name=\"test_id\" value=\"10010\"/> </properties> </testcase> </testsuite> </testsuites> \u65b0\u589e\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7684\u6807\u8bb0 @pytest.mark.test_id() : \u9996\u5148\uff0c\u5728 conftest.py \u6587\u4ef6\u4e2d\u91cd\u8f7d pytest_collection_modifyitems \u94a9\u5b50\u65b9\u6cd5\uff0c\u6dfb\u52a0\u5bf9 test_id \u6807\u8bb0\u7684\u652f\u6301\uff1a # src/chapter-2/conftest.py def pytest_collection_modifyitems(items): for item in items: for marker in item.iter_markers(name=\"test_id\"): test_id = marker.args[0] item.user_properties.append((\"test_id\", test_id)) \u7136\u540e\uff0c\u4e3a\u6d4b\u8bd5\u7528\u4f8b\u6dfb\u52a0\u65b0\u6807\u8bb0\uff1a # src/chapter-2/test_xml_report.py import pytest @pytest.mark.test_id(10086) def test_marker_test_id(): pass \u5728 XML \u6587\u4ef6\u4e2d\u7684\u8868\u73b0\u4e5f\u4e3a\uff1a <property name=\"test_id\" value=\"10086\"/> \u3002 <?xml version=\"1.0\" encoding=\"utf-8\"?> <testsuites> <testsuite name=\"pytest_chinese_doc\" errors=\"0\" failures=\"0\" skipped=\"0\" tests=\"2\" time=\"0.025\" timestamp=\"2020-10-06T11:23:30.388331\" hostname=\"yaomengdeMacBook-Air.local\"> <testcase classname=\"test_xml_report\" name=\"test_marker_test_id\" time=\"0.000\"> <properties> <property name=\"test_id\" value=\"10086\"/> </properties> </testcase> <testcase classname=\"test_xml_report\" name=\"test_record_property\" time=\"0.000\"> <properties> <property name=\"test_id\" value=\"10010\"/> </properties> </testcase> </testsuite> </testsuites> Warning \u8fd9\u65f6\u6211\u4eec\u4f1a\u5f97\u5230\u4e00\u4e2a\u544a\u8b66\uff1a PytestUnknownMarkWarning: Unknown pytest.mark.test_id - is this a typo? You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/mark.html @pytest.mark.test_id(10010) \u8fd9\u662f\u56e0\u4e3a\u6211\u4eec\u6ca1\u6709\u5728pytest\u4e2d\u6ce8\u518ctest_id\u6807\u8bb0\uff0c\u4f46\u4e0d\u5f71\u54cd\u6b63\u5e38\u7684\u6267\u884c\uff1b \u5982\u679c\u4f60\u60f3\u53bb\u9664\u8fd9\u4e2a\u544a\u8b66\uff0c\u53ea\u9700\u8981\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u6ce8\u518c\u8fd9\u4e2a\u6807\u8bb0\uff1a [pytest] markers = test_id: \u4e3a\u6d4b\u8bd5\u7528\u4f8b\u6dfb\u52a0ID Important \u4ece pytest 6.0 \u7248\u672c\u5f00\u59cb\uff0c --junit_family \u547d\u4ee4\u884c\u9009\u9879\u7684\u9ed8\u8ba4\u503c\u6539\u6210 xunit2 \uff0c\u8fd9\u662f\u5bf9\u65e7\u7684 xunit1 \u683c\u5f0f\u7684\u4e00\u79cd\u66f4\u65b0\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u64cd\u4f5c\u6b64\u7c7b\u6587\u4ef6\u7684\u5de5\u5177\uff08Jenkins\u3001Azure Pipelines\u7b49\uff09\u5747\u652f\u6301\u8be5\u683c\u5f0f\u3002 \u4f7f\u7528 xunit2 \u683c\u5f0f\uff0c\u53ea\u9700\u8981\u66f4\u65b0\u4f60\u7684\u914d\u7f6e\u6587\u4ef6\uff1a [pytest] junit_family=xunit2 \u5982\u679c\u4f60\u6240\u4f7f\u7528\u7684\u5de5\u5177\u5e76\u4e0d\u652f\u6301\u8fd9\u79cd\u65b0\u683c\u5f0f\uff0c\u4f60\u4e5f\u53ef\u4ee5\u7ee7\u7eed\u4f7f\u7528\u4e4b\u524d\u7684\u683c\u5f0f\uff1a [pytest] junit_family=legacy \u76ee\u524d\u5df2\u77e5\u7684\u652f\u6301 xunit2 \u683c\u5f0f\u7684\u5de5\u5177\u6709\uff1a Jenkins \u5e76\u7ed3\u5408 JUnit \u63d2\u4ef6\uff1b Azure Pipelines \uff1b","title":"\u5728XML\u62a5\u544a\u4e2d\u4e3a\u6d4b\u8bd5\u7528\u4f8b\u9644\u52a0\u989d\u5916\u7684\u5b50\u8282\u70b9\u4fe1\u606f"},{"location":"zh-Hans-CN/%E4%BA%8C%E3%80%81%E4%BD%BF%E7%94%A8%E5%92%8C%E8%B0%83%E7%94%A8/#xml_1","text":"\u53ef\u4ee5\u901a\u8fc7 record_xml_attribute fixture \u4e3a\u6d4b\u8bd5\u7528\u4f8b\u9644\u52a0\u989d\u5916\u7684 \u5c5e\u6027 \uff0c\u800c\u4e0d\u50cf record_property \u4e3a\u5176\u6dfb\u52a0\u5b50\u8282\u70b9\uff1b \u4f8b\u5982\uff1a\u4e3a\u6d4b\u8bd5\u7528\u4f8b\u6dfb\u52a0\u4e00\u4e2a test_id \u5c5e\u6027\uff0c\u5e76\u4fee\u6539\u539f\u5148\u7684 classname \u5c5e\u6027\uff1a # src/chapter-2/test_xml_report.py def test_record_xml_attribute(record_xml_attribute): record_xml_attribute(\"test_id\", 10010) record_xml_attribute(\"classname\", \"custom_classname\") \u5728\u62a5\u544a\u4e2d\u7684\u8868\u73b0\u4e3a <testcase classname=\"custom_classname\" test_id=\"10010\" ... \uff1a <!-- src/chapter-2/report/test_record_xml_attribute.xml --> <?xml version=\"1.0\" encoding=\"utf-8\"?> <testsuites> <testsuite name=\"pytest_chinese_doc\" errors=\"0\" failures=\"0\" skipped=\"0\" tests=\"1\" time=\"0.024\" timestamp=\"2020-10-06T14:58:12.006400\" hostname=\"yaomengdeMacBook-Air.local\"> <testcase classname=\"custom_classname\" name=\"test_record_xml_attribute\" file=\"test_xml_report.py\" line=\"12\" test_id=\"10010\" time=\"0.011\"/> </testsuite> </testsuites> Warning record_xml_attribute \u76ee\u524d\u662f\u4e00\u4e2a\u5b9e\u9a8c\u6027\u7684\u529f\u80fd\uff0c\u672a\u6765\u53ef\u80fd\u88ab\u66f4\u5f3a\u5927\u7684 API \u6240\u66ff\u4ee3\uff0c\u4f46\u529f\u80fd\u672c\u8eab\u4f1a\u88ab\u4fdd\u7559\u3002","title":"\u5728XML\u62a5\u544a\u4e2d\u4e3a\u6d4b\u8bd5\u7528\u4f8b\u9644\u52a0\u989d\u5916\u7684\u5c5e\u6027\u4fe1\u606f"},{"location":"zh-Hans-CN/%E4%BA%8C%E3%80%81%E4%BD%BF%E7%94%A8%E5%92%8C%E8%B0%83%E7%94%A8/#xml_2","text":"Attention pytest 4.5 \u7248\u672c\u65b0\u589e\u529f\u80fd \u53ef\u4ee5\u901a\u8fc7\u81ea\u5b9a\u4e49\u4e00\u4e2a session \u4f5c\u7528\u57df\u7ea7\u522b\u7684 fixture\uff0c\u4e3a\u6d4b\u8bd5\u96c6\u6dfb\u52a0\u5b50\u8282\u70b9\u4fe1\u606f\uff0c\u5e76\u4e14\u4f1a\u4f5c\u7528\u4e8e\u6240\u6709\u7684\u6d4b\u8bd5\u7528\u4f8b\uff1b \u8fd9\u4e2a\u81ea\u5b9a\u4e49\u7684 fixture \u9700\u8981\u8c03\u7528\u53e6\u5916\u4e00\u4e2a record_testsuite_property fixture\uff1a record_testsuite_property \u63a5\u6536\u4e24\u4e2a\u53c2\u6570 name \u548c value \u4ee5\u6784\u6210 <property> \u6807\u7b7e\uff0c\u5176\u4e2d\uff0c name \u5fc5\u987b\u4e3a\u5b57\u7b26\u4e32\uff0c value \u4f1a\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\u5e76\u8fdb\u884c XML \u8f6c\u4e49\uff1b # src/chapter-2/test_xml_report.py @pytest.fixture(scope=\"session\") def log_global_env_facts(record_testsuite_property): record_testsuite_property(\"EXECUTOR\", \"luizyao\") record_testsuite_property(\"LOCATION\", \"NJ\") def test_testsuite_property(log_global_env_facts): pass \u751f\u6210\u7684\u6d4b\u8bd5\u62a5\u544a\u8868\u73b0\u4e3a\uff1a\u5728 testsuite \u8282\u70b9\u4e2d\uff0c\u591a\u4e86\u4e00\u4e2a properties \u5b50\u8282\u70b9\uff0c\u5305\u542b\u6240\u6709\u65b0\u589e\u7684\u5c5e\u6027\u8282\u70b9\uff0c\u800c\u4e14\uff0c\u5b83\u548c\u6240\u6709\u7684 testcase \u8282\u70b9\u662f\u5e73\u7ea7\u7684\uff1b <!-- src/chapter-2/report/test_testsuite_property.xml --> <?xml version=\"1.0\" encoding=\"utf-8\"?> <testsuites> <testsuite name=\"pytest_chinese_doc\" errors=\"0\" failures=\"0\" skipped=\"0\" tests=\"1\" time=\"0.022\" timestamp=\"2020-10-06T15:07:49.768753\" hostname=\"yaomengdeMacBook-Air.local\"> <properties> <property name=\"EXECUTOR\" value=\"luizyao\"/> <property name=\"LOCATION\" value=\"NJ\"/> </properties> <testcase classname=\"test_xml_report\" name=\"test_testsuite_property\" file=\"test_xml_report.py\" line=\"23\" time=\"0.000\"/> </testsuite> </testsuites> \u8fd9\u6837\u751f\u6210\u7684 XML \u6587\u4ef6\u662f\u7b26\u5408\u6700\u65b0\u7684 xunit2 \u6807\u51c6\u7684\uff0c\u8fd9\u70b9\u548c record_property \u3001 record_xml_attribute \u6b63\u597d\u76f8\u53cd\u3002\u5982\u679c junit_family=xunit2 \uff0c\u5b83\u4eec\u4f1a\u89e6\u53d1\u544a\u8b66\uff1a PytestWarning: record_xml_attribute is incompatible with junit_family 'xunit2' (use 'legacy' or 'xunit1') \uff0c\u800c record_testsuite_property \u4e0d\u4f1a\u3002","title":"\u5728XML\u62a5\u544a\u4e2d\u4e3a\u6d4b\u8bd5\u96c6\u9644\u52a0\u989d\u5916\u7684\u5b50\u8282\u70b9\u4fe1\u606f"},{"location":"zh-Hans-CN/%E4%BA%8C%E3%80%81%E4%BD%BF%E7%94%A8%E5%92%8C%E8%B0%83%E7%94%A8/#url-pastebin","text":"\u76ee\u524d\uff0c\u53ea\u5b9e\u73b0\u4e86\u5728 http://bpaste.net \u4e0a\u7684\u5c55\u793a\u529f\u80fd\uff1b \u4e3a\u6bcf\u4e00\u4e2a\u5931\u8d25\u7684\u6d4b\u8bd5\u7528\u4f8b\u521b\u5efa\u4e00\u4e2aURL pytest --pastebin=failed \u4e5f\u53ef\u4ee5\u901a\u8fc7\u6dfb\u52a0 -x \u9009\u9879\uff0c\u53ea\u4e3a\u7b2c\u4e00\u4e2a\u5931\u8d25\u7684\u6d4b\u8bd5\u7528\u4f8b\u521b\u5efa\u4e00\u4e2aURL\uff1b \u4e3a\u6240\u6709\u7684\u6d4b\u8bd5\u7528\u4f8b\u521b\u5efa\u4e00\u4e2aURL pytest --pastebin=all","title":"\u4e3a\u6d4b\u8bd5\u62a5\u544a\u63d0\u4f9bURL\u94fe\u63a5 -- pastebin\u670d\u52a1"},{"location":"zh-Hans-CN/%E4%BA%8C%E3%80%81%E4%BD%BF%E7%94%A8%E5%92%8C%E8%B0%83%E7%94%A8/#_16","text":"\u4f60\u53ef\u4ee5\u5728\u547d\u4ee4\u884c\u4e2d\u4f7f\u7528 -p \u9009\u9879\uff0c\u6765\u5c3d\u65e9\u7684\u52a0\u8f7d\u67d0\u4e00\u4e2a\u63d2\u4ef6\uff1a pytest -p mypluginmodule -p \u9009\u9879\u63a5\u6536\u4e00\u4e2a name \u53c2\u6570\uff0c\u8fd9\u4e2a\u53c2\u6570\u53ef\u4ee5\u4e3a\uff1a \u4e00\u4e2a\u5b8c\u6574\u7684\u672c\u5730\u63d2\u4ef6\u5f15\u5165\uff0c\u4f8b\u5982\uff1a myproject.plugins \uff0c\u5176\u5fc5\u987b\u662f\u53ef\u4ee5 import \u7684\u3002 \u4e00\u4e2a\u516c\u5171\u63d2\u4ef6\u7684\u540d\u79f0\uff0c\u8fd9\u662f\u5176\u6ce8\u518c\u65f6\u5728 setuptools \u4e2d\u8d4b\u4e88\u7684\u540d\u5b57\uff0c\u4f8b\u5982\uff1a\u5c3d\u65e9\u7684\u52a0 pytest-cov \u63d2\u4ef6\uff1a pytest -p pytest_cov","title":"\u5c3d\u65e9\u7684\u52a0\u8f7d\u63d2\u4ef6"},{"location":"zh-Hans-CN/%E4%BA%8C%E3%80%81%E4%BD%BF%E7%94%A8%E5%92%8C%E8%B0%83%E7%94%A8/#_17","text":"\u4f60\u53ef\u4ee5\u5728\u547d\u4ee4\u884c\u4e2d\u4f7f\u7528 -p \u7ed3\u5408 no: \uff0c\u6765\u53bb\u4f7f\u80fd\u4e00\u4e2a\u63d2\u4ef6\u7684\u52a0\u8f7d\uff0c\u4f8b\u5982\uff1a pytest -p no:doctest","title":"\u53bb\u4f7f\u80fd\u63d2\u4ef6"},{"location":"zh-Hans-CN/%E4%BA%8C%E3%80%81%E4%BD%BF%E7%94%A8%E5%92%8C%E8%B0%83%E7%94%A8/#pythonpytest","text":"\u53ef\u4ee5\u76f4\u63a5\u5728\u4ee3\u7801\u4e2d\u8c03\u7528 pytest \uff1a pytest.main() \u8fd9\u548c\u4f60\u5728\u547d\u4ee4\u884c\u4e2d\u6267\u884c pytest \u51e0\u4e4e\u662f\u4e00\u6837\u7684\uff0c\u4f46\u5176\u4e5f\u6709\u4ee5\u4e0b\u7279\u70b9\uff1a \u4e0d\u4f1a\u89e6\u53d1 SystemExit \uff0c\u800c\u662f\u8fd4\u56de exitcode \uff1a # src/chapter-2/test_via_main.py import time def test_one(): time.sleep(10) if __name__ == \"__main__\": import pytest ret = pytest.main([\"-q\", __file__]) print( \"pytest.main() \u8fd4\u56de pytest.ExitCode.INTERRUPTED\uff1a\", ret == pytest.ExitCode.INTERRUPTED, ) \u7528\u4f8b\u4e2d\u6709\u7b49\u5f8510\u79d2\u7684\u64cd\u4f5c\uff0c\u5728\u8fd9\u671f\u95f4\uff0c\u6253\u65ad\u6267\u884c\uff08 Ctr+C \uff09\uff0c pytest.main() \u8fd4\u56de\u7684\u662f INTERRUPTED \u72b6\u6001\u7801\uff1b pipenv run python src/chapter-2/test_via_main.py ^C !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! KeyboardInterrupt !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! /Users/yaomeng/Private/projects/pytest-chinese-doc/src/chapter-2/test_via_main.py:5: KeyboardInterrupt (to show a full traceback on KeyboardInterrupt use --full-trace) no tests ran in 1.38s pytest.main() \u8fd4\u56de pytest.ExitCode.INTERRUPTED\uff1a True \u4f20\u9012\u9009\u9879\u548c\u53c2\u6570\uff1a pytest.main([\"-x\", \"mytestdir\"]) \u6307\u5b9a\u4e00\u4e2a\u63d2\u4ef6\uff1a import pytest class MyPlugin: def pytest_sessionfinish(self): print(\"*** test run reporting finishing\") pytest.main([\"-qq\"], plugins=[MyPlugin()]) Note \u8c03\u7528 pytest.main() \u4f1a\u5f15\u5165\u4f60\u7684\u6d4b\u8bd5\u6587\u4ef6\u4ee5\u53ca\u5176\u5f15\u7528\u7684\u6240\u6709\u6a21\u5757\u3002\u7531\u4e8e python \u5f15\u5165\u673a\u5236\u7684\u7f13\u5b58\u7279\u6027\uff0c\u5f53\u8fd9\u4e9b\u6587\u4ef6\u53d1\u751f\u53d8\u5316\u65f6\uff0c\u540e\u7eed\u518d\u8c03\u7528 pytest.main() \uff08\u5728\u540c\u4e00\u4e2a\u7a0b\u5e8f\u6267\u884c\u8fc7\u7a0b\u4e2d\uff09\u65f6\uff0c\u5e76\u4e0d\u4f1a\u54cd\u5e94\u8fd9\u4e9b\u6587\u4ef6\u7684\u53d8\u5316\u3002 \u57fa\u4e8e\u8fd9\u4e2a\u539f\u56e0\uff0c\u6211\u4eec\u4e0d\u63a8\u8350\u5728\u540c\u4e00\u4e2a\u7a0b\u5e8f\u4e2d\u591a\u6b21\u8c03\u7528 pytest.main() \uff08\u4f8b\u5982\uff1a\u4e3a\u4e86\u91cd\u65b0\u6267\u884c\u6d4b\u8bd5\uff1b\u5982\u679c\u4f60\u786e\u5b9e\u6709\u8fd9\u4e2a\u9700\u6c42\uff0c\u6216\u8bb8\u53ef\u4ee5\u8003\u8651 pytest-repeat \u63d2\u4ef6\uff09\uff1b","title":"\u5728python\u4ee3\u7801\u4e2d\u8c03\u7528pytest"},{"location":"zh-Hans-CN/blogs/pytest-pyppeteer%EF%BC%9A%E5%9C%A8pytest%E4%B8%AD%E8%BF%90%E8%A1%8Cpyppeteer/","text":"pytest-pyppeteer # pytest-pyppeteer \u662f\u6211\u5199\u7684\u4e00\u4e2a pytest \u63d2\u4ef6\uff0c\u652f\u6301\u5728 pytest \u4e2d\u8fd0\u884c pyppeteer \uff0c\u8d77\u56e0\u662f\u4e3a\u4e86\u89e3\u51b3\u5de5\u4f5c\u4e2d\u7684\u4e00\u4e2a\u6d4b\u8bd5\u9700\u6c42\uff0c\u73b0\u5728\u5c06\u5176\u5f00\u6e90\u5e76\u505a\u7b80\u5355\u4ecb\u7ecd\u3002 \u80cc\u666f # \u4e3a\u4ec0\u4e48\u4e0d\u7528 selenium\uff1f # \u4e3b\u8981\u7684\u539f\u56e0\u662f selenium \u7684\u914d\u7f6e\u6bd4\u8f83\u7e41\u7410\uff0c\u6700\u5e38\u89c1\u7684\u95ee\u9898\u662f\u9700\u8981\u4fdd\u6301 webdriver \u548c\u6d4f\u89c8\u5668\u7248\u672c\u7684\u4e00\u81f4\u6027\u3002 pyppeteer \u7684\u7b80\u5355\u4ecb\u7ecd # pyppeteer \u662f puppeteer \u7684\u975e\u5b98\u65b9 python \u7248\u672c\uff0c\u51e0\u4e4e\u5b9e\u73b0\u4e86\u548c\u5176\u76f8\u540c\u7684 API\uff0c\u53ef\u4ee5\u975e\u5e38\u65b9\u4fbf\u7684\u53bb\u64cd\u4f5c Chrome \u6d4f\u89c8\u5668\u3002 pyppeteer \u7684\u5c40\u9650\u6027 # \u76ee\u524d\u6700\u660e\u663e\u7684\u95ee\u9898\u662f\u6ca1\u6709\u63d0\u4f9b\u8de8\u6d4f\u89c8\u5668\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u6700\u65b0\u7684 puppeteer \u5df2\u7ecf\u63d0\u4f9b\u5bf9 Firefox \u7684\u652f\u6301\uff0c\u4f46\u662f pyppeteer \u53ef\u80fd\u8fd8\u9700\u8981\u4e00\u4e9b\u65f6\u95f4\u3002 \u5b89\u88c5 # Note \u63a8\u8350\u4f7f\u7528 pipenv \u7ba1\u7406\u865a\u62df\u73af\u5883\uff0c\u5e76\u66ff\u6362\u4e3a\u56fd\u5185 pip \u6e90\u3002 $ pipenv install pytest-pyppeteer Attention \u4ec5\u652f\u6301 python >= 3.7 \u5feb\u901f\u5f00\u59cb # \u7528\u4e0b\u9762\u8fd9\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u6765\u8bf4\u660e\uff1a\u65ad\u8a00\u7535\u5f71\u300a\u6d3b\u7740\u300b\u7684\u8c46\u74e3\u8bc4\u5206\u5927\u4e8e 9.0\u3002 from dataclasses import dataclass from pytest_pyppeteer.models import Browser @dataclass(init=False) class Elements: \"\"\"\u6536\u96c6\u6240\u6709\u4f7f\u7528\u5230\u7684\u9875\u9762\u5143\u7d20\uff0c\u53ef\u4ee5\u4e3a XPath \u6216\u8005 CSS Selector\u3002\"\"\" # \u67e5\u8be2\u8f93\u5165\u6846 query = \"#inp-query\" # \u70b9\u51fb\u641c\u7d22 apply = \".inp-btn > input:nth-child(1)\" # \u7b2c\u4e00\u6761\u7ed3\u679c first_result = ( \"#root > div > div > div > div > div:nth-child(1) > div.item-root a.cover-link\" ) # \u8bc4\u5206 rating = ( \"#interest_sectl > div.rating_wrap.clearbox > div.rating_self.clearfix > strong\" ) async def test_lifetimes(pyppeteer: Browser): page = await pyppeteer.new_page() await page.goto('https://movie.douban.com/') await page.type(Elements.query, \"\u6d3b\u7740\") await page.click(Elements.apply) await page.waitfor(Elements.first_result) await page.click(Elements.first_result) await page.waitfor(Elements.rating) rating = await page.get_value(Elements.rating) assert float(rating) >= 9.0 \u6267\u884c\u6d4b\u8bd5\u7528\u4f8b\uff0c\u770b\u4e00\u4e0b\u6548\u679c\uff1a \u8fd9\u91cc\u6211\u4eec\u65e0\u9700\u6307\u5b9a\u6d4f\u89c8\u5668\u7684\u8def\u5f84\uff0cpytest-pyppeteer \u4f1a\u5728\u5bf9\u5e94\u5e73\u53f0\u9ed8\u8ba4\u7684\u5b89\u88c5\u8def\u5f84\u4e0b\u641c\u5bfb Chrome \u7684\u53ef\u6267\u884c\u6587\u4ef6\u3002 \u4e5f\u53ef\u4ee5\u901a\u8fc7 --executable-path \u547d\u4ee4\u884c\u9009\u9879\u663e\u793a\u7684\u6307\u5b9a Chrome \u7684\u8def\u5f84\u3002 \u6216\u8005\uff0c\u5728\u4f60\u7684 conftest.py \u6587\u4ef6\u4e2d\u6307\u5b9a: @pytest.fixture(scope=\"session\") def executable_path(executable_path): if executable_path is None: return \"path/to/Chrome/or/Chromium\" return executable_path \u5176\u5b83\u652f\u6301\u7684\u547d\u4ee4\u884c\u9009\u9879\uff0c\u5305\u62ec\uff1a --headless \uff1a\u4f7f\u7528\u6d4f\u89c8\u5668\u7684\u65e0\u5934\u6a21\u5f0f\uff1b --args \uff1a\u4e3a\u6d4f\u89c8\u5668\u6307\u5b9a\u5176\u5b83\u53c2\u6570\u3002\u4f8b\u5982\uff1a\u6307\u5b9a\u4ee3\u7406\u670d\u52a1\u5668\uff1a $ pytest --args proxy-server \"localhost:5555,direct://\" --args proxy-bypass-list \"192.0.0.1/8;10.0.0.1/8\" --window-size \uff1a\u6307\u5b9a\u6d4f\u89c8\u5668\u7684\u5927\u5c0f\uff0c\u9ed8\u8ba4\u662f 800*600\uff1b --window-size 0 0 \u8868\u793a\u6700\u5927\u5316\u6d4f\u89c8\u5668\uff1b \u540c\u65f6\u64cd\u4f5c\u591a\u4e2a\u6d4f\u89c8\u5668 # \u7528\u4e0b\u9762\u8fd9\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u6765\u8bf4\u660e\uff1a\u65ad\u8a00\u4e66\u7c4d\u300a\u6d3b\u7740\u300b\u7684\u8c46\u74e3\u8bc4\u5206\u9ad8\u4e8e\u5176\u7535\u5f71\u7684\u8bc4\u5206\u3002 import asyncio from dataclasses import dataclass from pytest_pyppeteer.models import Browser, Page @dataclass(init=False) class Elements: \"\"\"\u516c\u5171\u5bf9\u8c61\u5e93\"\"\" query = \"#inp-query\" apply = \".inp-btn > input:nth-child(1)\" @dataclass(init=False) class BookElements(Elements): url = \"https://book.douban.com/\" first_result = '(//*[@class=\"item-root\"]/a)[1]' rating = \"#interest_sectl > div > div.rating_self.clearfix > strong\" @dataclass(init=False) class MovieElements(Elements): url = \"https://movie.douban.com/\" first_result = ( \"#root > div > div > div > div > div:nth-child(1) > div.item-root a.cover-link\" ) rating = ( \"#interest_sectl > div.rating_wrap.clearbox > div.rating_self.clearfix > strong\" ) async def query_rating(pyppeteer: Browser, name: str, elements: Elements): \"\"\"\u83b7\u53d6\u7535\u5f71\u6216\u8005\u4e66\u7c4d\u7684\u8bc4\u5206\u3002\"\"\" page: Page = await pyppeteer.new_page() await page.goto(elements.url) await page.type(elements.query, name) await page.click(elements.apply) await page.waitfor(elements.first_result) await page.click(elements.first_result) await page.waitfor(elements.rating) rating = await page.get_value(elements.rating) return rating async def test_multiple_pyppeteer(pyppeteer_factory): pyppeteer1 = await pyppeteer_factory() pyppeteer2 = await pyppeteer_factory() movie_rating, book_rating = await asyncio.gather( query_rating(pyppeteer1, \"\u6d3b\u7740\", MovieElements), query_rating(pyppeteer2, \"\u6d3b\u7740\", BookElements) ) assert book_rating >= movie_rating \u901a\u8fc7 pyppeteer_factory \u53ef\u4ee5\u83b7\u53d6\u591a\u4e2a\u6d4f\u89c8\u5668\u5b9e\u4f8b\uff0c\u5206\u522b\u6267\u884c\u4e0d\u540c\u7684\u64cd\u4f5c\uff0c\u518d\u5229\u7528 python \u6807\u51c6\u5e93 asyncio \u53ef\u4ee5\u5f88\u65b9\u4fbf\u7684\u8fdb\u884c\u5f02\u6b65\u8c03\u7528\uff0c\u8282\u7701\u65f6\u95f4\u3002 \u6267\u884c\u6d4b\u8bd5\u7528\u4f8b\uff0c\u770b\u4e00\u4e0b\u6548\u679c\uff1a Github \u4ed3\u5e93 # \u66f4\u591a\u529f\u80fd\u53ef\u4ee5\u8bbf\u95ee\uff1a https://github.com/luizyao/pytest-pyppeteer \uff0c\u5982\u679c\u80fd\u5e2e\u52a9\u5230\u4f60\u7684\u8bdd\uff0c\u53ef\u4ee5\u7ed9\u4e2a star\uff0c\u4e5f\u6b22\u8fce\u63d0 issue \u548c pr\u3002 pytest \u4e2d\u6587\u6587\u6863(v6.1.1) # \u4e4b\u524d\u7ffb\u8bd1\u8fc7 pytest v5.1.3 \u7684\u5b98\u65b9\u6587\u6863\u5e76\u5f00\u6e90\uff0c\u76ee\u524d\u8ba1\u5212\u66f4\u65b0\u5230 v6.1.1 \u7248\u672c\u3002 \u9879\u76ee\u66f4\u591a\u8fdb\u5ea6\u53ef\u4ee5\u8bbf\u95ee\uff1a https://github.com/luizyao/pytest-chinese-doc/tree/6.1.1","title":"pytest-pyppeteer\uff1a\u5728pytest\u4e2d\u8fd0\u884cpyppeteer"},{"location":"zh-Hans-CN/blogs/pytest-pyppeteer%EF%BC%9A%E5%9C%A8pytest%E4%B8%AD%E8%BF%90%E8%A1%8Cpyppeteer/#pytest-pyppeteer","text":"pytest-pyppeteer \u662f\u6211\u5199\u7684\u4e00\u4e2a pytest \u63d2\u4ef6\uff0c\u652f\u6301\u5728 pytest \u4e2d\u8fd0\u884c pyppeteer \uff0c\u8d77\u56e0\u662f\u4e3a\u4e86\u89e3\u51b3\u5de5\u4f5c\u4e2d\u7684\u4e00\u4e2a\u6d4b\u8bd5\u9700\u6c42\uff0c\u73b0\u5728\u5c06\u5176\u5f00\u6e90\u5e76\u505a\u7b80\u5355\u4ecb\u7ecd\u3002","title":"pytest-pyppeteer"},{"location":"zh-Hans-CN/blogs/pytest-pyppeteer%EF%BC%9A%E5%9C%A8pytest%E4%B8%AD%E8%BF%90%E8%A1%8Cpyppeteer/#_1","text":"","title":"\u80cc\u666f"},{"location":"zh-Hans-CN/blogs/pytest-pyppeteer%EF%BC%9A%E5%9C%A8pytest%E4%B8%AD%E8%BF%90%E8%A1%8Cpyppeteer/#selenium","text":"\u4e3b\u8981\u7684\u539f\u56e0\u662f selenium \u7684\u914d\u7f6e\u6bd4\u8f83\u7e41\u7410\uff0c\u6700\u5e38\u89c1\u7684\u95ee\u9898\u662f\u9700\u8981\u4fdd\u6301 webdriver \u548c\u6d4f\u89c8\u5668\u7248\u672c\u7684\u4e00\u81f4\u6027\u3002","title":"\u4e3a\u4ec0\u4e48\u4e0d\u7528 selenium\uff1f"},{"location":"zh-Hans-CN/blogs/pytest-pyppeteer%EF%BC%9A%E5%9C%A8pytest%E4%B8%AD%E8%BF%90%E8%A1%8Cpyppeteer/#pyppeteer","text":"pyppeteer \u662f puppeteer \u7684\u975e\u5b98\u65b9 python \u7248\u672c\uff0c\u51e0\u4e4e\u5b9e\u73b0\u4e86\u548c\u5176\u76f8\u540c\u7684 API\uff0c\u53ef\u4ee5\u975e\u5e38\u65b9\u4fbf\u7684\u53bb\u64cd\u4f5c Chrome \u6d4f\u89c8\u5668\u3002","title":"pyppeteer \u7684\u7b80\u5355\u4ecb\u7ecd"},{"location":"zh-Hans-CN/blogs/pytest-pyppeteer%EF%BC%9A%E5%9C%A8pytest%E4%B8%AD%E8%BF%90%E8%A1%8Cpyppeteer/#pyppeteer_1","text":"\u76ee\u524d\u6700\u660e\u663e\u7684\u95ee\u9898\u662f\u6ca1\u6709\u63d0\u4f9b\u8de8\u6d4f\u89c8\u5668\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u6700\u65b0\u7684 puppeteer \u5df2\u7ecf\u63d0\u4f9b\u5bf9 Firefox \u7684\u652f\u6301\uff0c\u4f46\u662f pyppeteer \u53ef\u80fd\u8fd8\u9700\u8981\u4e00\u4e9b\u65f6\u95f4\u3002","title":"pyppeteer \u7684\u5c40\u9650\u6027"},{"location":"zh-Hans-CN/blogs/pytest-pyppeteer%EF%BC%9A%E5%9C%A8pytest%E4%B8%AD%E8%BF%90%E8%A1%8Cpyppeteer/#_2","text":"Note \u63a8\u8350\u4f7f\u7528 pipenv \u7ba1\u7406\u865a\u62df\u73af\u5883\uff0c\u5e76\u66ff\u6362\u4e3a\u56fd\u5185 pip \u6e90\u3002 $ pipenv install pytest-pyppeteer Attention \u4ec5\u652f\u6301 python >= 3.7","title":"\u5b89\u88c5"},{"location":"zh-Hans-CN/blogs/pytest-pyppeteer%EF%BC%9A%E5%9C%A8pytest%E4%B8%AD%E8%BF%90%E8%A1%8Cpyppeteer/#_3","text":"\u7528\u4e0b\u9762\u8fd9\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u6765\u8bf4\u660e\uff1a\u65ad\u8a00\u7535\u5f71\u300a\u6d3b\u7740\u300b\u7684\u8c46\u74e3\u8bc4\u5206\u5927\u4e8e 9.0\u3002 from dataclasses import dataclass from pytest_pyppeteer.models import Browser @dataclass(init=False) class Elements: \"\"\"\u6536\u96c6\u6240\u6709\u4f7f\u7528\u5230\u7684\u9875\u9762\u5143\u7d20\uff0c\u53ef\u4ee5\u4e3a XPath \u6216\u8005 CSS Selector\u3002\"\"\" # \u67e5\u8be2\u8f93\u5165\u6846 query = \"#inp-query\" # \u70b9\u51fb\u641c\u7d22 apply = \".inp-btn > input:nth-child(1)\" # \u7b2c\u4e00\u6761\u7ed3\u679c first_result = ( \"#root > div > div > div > div > div:nth-child(1) > div.item-root a.cover-link\" ) # \u8bc4\u5206 rating = ( \"#interest_sectl > div.rating_wrap.clearbox > div.rating_self.clearfix > strong\" ) async def test_lifetimes(pyppeteer: Browser): page = await pyppeteer.new_page() await page.goto('https://movie.douban.com/') await page.type(Elements.query, \"\u6d3b\u7740\") await page.click(Elements.apply) await page.waitfor(Elements.first_result) await page.click(Elements.first_result) await page.waitfor(Elements.rating) rating = await page.get_value(Elements.rating) assert float(rating) >= 9.0 \u6267\u884c\u6d4b\u8bd5\u7528\u4f8b\uff0c\u770b\u4e00\u4e0b\u6548\u679c\uff1a \u8fd9\u91cc\u6211\u4eec\u65e0\u9700\u6307\u5b9a\u6d4f\u89c8\u5668\u7684\u8def\u5f84\uff0cpytest-pyppeteer \u4f1a\u5728\u5bf9\u5e94\u5e73\u53f0\u9ed8\u8ba4\u7684\u5b89\u88c5\u8def\u5f84\u4e0b\u641c\u5bfb Chrome \u7684\u53ef\u6267\u884c\u6587\u4ef6\u3002 \u4e5f\u53ef\u4ee5\u901a\u8fc7 --executable-path \u547d\u4ee4\u884c\u9009\u9879\u663e\u793a\u7684\u6307\u5b9a Chrome \u7684\u8def\u5f84\u3002 \u6216\u8005\uff0c\u5728\u4f60\u7684 conftest.py \u6587\u4ef6\u4e2d\u6307\u5b9a: @pytest.fixture(scope=\"session\") def executable_path(executable_path): if executable_path is None: return \"path/to/Chrome/or/Chromium\" return executable_path \u5176\u5b83\u652f\u6301\u7684\u547d\u4ee4\u884c\u9009\u9879\uff0c\u5305\u62ec\uff1a --headless \uff1a\u4f7f\u7528\u6d4f\u89c8\u5668\u7684\u65e0\u5934\u6a21\u5f0f\uff1b --args \uff1a\u4e3a\u6d4f\u89c8\u5668\u6307\u5b9a\u5176\u5b83\u53c2\u6570\u3002\u4f8b\u5982\uff1a\u6307\u5b9a\u4ee3\u7406\u670d\u52a1\u5668\uff1a $ pytest --args proxy-server \"localhost:5555,direct://\" --args proxy-bypass-list \"192.0.0.1/8;10.0.0.1/8\" --window-size \uff1a\u6307\u5b9a\u6d4f\u89c8\u5668\u7684\u5927\u5c0f\uff0c\u9ed8\u8ba4\u662f 800*600\uff1b --window-size 0 0 \u8868\u793a\u6700\u5927\u5316\u6d4f\u89c8\u5668\uff1b","title":"\u5feb\u901f\u5f00\u59cb"},{"location":"zh-Hans-CN/blogs/pytest-pyppeteer%EF%BC%9A%E5%9C%A8pytest%E4%B8%AD%E8%BF%90%E8%A1%8Cpyppeteer/#_4","text":"\u7528\u4e0b\u9762\u8fd9\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u6765\u8bf4\u660e\uff1a\u65ad\u8a00\u4e66\u7c4d\u300a\u6d3b\u7740\u300b\u7684\u8c46\u74e3\u8bc4\u5206\u9ad8\u4e8e\u5176\u7535\u5f71\u7684\u8bc4\u5206\u3002 import asyncio from dataclasses import dataclass from pytest_pyppeteer.models import Browser, Page @dataclass(init=False) class Elements: \"\"\"\u516c\u5171\u5bf9\u8c61\u5e93\"\"\" query = \"#inp-query\" apply = \".inp-btn > input:nth-child(1)\" @dataclass(init=False) class BookElements(Elements): url = \"https://book.douban.com/\" first_result = '(//*[@class=\"item-root\"]/a)[1]' rating = \"#interest_sectl > div > div.rating_self.clearfix > strong\" @dataclass(init=False) class MovieElements(Elements): url = \"https://movie.douban.com/\" first_result = ( \"#root > div > div > div > div > div:nth-child(1) > div.item-root a.cover-link\" ) rating = ( \"#interest_sectl > div.rating_wrap.clearbox > div.rating_self.clearfix > strong\" ) async def query_rating(pyppeteer: Browser, name: str, elements: Elements): \"\"\"\u83b7\u53d6\u7535\u5f71\u6216\u8005\u4e66\u7c4d\u7684\u8bc4\u5206\u3002\"\"\" page: Page = await pyppeteer.new_page() await page.goto(elements.url) await page.type(elements.query, name) await page.click(elements.apply) await page.waitfor(elements.first_result) await page.click(elements.first_result) await page.waitfor(elements.rating) rating = await page.get_value(elements.rating) return rating async def test_multiple_pyppeteer(pyppeteer_factory): pyppeteer1 = await pyppeteer_factory() pyppeteer2 = await pyppeteer_factory() movie_rating, book_rating = await asyncio.gather( query_rating(pyppeteer1, \"\u6d3b\u7740\", MovieElements), query_rating(pyppeteer2, \"\u6d3b\u7740\", BookElements) ) assert book_rating >= movie_rating \u901a\u8fc7 pyppeteer_factory \u53ef\u4ee5\u83b7\u53d6\u591a\u4e2a\u6d4f\u89c8\u5668\u5b9e\u4f8b\uff0c\u5206\u522b\u6267\u884c\u4e0d\u540c\u7684\u64cd\u4f5c\uff0c\u518d\u5229\u7528 python \u6807\u51c6\u5e93 asyncio \u53ef\u4ee5\u5f88\u65b9\u4fbf\u7684\u8fdb\u884c\u5f02\u6b65\u8c03\u7528\uff0c\u8282\u7701\u65f6\u95f4\u3002 \u6267\u884c\u6d4b\u8bd5\u7528\u4f8b\uff0c\u770b\u4e00\u4e0b\u6548\u679c\uff1a","title":"\u540c\u65f6\u64cd\u4f5c\u591a\u4e2a\u6d4f\u89c8\u5668"},{"location":"zh-Hans-CN/blogs/pytest-pyppeteer%EF%BC%9A%E5%9C%A8pytest%E4%B8%AD%E8%BF%90%E8%A1%8Cpyppeteer/#github","text":"\u66f4\u591a\u529f\u80fd\u53ef\u4ee5\u8bbf\u95ee\uff1a https://github.com/luizyao/pytest-pyppeteer \uff0c\u5982\u679c\u80fd\u5e2e\u52a9\u5230\u4f60\u7684\u8bdd\uff0c\u53ef\u4ee5\u7ed9\u4e2a star\uff0c\u4e5f\u6b22\u8fce\u63d0 issue \u548c pr\u3002","title":"Github \u4ed3\u5e93"},{"location":"zh-Hans-CN/blogs/pytest-pyppeteer%EF%BC%9A%E5%9C%A8pytest%E4%B8%AD%E8%BF%90%E8%A1%8Cpyppeteer/#pytest-v611","text":"\u4e4b\u524d\u7ffb\u8bd1\u8fc7 pytest v5.1.3 \u7684\u5b98\u65b9\u6587\u6863\u5e76\u5f00\u6e90\uff0c\u76ee\u524d\u8ba1\u5212\u66f4\u65b0\u5230 v6.1.1 \u7248\u672c\u3002 \u9879\u76ee\u66f4\u591a\u8fdb\u5ea6\u53ef\u4ee5\u8bbf\u95ee\uff1a https://github.com/luizyao/pytest-chinese-doc/tree/6.1.1","title":"pytest \u4e2d\u6587\u6587\u6863(v6.1.1)"}]}